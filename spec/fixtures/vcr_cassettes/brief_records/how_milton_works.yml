---
http_interactions:
- request:
    method: get
    uri: https://query.discovery.trln.org/trlnbib/select?f.author_facet_f.facet.limit=11&f.available_f.facet.limit=11&f.date_cataloged_dt.facet.limit=11&f.language_f.facet.limit=11&f.lcc_callnum_classification_f.facet.limit=4501&f.lcc_callnum_classification_f.facet.sort=alpha&f.location_hierarchy_f.facet.limit=-1&f.location_hierarchy_f.facet.sort=count&f.physical_media_f.facet.limit=11&f.resource_type_f.facet.limit=11&f.subject_chronological_f.facet.limit=11&f.subject_genre_f.facet.limit=11&f.subject_geographic_f.facet.limit=11&f.subject_topical_f.facet.limit=11&facet=true&facet.field=date_cataloged_dt&facet.query=date_cataloged_dt:%5BNOW-3MONTH/DAY%20TO%20NOW%5D&fq=institution_f:unc&rows=20&sort=score%20desc,%20publication_year_isort%20desc,%20title_sort_ssort_single%20asc&stats=true&stats.field=publication_year_isort&wt=json
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v2.9.0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Tue, 20 Feb 2024 19:52:21 GMT
      Content-Type:
      - application/json;charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Server:
      - nginx/1.24.0
      Content-Security-Policy:
      - default-src 'none'; base-uri 'none'; connect-src 'self'; form-action 'self';
        font-src 'self'; frame-ancestors 'none'; img-src 'self' data:; media-src 'self';
        style-src 'self' 'unsafe-inline'; script-src 'self'; worker-src 'self';
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      Vary:
      - Accept-Encoding, User-Agent
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        {
  "responseHeader":{
    "zkConnected":true,
    "status":0,
    "QTime":5729,
    "params":{
      "f.lcc_callnum_classification_f.facet.limit":"4501",
      "facet.field":["access_type_f",
        "available_f",
        "{!ex=rollup}location_hierarchy_f",
        "resource_type_f",
        "lcc_callnum_classification_f",
        "language_f",
        "date_cataloged_dt"],
      "f.available_f.facet.limit":"11",
      "f.date_cataloged_dt.facet.limit":"11",
      "f.location_hierarchy_f.facet.sort":"count",
      "f.subject_chronological_f.facet.limit":"11",
      "f.subject_genre_f.facet.limit":"11",
      "fq":"institution_f:unc",
      "sort":"score desc, publication_year_isort desc, title_sort_ssort_single asc",
      "rows":"20",
      "f.subject_geographic_f.facet.limit":"11",
      "facet.query":["date_cataloged_dt:[NOW-7DAY/DAY TO NOW]",
        "date_cataloged_dt:[NOW-1MONTH/DAY TO NOW]",
        "date_cataloged_dt:[NOW-3MONTH/DAY TO NOW]"],
      "f.language_f.facet.limit":"11",
      "f.location_hierarchy_f.facet.limit":"-1",
      "stats":"true",
      "f.physical_media_f.facet.limit":"11",
      "f.author_facet_f.facet.limit":"11",
      "f.resource_type_f.facet.limit":"11",
      "f.lcc_callnum_classification_f.facet.sort":"alpha",
      "f.subject_topical_f.facet.limit":"11",
      "facet":"true",
      "wt":"json",
      "stats.field":"publication_year_isort"}},
  "response":{"numFound":8048052,"start":0,"numFoundExact":true,"docs":[
      {
        "id":"UNCb11138369",
        "url_a":["{\"href\":\"https://login.libproxy.lib.unc.edu/login?url=https://ebookcentral.proquest.com/lib/unc/detail.action?docID=29057110\",\"type\":\"fulltext\",\"text\":\"Full text available via the UNC-Chapel Hill Libraries\"}"],
        "isbn_number_a":["9780817393960",
          "9780817321208",
          "0817321209",
          "081739396X"],
        "isbn_qualifying_info_a":["",
          "",
          "",
          ""],
        "author_suggest":["Geiger, T. J., 1985-"],
        "names_a":["{\"name\":\"Geiger, T. J., 1985-\",\"rel\":\"author\",\"type\":\"creator\"}"],
        "owner_a":["unc"],
        "language_a":["English"],
        "local_id":"b11138369",
        "shelfkey":"lc:BV.4596.A25.G45--2022",
        "available_a":["Available"],
        "publisher_a":["The University of Alabama Press"],
        "rollup_id":"EBC29057110",
        "note_local_a":["Vendor-supplied catalog record.",
          "Provider: ProQuest."],
        "title_suggest":["Faithful deliberation : rhetorical invention, evangelicalism, and #metoo reckonings"],
        "title_main":"Faithful deliberation : rhetorical invention, evangelicalism, and #metoo reckonings",
        "title_sort_ssort_single":"faithful deliberation rhetorical invention evangelicalism and metoo reckonings",
        "access_type_a":["Online"],
        "institution_a":["unc"],
        "creator_main_a":["Geiger, T. J., 1985- author"],
        "imprint_main_a":["{\"type\":\"publication\",\"value\":\"Tuscaloosa : The University of Alabama Press, [2022]\"}"],
        "note_general_a":["Includes bibliographical references and index."],
        "primary_isbn_a":["9780817393960",
          "9780817321208",
          "0817321209",
          "081739396X"],
        "host_item_work_a":["{\"title\":[\"ProQuest Ebook Central\",\"(online collection)\",\".\",\"DDA.\",\"Discovery\"]}"],
        "resource_type_a":["Book"],
        "subject_genre_a":["Nonfiction"],
        "date_cataloged":"2022-05-09T04:00:00Z",
        "physical_media_a":["Online"],
        "vendor_marc_id_a":["EBC29057110"],
        "subject_topical_a":["Sex crimes",
          "Religious aspects",
          "Christianity",
          "Wife abuse",
          "Family violence",
          "Rhetoric"],
        "publication_year_sort":"2028",
        "reverse_shelfkey":"lc:O4}VUQT}PXU}JVU~~XZXX",
        "series_statement_a":["Rhetoric, culture, and social critique"],
        "subject_headings_a":["Sex crimes -- Religious aspects -- Christianity",
          "Wife abuse -- Religious aspects -- Christianity",
          "Family violence -- Religious aspects -- Christianity",
          "Rhetoric -- Religious aspects -- Christianity"],
        "subject_suggest":["Sex crimes -- Religious aspects -- Christianity",
          "Wife abuse -- Religious aspects -- Christianity",
          "Family violence -- Religious aspects -- Christianity",
          "Rhetoric -- Religious aspects -- Christianity"],
        "lc_call_nos_normed_a":["BV.4596.A25.G45--2022"],
        "publisher_location_a":["Tuscaloosa"],
        "record_data_source_a":["ILSMARC"],
        "call_number_schemes_a":["LC"],
        "origin_place_search_a":["Tuscaloosa",
          "Alabama",
          "United States"],
        "physical_description_a":["1 online resource"],
        "note_access_restrictions_a":["Access limited to UNC Chapel Hill-authenticated users. Unlimited simultaneous users"],
        "lcc_callnum_classification_a":["B - Philosophy. Psychology. Religion",
          "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology",
          "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV4485 - BV5099 Practical religion. The Christian life"],
        "statement_of_responsibility_a":["T. J. Geiger, II."],
        "index_date":"2024-01-18T03:21:47Z"},
      {
        "id":"UNCb9753415",
        "url_a":["{\"href\":\"http://cdli.ucla.edu/P109329P109329\",\"type\":\"other\",\"text\":\"Image and transcription in Cuneiform Digital Library Initiative\",\"restricted\":\"false\"}"],
        "items_a":["{\"notes\":[\"Supervised use only. Item 1-2: Fragile. Item 1-20: Fragile; do not handle!\"],\"item_id\":\"i12180140\",\"loc_b\":\"wcda\",\"loc_n\":\"wcda\",\"status\":\"In-Library Use Only\",\"vol\":\"box 1\",\"call_no\":\"Cuneiform superv’d\",\"cn_scheme\":\"ALPHANUM\"}"],
        "owner_a":["unc"],
        "barcodes_a":["00054707058"],
        "language_a":["Sumerian"],
        "local_id":"b9753415",
        "available_a":["Available"],
        "rollup_id":"OCLC1135486966",
        "note_local_a":["Item 1-7; no. in publications: UNC 7"],
        "title_suggest":["Record of food provided to the troops of Ugnim when they set out on their expedition against Mardu"],
        "title_main":"Record of food provided to the troops of Ugnim when they set out on their expedition against Mardu",
        "title_sort_ssort_single":"record of food provided to the troops of ugnim when they set out on their expedition against mardu",
        "access_type_a":["At the Library"],
        "institution_a":["unc"],
        "oclc_number":"1135486966",
        "imprint_main_a":["{\"type\":\"production\",\"value\":\"[Iraq], [circa 2026 BC]\"}"],
        "note_general_a":["Title devised by cataloger",
          "Dated Ibbi-Suen.03.07.00",
          "Translation by Owen: \"The troops of Ugnim received 532 gur, 3 ban of barley [and] 158 gur of emmer, when they set out on an expedition against Mardu. Receipted by Lu-Nanna and Iškun-Ea. Umani received [the grain] from Guzana [in the] month of Akiti, the year Ibbī-Sîn, the king of Ur, raided Simurum\"",
          "Sumerian ; Cuneiform"],
        "primary_oclc_a":["1135486966"],
        "related_work_a":["{\"title\":[\"Collection of cuneiform tablets and cylindrical seals.\"]}"],
        "note_cited_in_a":["Owen, D.I. \"Miscellanea Neo-Sumerica I-III,\" in Occident and Orient, pages 135-137"],
        "resource_type_a":["Archival and manuscript material"],
        "shelf_numbers_a":["Cuneiform superv’d"],
        "subject_genre_a":["Texts",
          "Cuneiform",
          "Nonfiction"],
        "date_cataloged":"2020-01-10T05:00:00Z",
        "genre_headings_a":["Texts",
          "Cuneiform"],
        "subject_suggest":["Texts",
          "Cuneiform",
          "Cuneiform tablets",
          "Sumerian language -- Texts",
          "Sumer -- Civilization"],
        "subject_topical_a":["Cuneiform tablets",
          "Sumerian language",
          "Civilization"],
        "publication_year_sort":"2026",
        "subject_headings_a":["Cuneiform tablets",
          "Sumerian language -- Texts",
          "Sumer -- Civilization"],
        "location_hierarchy_a":["unc",
          "unc:uncrarn",
          "unc:uncwil",
          "unc:uncwil:uncwilrbc"],
        "publisher_location_a":["Iraq"],
        "record_data_source_a":["ILSMARC"],
        "subject_geographic_a":["Sumer"],
        "call_number_schemes_a":["ALPHANUM"],
        "origin_place_search_a":["[Iraq],",
          "Iraq"],
        "physical_description_a":["1 tablet : clay ; 49 x 43 x 10 mm"],
        "index_date":"2024-02-17T22:52:20Z"},
      {
        "id":"UNCb5737093",
        "issn_primary_a":["1021-4054"],
        "items_a":["{\"item_id\":\"i7554229\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"Available\",\"vol\":\"no.1-9\",\"call_no\":\"HQ1735.2 .A48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i7569569\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"Available\",\"vol\":\"no.10-16\",\"call_no\":\"HQ1735.2 .A48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i7592370\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"Available\",\"vol\":\"no.17-27\",\"call_no\":\"HQ1735.2 .A48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i7554238\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"Available\",\"vol\":\"no.28-32\",\"call_no\":\"HQ1735.2 .A48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i7554242\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"Available\",\"vol\":\"no.33-41\",\"call_no\":\"HQ1735.2 .A48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i7569576\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"Available\",\"vol\":\"no.42-51\",\"call_no\":\"HQ1735.2 .A48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i7569577\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"Available\",\"vol\":\"no.52-61\",\"call_no\":\"HQ1735.2 .A48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i7569575\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"Available\",\"vol\":\"no.62-73\",\"call_no\":\"HQ1735.2 .A48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i7554247\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"Available\",\"vol\":\"no.74-85\",\"call_no\":\"HQ1735.2 .A48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i7554250\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"Available\",\"vol\":\"no.86-97\",\"call_no\":\"HQ1735.2 .A48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i7571711\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"Available\",\"vol\":\"no.98-107\",\"call_no\":\"HQ1735.2 .A48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i7571714\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"Available\",\"vol\":\"no.108-118\",\"call_no\":\"HQ1735.2 .A48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i7571712\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"Available\",\"vol\":\"no.119-124\",\"call_no\":\"HQ1735.2 .A48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i7571713\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"Available\",\"vol\":\"no.125-130\",\"call_no\":\"HQ1735.2 .A48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i7569571\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"Available\",\"vol\":\"no.131-136\",\"call_no\":\"HQ1735.2 .A48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i7569573\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"Available\",\"vol\":\"no.137-142\",\"call_no\":\"HQ1735.2 .A48\",\"cn_scheme\":\"LC\"}",
          "{\"item_id\":\"i7569574\",\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"status\":\"Available\",\"vol\":\"no.143-152\",\"call_no\":\"HQ1735.2 .A48\",\"cn_scheme\":\"LC\"}"],
        "owner_a":["unc"],
        "misc_id_a":["LCCN: 92933460",
          "LCCN (canceled or invalid): sn 95017371"],
        "barcodes_a":["00031038074",
          "00031038733",
          "00031046742",
          "00031038109",
          "00031038083",
          "00031038788",
          "00031038797",
          "00031038779",
          "00031038092",
          "00031038118",
          "00031046181",
          "00031046216",
          "00031046190",
          "00031046207",
          "00031038742",
          "00031038751",
          "00031038760"],
        "holdings_a":["{\"loc_b\":\"dhca\",\"loc_n\":\"dhca\",\"call_no\":\"HQ1735.2 .A48\",\"summary\":\"no.1-no.152\"}"],
        "language_a":["Persian"],
        "local_id":"b5737093",
        "shelfkey":"lc:HQ.17352.A48",
        "available_a":["Available"],
        "frequency_current_a":["Monthly"],
        "publisher_a":["s.n."],
        "rollup_id":"OCLC32658826",
        "title_suggest":["Zanān.",
          "."],
        "title_main":". / Zanān.",
        "title_sort_ssort_single":" zanan",
        "access_type_a":["At the Library"],
        "institution_a":["unc"],
        "oclc_number_old_a":["176013857",
          "794714973"],
        "oclc_number":"32658826",
        "imprint_main_a":["{\"type\":\"imprint\",\"value\":\"Tihrān : [s.n.\"}"],
        "note_general_a":["Description based on: Sāl-i 1., shumārah-i 3 (Mah 1371 [Mārs/Āvrīl 1992]; title from cover."],
        "primary_oclc_a":["32658826"],
        "resource_type_a":["Journal, Magazine, or Periodical"],
        "subject_genre_a":["Periodicals"],
        "title_variant_a":["Zanaan"],
        "date_cataloged":"2008-10-14T04:00:00Z",
        "genre_headings_a":["Periodicals"],
        "subject_suggest":["Periodicals",
          "Women -- Iran -- Periodicals",
          "Women -- Periodicals",
          "Women"],
        "physical_media_a":["Print"],
        "subject_topical_a":["Women"],
        "publication_year_sort":"2025",
        "reverse_shelfkey":"lc:I9}YSWUX}PVR",
        "subject_headings_a":["Women -- Iran -- Periodicals",
          "Women -- Periodicals",
          "Women"],
        "lc_call_nos_normed_a":["HQ.17352.A48"],
        "location_hierarchy_a":["unc",
          "unc:uncdavy"],
        "publisher_location_a":["Tihrān"],
        "record_data_source_a":["ILSMARC"],
        "subject_geographic_a":["Iran"],
        "call_number_schemes_a":["LC"],
        "origin_place_search_a":["Tihrān",
          "Iran"],
        "physical_description_a":["volumes : illustrations ; 30 cm"],
        "lcc_callnum_classification_a":["H - Social sciences",
          "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women",
          "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ1101 - HQ2030.7 Women. Feminism",
          "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ1101 - HQ2030.7 Women. Feminism|HQ1451 - HQ1870.7 By region or country"],
        "index_date":"2024-02-06T21:21:50Z"},
      {
        "id":"UNCb7636543",
        "url_a":["{\"href\":\"http://VB3LK7EB4T.search.serialssolutions.com/?V=1.0&L=VB3LK7EB4T&S=JCs&C=TC0001034081&T=marc\",\"type\":\"fulltext\",\"text\":\"Full text available via the UNC-Chapel Hill Libraries\"}"],
        "author_suggest":["Dow Jones Reuters Business Interactive LLC"],
        "names_a":["{\"name\":\"Dow Jones Reuters Business Interactive LLC\",\"type\":\"no_rel\"}"],
        "owner_a":["unc"],
        "misc_id_a":["LCCN: sn 95021992",
          "CODEN designation: REEAE3"],
        "language_a":["French"],
        "local_id":"b7636543",
        "available_a":["Available"],
        "frequency_current_a":["Eight no. a year"],
        "publisher_a":["Groupe Tests"],
        "rollup_id":"OCLC32126299",
        "this_work_a":["{\"title\":[\"01 réseaux (Online)\"]}"],
        "title_suggest":["01 réseaux."],
        "title_main":"01 réseaux.",
        "title_sort_ssort_single":"01 reseaux",
        "access_type_a":["Online"],
        "institution_a":["unc"],
        "oclc_number":"32126299",
        "imprint_main_a":["{\"type\":\"imprint\",\"value\":\"Paris : Groupe Tests, 1994-\"}"],
        "note_general_a":["Title from cover."],
        "primary_oclc_a":["32126299"],
        "related_work_a":["{\"title\":[\"01 informatique.\"]}"],
        "supplement_to_work_a":["{\"title\":[\"01 informatique\"],\"issn\":\"0398-1169\"}"],
        "earlier_work_a":["{\"label\":\"Continues\",\"title\":[\"Télécoms magazine\"]}"],
        "resource_type_a":["Journal, Magazine, or Periodical"],
        "subject_genre_a":["Periodicals"],
        "date_cataloged":"2023-02-08T05:00:00Z",
        "genre_headings_a":["Periodicals"],
        "subject_suggest":["Periodicals",
          "Computer networks -- Periodicals",
          "Telecommunication -- Periodicals",
          "Computer networks",
          "Telecommunication"],
        "physical_media_a":["Online"],
        "vendor_marc_id_a":["SSJ0001034081"],
        "subject_topical_a":["Computer networks",
          "Telecommunication"],
        "publication_year_sort":"2025",
        "subject_headings_a":["Computer networks -- Periodicals",
          "Telecommunication -- Periodicals",
          "Computer networks",
          "Telecommunication"],
        "note_serial_dates_a":["No 1 (mars 1994)-"],
        "publisher_location_a":["Paris"],
        "record_data_source_a":["ILSMARC"],
        "origin_place_search_a":["Paris",
          "France"],
        "index_date":"2024-02-12T01:51:39Z"},
      {
        "id":"UNCb7911442",
        "url_a":["{\"href\":\"http://VB3LK7EB4T.search.serialssolutions.com/?V=1.0&L=VB3LK7EB4T&S=JCs&C=TC0001325210&T=marc\",\"type\":\"fulltext\",\"text\":\"Full text available via the UNC-Chapel Hill Libraries\"}"],
        "issn_linking_a":["2296-0597"],
        "issn_primary_a":["2296-0597"],
        "author_suggest":["Universitätsbibliothek Basel"],
        "names_a":["{\"name\":\"Universitätsbibliothek Basel\",\"type\":\"no_rel\"}"],
        "owner_a":["unc"],
        "misc_id_a":["LCCN: 2014256005"],
        "language_a":["German"],
        "local_id":"b7911442",
        "shelfkey":"lc:Z..0671",
        "available_a":["Available"],
        "frequency_current_a":["Semiannual"],
        "publisher_a":["Universitätsbibliothek Basel"],
        "rollup_id":"OCLC891466631",
        "this_work_a":["{\"title\":[\"027.7 (Online)\"]}"],
        "title_suggest":["027.7 : Zeitschrift für Bibliothekskultur."],
        "title_main":"027.7 : Zeitschrift für Bibliothekskultur.",
        "title_sort_ssort_single":"0277 zeitschrift fur bibliothekskultur",
        "access_type_a":["Online"],
        "institution_a":["unc"],
        "oclc_number":"891466631",
        "imprint_main_a":["{\"type\":\"imprint\",\"value\":\"Basel, Switzerland : Universitätsbibliothek Basel\"}"],
        "primary_oclc_a":["891466631"],
        "resource_type_a":["Journal, Magazine, or Periodical"],
        "subject_genre_a":["Periodicals"],
        "title_variant_a":["Zeitschrift für Bibliothekskultur"],
        "date_cataloged":"2023-08-15T04:00:00Z",
        "genre_headings_a":["Periodicals"],
        "subject_suggest":["Periodicals",
          "Library science -- Periodicals",
          "Libraries -- History -- Periodicals",
          "Libraries",
          "Library science"],
        "physical_media_a":["Online"],
        "vendor_marc_id_a":["SSJ0001325210"],
        "subject_topical_a":["Library science",
          "Libraries",
          "History"],
        "publication_year_sort":"2025",
        "reverse_shelfkey":"lc:0}}ZTSY",
        "subject_headings_a":["Library science -- Periodicals",
          "Libraries -- History -- Periodicals",
          "Libraries",
          "Library science"],
        "note_serial_dates_a":["Began with Bd. 2, Nr. 1 (2013)."],
        "lc_call_nos_normed_a":["Z..0671"],
        "publisher_location_a":["Basel, Switzerland"],
        "record_data_source_a":["ILSMARC"],
        "call_number_schemes_a":["LC"],
        "origin_place_search_a":["Basel, Switzerland",
          "Switzerland"],
        "lcc_callnum_classification_a":["Z - Bibliography. Library Science. Information resources (general)",
          "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries",
          "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science"],
        "index_date":"2024-02-12T23:06:39Z"},
      {
        "id":"UNCb8542341",
        "isbn_number_a":["9789869154529"],
        "isbn_qualifying_info_a":[""],
        "items_a":["{\"status\":\"On Order\",\"loc_b\":\"dd\",\"loc_n\":\"dd\"}"],
        "author_suggest":["John Sisyphus"],
        "names_a":["{\"name\":\"John Sisyphus\",\"type\":\"creator\"}"],
        "owner_a":["unc"],
        "language_a":["Chinese"],
        "local_id":"b8542341",
        "publisher_a":["Xi Xi Fu Si Wen Hua"],
        "publisher_vern":["西西弗斯文化"],
        "title_suggest":["Mao Ze Dong De Qi Shou Jiang Qing Yu Wen Ge (Xia).",
          "03 毛澤東的旗手 江青與文革(下)."],
        "title_main_vern":["03 毛澤東的旗手 江青與文革(下)."],
        "title_main":"03 毛澤東的旗手 江青與文革(下). / Mao Ze Dong De Qi Shou Jiang Qing Yu Wen Ge (Xia).",
        "title_sort_ssort_single":"03 毛澤東的旗手 江青與文革下 mao ze dong de qi shou jiang qing yu wen ge xia",
        "institution_a":["unc"],
        "creator_main_a":["John Sisyphus"],
        "imprint_main_a":["{\"type\":\"production\",\"value\":\"Xi Xi Fu Si Wen Hua.\"}",
          "{\"type\":\"production\",\"value\":\"西西弗斯文化.\"}"],
        "primary_isbn_a":["9789869154529"],
        "resource_type_a":["Book"],
        "subject_genre_a":["Nonfiction"],
        "publication_year_sort":"2025",
        "location_hierarchy_a":["unc",
          "unc:uncdavy"],
        "record_data_source_a":["ILSMARC"],
        "index_date":"2024-02-14T18:21:44Z"},
      {
        "id":"UNCb8542343",
        "isbn_number_a":["9789869154536"],
        "isbn_qualifying_info_a":[""],
        "items_a":["{\"status\":\"On Order\",\"loc_b\":\"dd\",\"loc_n\":\"dd\"}"],
        "author_suggest":["John Sisyphus"],
        "names_a":["{\"name\":\"John Sisyphus\",\"type\":\"creator\"}"],
        "owner_a":["unc"],
        "language_a":["Chinese"],
        "local_id":"b8542343",
        "publisher_a":["Xi Xi Fu Si Wen Hua"],
        "publisher_vern":["西西弗斯文化"],
        "title_suggest":["Mao Ze Dong De Li Lun Jia Zhang Chun Qiao Yu Wen Ge (Shang).",
          "05 毛澤東的理論家 張春橋與文革(上)."],
        "title_main_vern":["05 毛澤東的理論家 張春橋與文革(上)."],
        "title_main":"05 毛澤東的理論家 張春橋與文革(上). / Mao Ze Dong De Li Lun Jia Zhang Chun Qiao Yu Wen Ge (Shang).",
        "title_sort_ssort_single":"05 毛澤東的理論家 張春橋與文革上 mao ze dong de li lun jia zhang chun qiao yu wen ge shang",
        "institution_a":["unc"],
        "creator_main_a":["John Sisyphus"],
        "imprint_main_a":["{\"type\":\"production\",\"value\":\"Xi Xi Fu Si Wen Hua.\"}",
          "{\"type\":\"production\",\"value\":\"西西弗斯文化.\"}"],
        "primary_isbn_a":["9789869154536"],
        "resource_type_a":["Book"],
        "subject_genre_a":["Nonfiction"],
        "publication_year_sort":"2025",
        "location_hierarchy_a":["unc",
          "unc:uncdavy"],
        "record_data_source_a":["ILSMARC"],
        "index_date":"2024-02-14T18:21:44Z"},
      {
        "id":"UNCb8724941",
        "url_a":["{\"href\":\"https://login.libproxy.lib.unc.edu/login?url=http://dx.doi.org/10.1093/OBO/9780195393361-0041\",\"type\":\"fulltext\",\"text\":\"Available via the UNC-Chapel Hill Libraries\"}"],
        "author_suggest":["Henten, Jan Willem van, 1955-"],
        "names_a":["{\"name\":\"Henten, Jan Willem van, 1955-\",\"type\":\"creator\",\"id\":\"https://id.loc.gov/authorities/names/n86047811\"}"],
        "owner_a":["unc"],
        "language_a":["English"],
        "local_id":"b8724941",
        "shelfkey":"lc:BS.182552",
        "available_a":["Available"],
        "frequency_current_a":["Updated quarterly"],
        "publisher_a":["Oxford University Press"],
        "rollup_id":"OBOEDZ0000050457",
        "note_local_a":["Vendor-supplied catalog record."],
        "title_suggest":["1-4 Maccabees"],
        "title_main":"1-4 Maccabees",
        "title_sort_ssort_single":"1 4 maccabees",
        "access_type_a":["Online"],
        "institution_a":["unc"],
        "creator_main_a":["Henten, Jan Willem van, 1955-"],
        "imprint_main_a":["{\"type\":\"imprint\",\"value\":\"[New York] : Oxford University Press, 2011-\"}"],
        "host_item_work_a":["{\"title\":[\"Oxford bibliographies online\",\"(online collection)\",\".\",\"Biblical studies\"]}"],
        "resource_type_a":["Web page or site"],
        "subject_genre_a":["Bibliography",
          "Reference"],
        "date_cataloged":"2017-01-30T05:00:00Z",
        "genre_headings_a":["Bibliography"],
        "subject_suggest":["Bibliography",
          "Bible. Maccabees -- Criticism, interpretation, etc -- Bibliography"],
        "physical_media_a":["Online"],
        "vendor_marc_id_a":["OBOEDZ0000050457"],
        "subject_topical_a":["Bible. Maccabees",
          "Criticism, interpretation, etc"],
        "publication_year_sort":"2025",
        "reverse_shelfkey":"lc:O7}YRXUUX",
        "subject_headings_a":["Bible. Maccabees -- Criticism, interpretation, etc -- Bibliography"],
        "lc_call_nos_normed_a":["BS.182552"],
        "publisher_location_a":["New York"],
        "record_data_source_a":["ILSMARC"],
        "call_number_schemes_a":["LC"],
        "origin_place_search_a":["[New York]",
          "New York (State)",
          "United States"],
        "physical_description_a":["1 online resource"],
        "note_access_restrictions_a":["Access limited to UNC Chapel Hill-authenticated users. Unlimited simultaneous users"],
        "lcc_callnum_classification_a":["B - Philosophy. Psychology. Religion",
          "B - Philosophy. Psychology. Religion|BS1 - BS2970 The Bible",
          "B - Philosophy. Psychology. Religion|BS1 - BS2970 The Bible|BS701 - BS1830 Old Testament"],
        "statement_of_responsibility_a":["by Jan W. van Henten."],
        "index_date":"2024-02-15T04:06:39Z"},
      {
        "id":"UNCb11533066",
        "url_a":["{\"href\":\"http://VB3LK7EB4T.search.serialssolutions.com/?V=1.0&L=VB3LK7EB4T&S=JCs&C=TC0001071868&T=marc\",\"type\":\"fulltext\",\"text\":\"Full text available via the UNC-Chapel Hill Libraries\"}"],
        "owner_a":["unc"],
        "misc_id_a":["LCCN: 2011265653"],
        "language_a":["English"],
        "local_id":"b11533066",
        "available_a":["Available"],
        "frequency_current_a":["Annual"],
        "publisher_a":["Datamonitor"],
        "rollup_id":"OCLC779993597",
        "this_work_a":["{\"title\":[\"1-800 FLOWERS.COM, Inc (Online)\"]}"],
        "title_suggest":["1-800 FLOWERS.COM, Inc.",
          "Company profile (Datamonitor (Firm))"],
        "title_main":"1-800 FLOWERS.COM, Inc.",
        "title_sort_ssort_single":"1 800 flowerscom inc",
        "access_type_a":["Online"],
        "institution_a":["unc"],
        "oclc_number":"779993597",
        "series_work_a":["{\"title\":[\"Company profile (Datamonitor (Firm))\"]}"],
        "imprint_main_a":["{\"type\":\"imprint\",\"value\":\"New York, NY : Datamonitor\"}"],
        "primary_oclc_a":["779993597"],
        "resource_type_a":["Journal, Magazine, or Periodical"],
        "subject_genre_a":["Periodicals"],
        "title_variant_a":["Title in Business Source Premier: 1-800 FLOWERS.COM, Inc SWOT analysis"],
        "date_cataloged":"2023-06-14T04:00:00Z",
        "genre_headings_a":["Periodicals"],
        "subject_suggest":["Periodicals",
          "1-800-FLOWERS (Firm) -- Periodicals",
          "1-800-FLOWERS (Firm)",
          "Giftware industry -- Periodicals",
          "Gift basket industry -- Periodicals",
          "Flowers -- Periodicals",
          "Flowers",
          "Gift basket industry",
          "Giftware industry",
          "Company profile"],
        "physical_media_a":["Online"],
        "vendor_marc_id_a":["SSJ0001071868"],
        "subject_topical_a":["1-800-FLOWERS (Firm)",
          "Giftware industry",
          "Gift basket industry",
          "Flowers"],
        "publication_year_sort":"2025",
        "subject_headings_a":["1-800-FLOWERS (Firm) -- Periodicals",
          "1-800-FLOWERS (Firm)",
          "Giftware industry -- Periodicals",
          "Gift basket industry -- Periodicals",
          "Flowers -- Periodicals",
          "Flowers",
          "Gift basket industry",
          "Giftware industry",
          "Company profile"],
        "publisher_location_a":["New York, NY"],
        "record_data_source_a":["ILSMARC"],
        "origin_place_search_a":["New York, NY",
          "New York (State)",
          "United States"],
        "index_date":"2024-01-19T09:06:20Z"},
      {
        "id":"UNCb8723980",
        "url_a":["{\"href\":\"https://login.libproxy.lib.unc.edu/login?url=http://dx.doi.org/10.1093/OBO/9780195393361-0021\",\"type\":\"fulltext\",\"text\":\"Available via the UNC-Chapel Hill Libraries\"}"],
        "author_suggest":["Tuell, Steven Shawn"],
        "names_a":["{\"name\":\"Tuell, Steven Shawn\",\"type\":\"creator\",\"id\":\"https://id.loc.gov/authorities/names/n92031103\"}"],
        "owner_a":["unc"],
        "language_a":["English"],
        "local_id":"b8723980",
        "shelfkey":"lc:BS.134552",
        "available_a":["Available"],
        "frequency_current_a":["Frequency of update unknown"],
        "publisher_a":["Oxford University Press"],
        "rollup_id":"OBOEDZ0000021379",
        "note_local_a":["Vendor-supplied catalog record."],
        "title_suggest":["1 and 2 Chronicles"],
        "title_main":"1 and 2 Chronicles",
        "title_sort_ssort_single":"1 and 2 chronicles",
        "access_type_a":["Online"],
        "institution_a":["unc"],
        "creator_main_a":["Tuell, Steven Shawn"],
        "imprint_main_a":["{\"type\":\"imprint\",\"value\":\"[New York] : Oxford University Press, 2010-\"}"],
        "host_item_work_a":["{\"title\":[\"Oxford bibliographies online\",\"(online collection)\",\".\",\"Biblical studies\"]}"],
        "resource_type_a":["Web page or site"],
        "subject_genre_a":["Bibliography",
          "Reference"],
        "date_cataloged":"2017-01-30T05:00:00Z",
        "genre_headings_a":["Bibliography"],
        "subject_suggest":["Bibliography",
          "Bible. Chronicles -- Criticism, interpretation, etc -- Bibliography"],
        "physical_media_a":["Online"],
        "vendor_marc_id_a":["OBOEDZ0000021379"],
        "subject_topical_a":["Bible. Chronicles",
          "Criticism, interpretation, etc"],
        "publication_year_sort":"2025",
        "reverse_shelfkey":"lc:O7}YWVUUX",
        "subject_headings_a":["Bible. Chronicles -- Criticism, interpretation, etc -- Bibliography"],
        "lc_call_nos_normed_a":["BS.134552"],
        "publisher_location_a":["New York"],
        "record_data_source_a":["ILSMARC"],
        "call_number_schemes_a":["LC"],
        "origin_place_search_a":["[New York]",
          "New York (State)",
          "United States"],
        "physical_description_a":["1 online resource"],
        "note_access_restrictions_a":["Access limited to UNC Chapel Hill-authenticated users. Unlimited simultaneous users"],
        "lcc_callnum_classification_a":["B - Philosophy. Psychology. Religion",
          "B - Philosophy. Psychology. Religion|BS1 - BS2970 The Bible",
          "B - Philosophy. Psychology. Religion|BS1 - BS2970 The Bible|BS701 - BS1830 Old Testament"],
        "statement_of_responsibility_a":["by Steven Shawn Tuell."],
        "index_date":"2024-02-15T04:06:39Z"},
      {
        "id":"UNCb8723999",
        "url_a":["{\"href\":\"https://login.libproxy.lib.unc.edu/login?url=http://dx.doi.org/10.1093/OBO/9780195393361-0071\",\"type\":\"fulltext\",\"text\":\"Available via the UNC-Chapel Hill Libraries\"}"],
        "author_suggest":["Knoppers, Gary N., 1956-2018",
          "Greer, Jonathan S."],
        "names_a":["{\"name\":\"Knoppers, Gary N., 1956-2018\",\"type\":\"creator\",\"id\":\"https://id.loc.gov/authorities/names/n93093891\"}",
          "{\"name\":\"Greer, Jonathan S.\",\"type\":\"no_rel\",\"id\":\"https://id.loc.gov/authorities/names/n2013063438\"}"],
        "owner_a":["unc"],
        "language_a":["English"],
        "local_id":"b8723999",
        "shelfkey":"lc:BS.133552",
        "available_a":["Available"],
        "frequency_current_a":["Frequency of update unknown"],
        "publisher_a":["Oxford University Press"],
        "rollup_id":"OBOEDZ0000021397",
        "note_local_a":["Vendor-supplied catalog record."],
        "title_suggest":["1 and 2 Kings"],
        "title_main":"1 and 2 Kings",
        "title_sort_ssort_single":"1 and 2 kings",
        "access_type_a":["Online"],
        "institution_a":["unc"],
        "creator_main_a":["Knoppers, Gary N., 1956-2018"],
        "imprint_main_a":["{\"type\":\"imprint\",\"value\":\"[New York] : Oxford University Press, 2010-\"}"],
        "host_item_work_a":["{\"title\":[\"Oxford bibliographies online\",\"(online collection)\",\".\",\"Biblical studies\"]}"],
        "resource_type_a":["Web page or site"],
        "subject_genre_a":["Bibliography",
          "Reference"],
        "date_cataloged":"2017-01-30T05:00:00Z",
        "genre_headings_a":["Bibliography"],
        "subject_suggest":["Bibliography",
          "Bible. Kings -- Criticism, interpretation, etc -- Bibliography"],
        "physical_media_a":["Online"],
        "vendor_marc_id_a":["OBOEDZ0000021397"],
        "subject_topical_a":["Bible. Kings",
          "Criticism, interpretation, etc"],
        "publication_year_sort":"2025",
        "reverse_shelfkey":"lc:O7}YWWUUX",
        "subject_headings_a":["Bible. Kings -- Criticism, interpretation, etc -- Bibliography"],
        "lc_call_nos_normed_a":["BS.133552"],
        "publisher_location_a":["New York"],
        "record_data_source_a":["ILSMARC"],
        "call_number_schemes_a":["LC"],
        "origin_place_search_a":["[New York]",
          "New York (State)",
          "United States"],
        "physical_description_a":["1 online resource"],
        "note_access_restrictions_a":["Access limited to UNC Chapel Hill-authenticated users. Unlimited simultaneous users"],
        "lcc_callnum_classification_a":["B - Philosophy. Psychology. Religion",
          "B - Philosophy. Psychology. Religion|BS1 - BS2970 The Bible",
          "B - Philosophy. Psychology. Religion|BS1 - BS2970 The Bible|BS701 - BS1830 Old Testament"],
        "statement_of_responsibility_a":["by Gary N. Knoppers, Jonathan S. Greer."],
        "index_date":"2024-02-15T04:06:39Z"},
      {
        "id":"UNCb8724944",
        "url_a":["{\"href\":\"https://login.libproxy.lib.unc.edu/login?url=http://dx.doi.org/10.1093/OBO/9780195393361-0086\",\"type\":\"fulltext\",\"text\":\"Available via the UNC-Chapel Hill Libraries\"}"],
        "author_suggest":["Auld, A. Graeme"],
        "names_a":["{\"name\":\"Auld, A. Graeme\",\"type\":\"creator\",\"id\":\"https://id.loc.gov/authorities/names/n84217319\"}"],
        "owner_a":["unc"],
        "language_a":["English"],
        "local_id":"b8724944",
        "shelfkey":"lc:BS.132552",
        "available_a":["Available"],
        "frequency_current_a":["Updated quarterly"],
        "publisher_a":["Oxford University Press"],
        "rollup_id":"OBOEDZ0000050460",
        "note_local_a":["Vendor-supplied catalog record."],
        "title_suggest":["1 and 2 Samuel"],
        "title_main":"1 and 2 Samuel",
        "title_sort_ssort_single":"1 and 2 samuel",
        "access_type_a":["Online"],
        "institution_a":["unc"],
        "creator_main_a":["Auld, A. Graeme"],
        "imprint_main_a":["{\"type\":\"imprint\",\"value\":\"[New York] : Oxford University Press, 2011-\"}"],
        "host_item_work_a":["{\"title\":[\"Oxford bibliographies online\",\"(online collection)\",\".\",\"Biblical studies\"]}"],
        "resource_type_a":["Web page or site"],
        "subject_genre_a":["Bibliography",
          "Reference"],
        "date_cataloged":"2017-01-30T05:00:00Z",
        "genre_headings_a":["Bibliography"],
        "subject_suggest":["Bibliography",
          "Bible. Samuel -- Criticism, interpretation, etc -- Bibliography"],
        "physical_media_a":["Online"],
        "vendor_marc_id_a":["OBOEDZ0000050460"],
        "subject_topical_a":["Bible. Samuel",
          "Criticism, interpretation, etc"],
        "publication_year_sort":"2025",
        "reverse_shelfkey":"lc:O7}YWXUUX",
        "subject_headings_a":["Bible. Samuel -- Criticism, interpretation, etc -- Bibliography"],
        "lc_call_nos_normed_a":["BS.132552"],
        "publisher_location_a":["New York"],
        "record_data_source_a":["ILSMARC"],
        "call_number_schemes_a":["LC"],
        "origin_place_search_a":["[New York]",
          "New York (State)",
          "United States"],
        "physical_description_a":["1 online resource"],
        "note_access_restrictions_a":["Access limited to UNC Chapel Hill-authenticated users. Unlimited simultaneous users"],
        "lcc_callnum_classification_a":["B - Philosophy. Psychology. Religion",
          "B - Philosophy. Psychology. Religion|BS1 - BS2970 The Bible",
          "B - Philosophy. Psychology. Religion|BS1 - BS2970 The Bible|BS701 - BS1830 Old Testament"],
        "statement_of_responsibility_a":["by Graeme Auld."],
        "index_date":"2024-02-15T04:06:39Z"},
      {
        "id":"UNCb9520781",
        "url_a":["{\"href\":\"https://purl.fdlp.gov/GPO/gpo117142\",\"type\":\"fulltext\",\"restricted\":\"false\"}"],
        "author_suggest":["Dalaker, Joseph",
          "Library of Congress. Congressional Research Service"],
        "names_a":["{\"name\":\"Dalaker, Joseph\",\"rel\":\"author\",\"type\":\"creator\",\"id\":\"https://id.loc.gov/authorities/names/n2005087341\"}",
          "{\"name\":\"Library of Congress. Congressional Research Service\",\"rel\":\"issuing body\",\"type\":\"publisher\"}"],
        "owner_a":["unc"],
        "edition_a":["[Library of Congress public edition]."],
        "misc_id_a":["LCCN: 2019230804",
          "GPO Item Number: 0807-A-07 (online)"],
        "language_a":["English"],
        "local_id":"b9520781",
        "shelfkey":"sudoc:LC 14.23:R 45100/",
        "available_a":["Available"],
        "frequency_current_a":["Updated irregularly"],
        "publisher_a":["Congressional Research Service"],
        "rollup_id":"OCLC1089448247",
        "title_suggest":["The 10-20-30 provision : defining persistent poverty counties",
          "CRS report"],
        "title_main":"The 10-20-30 provision : defining persistent poverty counties",
        "title_sort_ssort_single":"10 20 30 provision defining persistent poverty counties",
        "access_type_a":["Online"],
        "institution_a":["unc",
          "duke",
          "nccu",
          "ncsu"],
        "oclc_number":"1089448247",
        "series_work_a":["{\"title\":[\"CRS report\"],\"details\":\"R45100.\"}"],
        "creator_main_a":["Dalaker, Joseph, author"],
        "imprint_main_a":["{\"type\":\"publication\",\"value\":\"[Washington, D.C.] : Congressional Research Service, 2018-\"}"],
        "note_general_a":["The CRS report home page provides access to all versions published since 2018 in accordance with P.L. 115-141.",
          "Report includes bibliographical references."],
        "primary_oclc_a":["1089448247"],
        "host_item_work_a":["{\"label\":\"In\",\"title\":[\"CRS reports\",\"(Library of Congress. Congressional Research Service)\"]}"],
        "resource_type_a":["Government publication",
          "Web page or site"],
        "subject_genre_a":["Statistics"],
        "title_former_a":["<March 8, 2019>: 10-20-30 plan and persistent poverty counties"],
        "date_cataloged":"2019-09-09T04:00:00Z",
        "genre_headings_a":["Statistics"],
        "subject_suggest":["Statistics",
          "American Community Survey (U.S.)",
          "Small Area Income and Poverty Estimates (Program : U.S.)",
          "Poverty -- United States -- Statistics",
          "Small area statistics -- United States",
          "United States -- Economic conditions -- Regional disparities -- Statistics"],
        "physical_media_a":["Online"],
        "subject_topical_a":["American Community Survey (U.S.)",
          "Small Area Income and Poverty Estimates (Program : U.S.)",
          "Poverty",
          "Small area statistics",
          "Economic conditions",
          "Regional disparities"],
        "publication_year_sort":"2025",
        "reverse_shelfkey":"sudoc:EN~YV}XW~8~VUYZZ~",
        "series_statement_a":["Report / Congressional Research Service ; R45100"],
        "subject_headings_a":["American Community Survey (U.S.)",
          "Small Area Income and Poverty Estimates (Program : U.S.)",
          "Poverty -- United States -- Statistics",
          "Small area statistics -- United States",
          "United States -- Economic conditions -- Regional disparities -- Statistics"],
        "publisher_location_a":["Washington, D.C."],
        "record_data_source_a":["ILSMARC",
          "Shared Records",
          "DWS"],
        "subject_geographic_a":["United States"],
        "virtual_collection_a":["TRLN Shared Records. Documents without shelves."],
        "call_number_schemes_a":["SUDOC"],
        "origin_place_search_a":["[Washington, D.C.]",
          "District of Columbia",
          "United States"],
        "physical_description_a":["1 online resource."],
        "statement_of_responsibility_a":["Joseph Dalaker."],
        "index_date":"2024-02-17T07:51:53Z"},
      {
        "id":"UNCb9708687",
        "url_a":["{\"href\":\"https://purl.fdlp.gov/GPO/gpo125236\",\"type\":\"fulltext\",\"restricted\":\"false\"}"],
        "author_suggest":["Dalaker, Joseph",
          "Library of Congress. Congressional Research Service"],
        "names_a":["{\"name\":\"Dalaker, Joseph\",\"rel\":\"author\",\"type\":\"creator\",\"id\":\"https://id.loc.gov/authorities/names/n2005087341\"}",
          "{\"name\":\"Library of Congress. Congressional Research Service\",\"rel\":\"issuing body\",\"type\":\"publisher\"}"],
        "owner_a":["unc"],
        "edition_a":["[Library of Congress public edition]."],
        "misc_id_a":["LCCN: 2019256302",
          "GPO Item Number: 0807-A-07 (online)"],
        "language_a":["English"],
        "local_id":"b9708687",
        "shelfkey":"sudoc:LC 14.23:R 44748/",
        "available_a":["Available"],
        "frequency_current_a":["Updated irregularly"],
        "publisher_a":["Congressional Research Service"],
        "rollup_id":"OCLC1117495328",
        "title_suggest":["The 10-20-30 rule and persistent poverty counties",
          "CRS report"],
        "title_main":"The 10-20-30 rule and persistent poverty counties",
        "title_sort_ssort_single":"10 20 30 rule and persistent poverty counties",
        "access_type_a":["Online"],
        "institution_a":["unc",
          "duke",
          "nccu",
          "ncsu"],
        "oclc_number":"1117495328",
        "series_work_a":["{\"title\":[\"CRS report\"],\"details\":\"R44748.\"}"],
        "creator_main_a":["Dalaker, Joseph, author"],
        "imprint_main_a":["{\"type\":\"publication\",\"value\":\"[Washington, D.C.] : Congressional Research Service, 2019-\"}"],
        "note_general_a":["The CRS report home page provides access to all versions published since 2018 in accordance with P.L. 115-141; earliest version dated 2017.",
          "\"January 27, 2017.\"",
          "Report includes color map.",
          "Report includes bibliographical references."],
        "primary_oclc_a":["1117495328"],
        "host_item_work_a":["{\"label\":\"In\",\"title\":[\"CRS reports\",\"(Library of Congress. Congressional Research Service)\"]}"],
        "resource_type_a":["Government publication",
          "Web page or site"],
        "date_cataloged":"2019-10-10T04:00:00Z",
        "physical_media_a":["Online"],
        "subject_topical_a":["United States. American Recovery and Reinvestment Act of 2009",
          "Poverty",
          "Rural development",
          "Economic conditions"],
        "publication_year_sort":"2025",
        "reverse_shelfkey":"sudoc:EN~YV}XW~8~VVSVR~",
        "series_statement_a":["Report / Congressional Research Service ; R44748"],
        "subject_headings_a":["United States. American Recovery and Reinvestment Act of 2009",
          "Poverty -- United States",
          "Rural development -- United States",
          "United States -- Economic conditions"],
        "subject_suggest":["United States. American Recovery and Reinvestment Act of 2009",
          "Poverty -- United States",
          "Rural development -- United States",
          "United States -- Economic conditions"],
        "publisher_location_a":["Washington, D.C."],
        "record_data_source_a":["ILSMARC",
          "Shared Records",
          "DWS"],
        "subject_geographic_a":["United States"],
        "virtual_collection_a":["TRLN Shared Records. Documents without shelves."],
        "call_number_schemes_a":["SUDOC"],
        "origin_place_search_a":["[Washington, D.C.]",
          "District of Columbia",
          "United States"],
        "physical_description_a":["1 online resource"],
        "statement_of_responsibility_a":["Joseph Dalaker."],
        "index_date":"2024-02-17T19:21:38Z"},
      {
        "id":"UNCb9476282",
        "url_a":["{\"href\":\"https://www.westlaw.com/Browse/Home/BusinessLawCenter/10KSectionSearch?rs=tran3.0&vr=3.0&originationContext=vendcc\",\"type\":\"fulltext\",\"text\":\"Full text available to UNC-Chapel Hill Law School with password\",\"note\":\"Coverage: 1996 - present\"}"],
        "owner_a":["unc"],
        "language_a":["English"],
        "local_id":"b9476282",
        "shelfkey":"lc:KF.1444.A65.A12",
        "available_a":["Available"],
        "frequency_current_a":["Updated periodically"],
        "publisher_a":["publisher not identified",
          "Thomson Reuters"],
        "rollup_id":"WLN00870102",
        "title_suggest":["10-K Section search."],
        "title_main":"10-K Section search.",
        "title_sort_ssort_single":"10 k section search",
        "access_type_a":["Online"],
        "institution_a":["unc"],
        "imprint_main_a":["{\"type\":\"publication\",\"value\":\"[Place of publication not identified] : [publisher not identified]\"}"],
        "note_summary_a":["10-K Section search offers users the ability to focus searches on particular sections of Form 10-K. By simply checking a box, users can limit their search to the area(s) of the 10-K most likely to contain what they need. For more targeted results, users can use additional search fields to specify key words or phrases, filing date, period date, company name, ticker symbol, CIK and more."],
        "related_work_a":["{\"title\":[\"WESTLAW (Information retrieval system)\"]}"],
        "resource_type_a":["Web page or site"],
        "subject_genre_a":["Rules and practice",
          "Forms",
          "Blank forms"],
        "date_cataloged":"2022-03-21T04:00:00Z",
        "genre_headings_a":["Rules and practice",
          "Forms",
          "Blank forms"],
        "subject_suggest":["Rules and practice",
          "Forms",
          "Blank forms",
          "United States. Securities and Exchange Commission -- Rules and practice",
          "EDGAR (Information retrieval system)",
          "Corporation reports -- United States",
          "Corporation reports -- United States -- Forms",
          "Disclosure of information -- United States",
          "Disclosure of information -- United States -- Forms",
          "Financial statements -- United States",
          "Financial statements -- United States -- Forms",
          "Securities -- United States",
          "Securities -- United States -- Forms"],
        "physical_media_a":["Online"],
        "vendor_marc_id_a":["WLN00870102"],
        "subject_topical_a":["United States. Securities and Exchange Commission",
          "EDGAR (Information retrieval system)",
          "Corporation reports",
          "Disclosure of information",
          "Financial statements",
          "Securities"],
        "imprint_multiple_a":["{\"type\":\"publication\",\"value\":\"[Place of publication not identified] : [publisher not identified]\"}",
          "{\"type\":\"distribution\",\"value\":\"[St. Paul, Minnesota] : Thomson Reuters, [2016]-\"}"],
        "publication_year_sort":"2025",
        "reverse_shelfkey":"lc:FK}YVVV}PTU}PYX",
        "subject_headings_a":["United States. Securities and Exchange Commission -- Rules and practice",
          "EDGAR (Information retrieval system)",
          "Corporation reports -- United States",
          "Corporation reports -- United States -- Forms",
          "Disclosure of information -- United States",
          "Disclosure of information -- United States -- Forms",
          "Financial statements -- United States",
          "Financial statements -- United States -- Forms",
          "Securities -- United States",
          "Securities -- United States -- Forms"],
        "lc_call_nos_normed_a":["KF.1444.A65.A12"],
        "publisher_location_a":["Place of publication not identified"],
        "record_data_source_a":["ILSMARC"],
        "subject_geographic_a":["United States"],
        "call_number_schemes_a":["LC"],
        "origin_place_search_a":["[Place of publication not identified]",
          "[St. Paul, Minnesota]"],
        "physical_description_a":["1 online resource"],
        "lcc_callnum_classification_a":["K - Law in general. Comparative and uniform law. Jurisprudence",
          "K - Law in general. Comparative and uniform law. Jurisprudence|KF - Law of the United States",
          "K - Law in general. Comparative and uniform law. Jurisprudence|KF - Law of the United States|KF1000 - KF1999"],
        "index_date":"2024-02-17T04:21:51Z"},
      {
        "id":"UNCb7976745",
        "url_a":["{\"href\":\"http://digital.ncdcr.gov/cdm/search/searchterm/890136221/field/identi\",\"type\":\"fulltext\",\"text\":\"Available via the UNC-Chapel Hill Libraries\",\"restricted\":\"false\"}"],
        "author_suggest":["North Carolina. Division of Public Health",
          "North Carolina. Injury Epidemiology and Surveillance Unit"],
        "names_a":["{\"name\":\"North Carolina. Division of Public Health\",\"type\":\"no_rel\"}",
          "{\"name\":\"North Carolina. Injury Epidemiology and Surveillance Unit\",\"rel\":\"issuing body\",\"type\":\"publisher\"}"],
        "owner_a":["unc"],
        "language_a":["English"],
        "local_id":"b7976745",
        "shelfkey":"sudoc:J12 409/2:I56",
        "available_a":["Available"],
        "frequency_current_a":["Annual"],
        "publisher_a":["Division of Public Health, Injury Epidemiology and Surveillance Unit"],
        "rollup_id":"OCLC890136221",
        "title_suggest":["10 leading causes of injury death (all races, both sexes) by age groups, North Carolina"],
        "title_main":"10 leading causes of injury death (all races, both sexes) by age groups, North Carolina",
        "title_sort_ssort_single":"10 leading causes of injury death all races both sexes by age groups north carolina",
        "access_type_a":["Online"],
        "institution_a":["unc"],
        "oclc_number":"890136221",
        "imprint_main_a":["{\"type\":\"publication\",\"value\":\"[Raleigh, North Carolina] : Division of Public Health, Injury Epidemiology and Surveillance Unit\"}"],
        "primary_oclc_a":["890136221"],
        "resource_type_a":["Government publication",
          "Journal, Magazine, or Periodical"],
        "subject_genre_a":["Statistics",
          "Periodicals"],
        "date_cataloged":"2014-11-25T05:00:00Z",
        "genre_headings_a":["Statistics",
          "Periodicals"],
        "subject_suggest":["Statistics",
          "Periodicals",
          "Death -- North Carolina -- Causes -- Statistics -- Periodicals",
          "Mortality -- North Carolina -- Statistics -- Periodicals",
          "Accidents -- North Carolina -- Statistics -- Periodicals"],
        "physical_media_a":["Online"],
        "subject_topical_a":["Death",
          "Causes",
          "Mortality",
          "Accidents"],
        "publication_year_sort":"2025",
        "reverse_shelfkey":"sudoc:GYX~VZQ~X~HUT",
        "subject_headings_a":["Death -- North Carolina -- Causes -- Statistics -- Periodicals",
          "Mortality -- North Carolina -- Statistics -- Periodicals",
          "Accidents -- North Carolina -- Statistics -- Periodicals"],
        "publisher_location_a":["Raleigh, North Carolina"],
        "record_data_source_a":["ILSMARC"],
        "subject_geographic_a":["North Carolina"],
        "call_number_schemes_a":["SUDOC"],
        "note_system_details_a":["System requirements: Adobe Acrobat Reader ; current access available via PURL."],
        "origin_place_search_a":["[Raleigh, North Carolina]",
          "North Carolina",
          "United States"],
        "physical_description_a":["1 online resource (volumes)"],
        "statement_of_responsibility_a":["N.C. Division of Public Health, Injury Epidemiology and Surveillance Unit."],
        "physical_description_details_a":["File type: text file",
          "File format: PDF"],
        "index_date":"2024-02-13T02:51:40Z"},
      {
        "id":"UNCb7976746",
        "url_a":["{\"href\":\"http://digital.ncdcr.gov/cdm/search/searchterm/890373357/field/identi\",\"type\":\"fulltext\",\"text\":\"Available via the UNC-Chapel Hill Libraries\",\"restricted\":\"false\"}"],
        "author_suggest":["North Carolina. Injury and Violence Prevention Branch",
          "North Carolina. Division of Public Health"],
        "names_a":["{\"name\":\"North Carolina. Injury and Violence Prevention Branch\",\"rel\":\"issuing body\",\"type\":\"publisher\"}",
          "{\"name\":\"North Carolina. Division of Public Health\",\"type\":\"no_rel\"}"],
        "owner_a":["unc"],
        "language_a":["English"],
        "local_id":"b7976746",
        "shelfkey":"sudoc:J12 409/2:E532",
        "available_a":["Available"],
        "frequency_current_a":["Annual"],
        "publisher_a":["N.C. Division of Public Health, Injury and Violence Prevention Branch"],
        "rollup_id":"OCLC890373357",
        "title_suggest":["10 leading causes of injury ED visits (all races, both sexes) by age groups, North Carolina"],
        "title_main":"10 leading causes of injury ED visits (all races, both sexes) by age groups, North Carolina",
        "title_sort_ssort_single":"10 leading causes of injury ed visits all races both sexes by age groups north carolina",
        "access_type_a":["Online"],
        "institution_a":["unc"],
        "oclc_number":"890373357",
        "imprint_main_a":["{\"type\":\"publication\",\"value\":\"[Raleigh, North Carolina] : N.C. Division of Public Health, Injury and Violence Prevention Branch\"}"],
        "primary_oclc_a":["890373357"],
        "resource_type_a":["Government publication",
          "Journal, Magazine, or Periodical"],
        "subject_genre_a":["Statistics",
          "Periodicals"],
        "date_cataloged":"2014-11-25T05:00:00Z",
        "genre_headings_a":["Statistics",
          "Periodicals"],
        "subject_suggest":["Statistics",
          "Periodicals",
          "Wounds and injuries -- North Carolina -- Statistics -- Periodicals",
          "Accidents -- North Carolina -- Statistics -- Periodicals",
          "Accidental poisoning -- North Carolina -- Statistics -- Periodicals",
          "Falls (Accidents) -- North Carolina -- Statistics -- Periodicals",
          "Hospitals -- Emergency services -- North Carolina -- Statistics -- Periodicals"],
        "physical_media_a":["Online"],
        "subject_topical_a":["Wounds and injuries",
          "Accidents",
          "Accidental poisoning",
          "Falls (Accidents)",
          "Hospitals",
          "Emergency services"],
        "publication_year_sort":"2025",
        "reverse_shelfkey":"sudoc:GYX~VZQ~X~LUWX",
        "subject_headings_a":["Wounds and injuries -- North Carolina -- Statistics -- Periodicals",
          "Accidents -- North Carolina -- Statistics -- Periodicals",
          "Accidental poisoning -- North Carolina -- Statistics -- Periodicals",
          "Falls (Accidents) -- North Carolina -- Statistics -- Periodicals",
          "Hospitals -- Emergency services -- North Carolina -- Statistics -- Periodicals"],
        "publisher_location_a":["Raleigh, North Carolina"],
        "record_data_source_a":["ILSMARC"],
        "subject_geographic_a":["North Carolina"],
        "call_number_schemes_a":["SUDOC"],
        "note_system_details_a":["System requirements: Adobe Acrobat Reader ; current access available via PURL."],
        "origin_place_search_a":["[Raleigh, North Carolina]",
          "North Carolina",
          "United States"],
        "physical_description_a":["1 online resource (volumes)"],
        "statement_of_responsibility_a":["N.C. Division of Public Health, Injury and Violence Prevention Branch."],
        "physical_description_details_a":["File type: text file",
          "File format: PDF"],
        "index_date":"2024-02-13T02:51:40Z"},
      {
        "id":"UNCb7976748",
        "url_a":["{\"href\":\"http://digital.ncdcr.gov/cdm/search/searchterm/890374110/field/identi\",\"type\":\"fulltext\",\"text\":\"Available via the UNC-Chapel Hill Libraries\",\"restricted\":\"false\"}"],
        "author_suggest":["North Carolina. Injury and Violence Prevention Branch",
          "North Carolina. Division of Public Health"],
        "names_a":["{\"name\":\"North Carolina. Injury and Violence Prevention Branch\",\"rel\":\"issuing body\",\"type\":\"publisher\"}",
          "{\"name\":\"North Carolina. Division of Public Health\",\"type\":\"no_rel\"}"],
        "owner_a":["unc"],
        "language_a":["English"],
        "local_id":"b7976748",
        "shelfkey":"sudoc:J12 409/2:H828",
        "available_a":["Available"],
        "frequency_current_a":["Biennial"],
        "publisher_a":["N.C. Division of Public Health, Injury and Violence Prevention Branch"],
        "rollup_id":"OCLC890374110",
        "title_suggest":["10 leading causes of injury hospitalizations (all races, both sexes) by age groups, North Carolina"],
        "title_main":"10 leading causes of injury hospitalizations (all races, both sexes) by age groups, North Carolina",
        "title_sort_ssort_single":"10 leading causes of injury hospitalizations all races both sexes by age groups north carolina",
        "access_type_a":["Online"],
        "institution_a":["unc"],
        "oclc_number":"890374110",
        "imprint_main_a":["{\"type\":\"publication\",\"value\":\"[Raleigh, North Carolina] : N.C. Division of Public Health, Injury and Violence Prevention Branch\"}"],
        "primary_oclc_a":["890374110"],
        "resource_type_a":["Government publication",
          "Journal, Magazine, or Periodical"],
        "subject_genre_a":["Statistics",
          "Periodicals"],
        "date_cataloged":"2014-11-25T05:00:00Z",
        "genre_headings_a":["Statistics",
          "Periodicals"],
        "subject_suggest":["Statistics",
          "Periodicals",
          "Wounds and injuries -- North Carolina -- Statistics -- Periodicals",
          "Accidents -- North Carolina -- Statistics -- Periodicals",
          "Hospital utilization -- North Carolina -- Statistics -- Periodicals"],
        "physical_media_a":["Online"],
        "subject_topical_a":["Wounds and injuries",
          "Accidents",
          "Hospital utilization"],
        "publication_year_sort":"2025",
        "reverse_shelfkey":"sudoc:GYX~VZQ~X~IRXR",
        "subject_headings_a":["Wounds and injuries -- North Carolina -- Statistics -- Periodicals",
          "Accidents -- North Carolina -- Statistics -- Periodicals",
          "Hospital utilization -- North Carolina -- Statistics -- Periodicals"],
        "publisher_location_a":["Raleigh, North Carolina"],
        "record_data_source_a":["ILSMARC"],
        "subject_geographic_a":["North Carolina"],
        "call_number_schemes_a":["SUDOC"],
        "note_system_details_a":["System requirements: Adobe Acrobat Reader ; current access available via PURL."],
        "origin_place_search_a":["[Raleigh, North Carolina]",
          "North Carolina",
          "United States"],
        "physical_description_a":["1 online resource (volumes)"],
        "statement_of_responsibility_a":["N.C. Division of Public Health, Injury and Violence Prevention Branch."],
        "physical_description_details_a":["File type: text file",
          "File format: PDF"],
        "index_date":"2024-02-13T02:51:40Z"},
      {
        "id":"UNCb10671226",
        "items_a":["{\"notes\":[\"For holdings, ask at Davis Service Desk.\"],\"item_id\":\"i12980373\",\"loc_b\":\"dcpf\",\"loc_n\":\"dcpf\",\"status\":\"Available\",\"call_no\":\"L 40.2:R 31/3/SPAN./\",\"cn_scheme\":\"SUDOC\"}"],
        "author_suggest":["United States. Department of Labor. Employee Benefits Security Administration"],
        "names_a":["{\"name\":\"United States. Department of Labor. Employee Benefits Security Administration\",\"rel\":\"issuing body\",\"type\":\"publisher\"}"],
        "owner_a":["unc"],
        "misc_id_a":["LCCN: 2021235397",
          "GPO Item Number: 0773-C"],
        "language_a":["English"],
        "local_id":"b10671226",
        "shelfkey":"sudoc:L 40.2:R 31/3/SPAN./",
        "available_a":["Available"],
        "frequency_current_a":["Irregular"],
        "publisher_a":["Departamento de Trabajo de los Estados Unidos, Administración de Seguridad para los Beneficios de Empleados"],
        "rollup_id":"OCLC1244811319",
        "this_work_a":["{\"title\":[\"Top 10 ways to prepare for retirement.\",\"Spanish.\"]}"],
        "title_suggest":["Las 10 mejores maneras de prepararse para la jubilación."],
        "title_main":"Las 10 mejores maneras de prepararse para la jubilación.",
        "title_sort_ssort_single":"10 mejores maneras de prepararse para la jubilacion",
        "access_type_a":["At the Library"],
        "institution_a":["unc"],
        "oclc_number":"1244811319",
        "imprint_main_a":["{\"type\":\"publication\",\"value\":\"[Washington, D.C.] : Departamento de Trabajo de los Estados Unidos, Administración de Seguridad para los Beneficios de Empleados\"}"],
        "note_general_a":["Print format no longer distributed to depository libraries.",
          "In Spanish."],
        "primary_oclc_a":["1244811319"],
        "alt_edition_work_a":["{\"label\":\"English version\",\"title\":[\"Top 10 ways to prepare for retirement\"]}"],
        "resource_type_a":["Government publication",
          "Journal, Magazine, or Periodical"],
        "title_variant_a":["Las diez mejores maneras de prepararse para la jubilación"],
        "date_cataloged":"2021-05-07T04:00:00Z",
        "physical_media_a":["Print"],
        "subject_topical_a":["Retirement income",
          "Retirement",
          "Planning",
          "Postemployment benefits"],
        "publication_year_sort":"2025",
        "reverse_shelfkey":"sudoc:E~VZ}X~8~WY~W~7APC}~",
        "subject_headings_a":["Retirement income -- United States",
          "Retirement -- United States -- Planning",
          "Postemployment benefits -- United States"],
        "subject_suggest":["Retirement income -- United States",
          "Retirement -- United States -- Planning",
          "Postemployment benefits -- United States"],
        "location_hierarchy_a":["unc",
          "unc:uncdavy",
          "unc:uncdavy:uncdavdoc"],
        "publisher_location_a":["Washington, D.C."],
        "record_data_source_a":["ILSMARC"],
        "subject_geographic_a":["United States"],
        "call_number_schemes_a":["SUDOC"],
        "origin_place_search_a":["[Washington, D.C.]",
          "District of Columbia",
          "United States"],
        "physical_description_a":["folded sheets : color illustrations ; 23 cm"],
        "index_date":"2024-02-19T23:51:31Z"},
      {
        "id":"UNCb10673193",
        "url_a":["{\"href\":\"https://purl.fdlp.gov/GPO/gpo153832\",\"type\":\"fulltext\",\"note\":\"Current issue\",\"restricted\":\"false\"}",
          "{\"href\":\"https://purl.fdlp.gov/GPO/gpo137094\",\"type\":\"fulltext\",\"note\":\"Archived issues\",\"restricted\":\"false\"}"],
        "author_suggest":["United States. Department of Labor. Employee Benefits Security Administration"],
        "names_a":["{\"name\":\"United States. Department of Labor. Employee Benefits Security Administration\",\"rel\":\"issuing body\",\"type\":\"publisher\"}"],
        "owner_a":["unc"],
        "misc_id_a":["LCCN: 2021235396",
          "GPO Item Number: 0773-C (online)"],
        "language_a":["English"],
        "local_id":"b10673193",
        "shelfkey":"sudoc:L 40.2:R 31/3/SPAN./",
        "available_a":["Available"],
        "frequency_current_a":["Irregular"],
        "publisher_a":["Departamento de Trabajo de los Estados Unidos, Administración de Seguridad para los Beneficios de Empleados"],
        "rollup_id":"OCLC1244810767",
        "this_work_a":["{\"title\":[\"Top 10 ways to prepare for retirement.\",\"Spanish.\"]}"],
        "title_suggest":["Las 10 mejores maneras de prepararse para la jubilación."],
        "title_main":"Las 10 mejores maneras de prepararse para la jubilación.",
        "title_sort_ssort_single":"10 mejores maneras de prepararse para la jubilacion",
        "access_type_a":["Online"],
        "institution_a":["unc",
          "duke",
          "nccu",
          "ncsu"],
        "oclc_number_old_a":["1251964366",
          "1251974260",
          "1251980312",
          "1251983067",
          "1251994387",
          "1251997790",
          "1251999352",
          "1252000555",
          "1252000668",
          "1252008581",
          "1252015832",
          "1252020495",
          "1252028748",
          "1252035238",
          "1252035922",
          "1252039222"],
        "oclc_number":"1244810767",
        "imprint_main_a":["{\"type\":\"publication\",\"value\":\"[Washington, D.C.] : Departamento de Trabajo de los Estados Unidos, Administración de Seguridad para los Beneficios de Empleados\"}"],
        "note_general_a":["In Spanish."],
        "primary_oclc_a":["1244810767"],
        "alt_edition_work_a":["{\"label\":\"English version\",\"title\":[\"Top 10 ways to prepare for retirement\"]}"],
        "resource_type_a":["Government publication",
          "Journal, Magazine, or Periodical"],
        "title_variant_a":["Las diez mejores maneras de prepararse para la jubilación"],
        "date_cataloged":"2021-05-10T04:00:00Z",
        "physical_media_a":["Online"],
        "subject_topical_a":["Retirement income",
          "Retirement",
          "Planning",
          "Postemployment benefits"],
        "publication_year_sort":"2025",
        "reverse_shelfkey":"sudoc:E~VZ}X~8~WY~W~7APC}~",
        "subject_headings_a":["Retirement income -- United States",
          "Retirement -- United States -- Planning",
          "Postemployment benefits -- United States"],
        "subject_suggest":["Retirement income -- United States",
          "Retirement -- United States -- Planning",
          "Postemployment benefits -- United States"],
        "publisher_location_a":["Washington, D.C."],
        "record_data_source_a":["ILSMARC",
          "Shared Records",
          "DWS"],
        "subject_geographic_a":["United States"],
        "virtual_collection_a":["TRLN Shared Records. Documents without shelves."],
        "call_number_schemes_a":["SUDOC"],
        "origin_place_search_a":["[Washington, D.C.]",
          "District of Columbia",
          "United States"],
        "physical_description_a":["1 online resource (volumes) : color illustrations"],
        "index_date":"2024-02-19T23:51:31Z"}]
  },
  "facet_counts":{
    "facet_queries":{
      "date_cataloged_dt:[NOW-7DAY/DAY TO NOW]":42976,
      "date_cataloged_dt:[NOW-1MONTH/DAY TO NOW]":63814,
      "date_cataloged_dt:[NOW-3MONTH/DAY TO NOW]":110333},
    "facet_fields":{
      "access_type_f":[
        "At the Library",5056389,
        "Online",3066312],
      "available_f":[
        "Available",7966100],
      "location_hierarchy_f":[
        "unc",5042201,
        "unc:uncdavy",2317112,
        "unc:unclibr",1558167,
        "unc:uncdavy:uncdavdoc",749184,
        "unc:uncwil",467601,
        "law",217064,
        "law:lawuncw",217064,
        "unc:unclawy",217064,
        "unc:uncmusy",203195,
        "unc:uncrarn",197578,
        "unc:uncwil:uncwilrbc",197578,
        "unc:uncnorn",195392,
        "unc:uncwil:uncwilncc",195392,
        "hsl",135177,
        "hsl:hsluncy",135177,
        "unc:unchsl",135177,
        "unc:uncscix",126911,
        "unc:uncarty",99340,
        "unc:uncinfy",83024,
        "unc:uncsouz",71548,
        "unc:uncwil:uncwilsfc",71548,
        "unc:uncul",57215,
        "unc:uncdavy:uncdavmap",42316,
        "unc:uncmedr",28408,
        "unc:uncschy",12299,
        "unc:uncdavy:uncdavref",11379,
        "unc:uncpark",10670,
        "unc:uncstoy",10327,
        "unc:uncdavy:uncstor",9451,
        "unc:unccarr",7321,
        "unc:uncnory",6466,
        "unc:uncmusy:uncmusymult",6150,
        "unc:uncsoun",5075,
        "unc:uncwil:uncwilshc",5075,
        "unc:uncmary",2979,
        "unc:uncul:unculpop",2293,
        "unc:unclgby",1161,
        "unc:uncmedr:uncmedrmeks",1030,
        "unc:unclaty",676,
        "unc:uncherb",584,
        "unc:unchigy",578,
        "unc:uncarchives",473,
        "unc:uncwil:uncwilar",473,
        "unc:unccarn",424,
        "unc:uncdavy:uncdavglo",216,
        "unc:uncmedr:uncmedrmets",173,
        "unc:unckeny",112,
        "unc:uncgloy",98,
        "unc:uncofft",17],
      "resource_type_f":[
        "Book",6824027,
        "Government publication",1425270,
        "Journal, Magazine, or Periodical",432503,
        "Video",176613,
        "Music recording",168986,
        "Music score",144789,
        "Thesis/Dissertation",126291,
        "Map",64229,
        "Web page or site",38891,
        "Archival and manuscript material",18688,
        "Newspaper",18161],
      "lcc_callnum_classification_f":[
        "A - General Works",43440,
        "A - General Works|AC1 - AC999 Collections. Series. Collected works",6662,
        "A - General Works|AC1 - AC999 Collections. Series. Collected works|AC1 - AC195 Collections of monographs, essays, etc.",6039,
        "A - General Works|AC1 - AC999 Collections. Series. Collected works|AC1 - AC195 Collections of monographs, essays, etc.|AC1 - AC8 American and English",807,
        "A - General Works|AC1 - AC999 Collections. Series. Collected works|AC1 - AC195 Collections of monographs, essays, etc.|AC9 - AC195 Other languages",4675,
        "A - General Works|AC1 - AC999 Collections. Series. Collected works|AC801 - AC895 Inaugural and program dissertations",21,
        "A - General Works|AC1 - AC999 Collections. Series. Collected works|AC901 - AC995 Pamphlet collections",601,
        "A - General Works|AE1 - AE88 Encyclopedias",647,
        "A - General Works|AE1 - AE88 Encyclopedias|AE5 - AE88 By language",446,
        "A - General Works|AG2 - AG600 Dictionaries and other general reference works",557,
        "A - General Works|AI1 - AI21 Indexes",222,
        "A - General Works|AM1 - AM401 Museums. Collectors and collecting",1602,
        "A - General Works|AM1 - AM401 Museums. Collectors and collecting|AM10 - AM100 By country",460,
        "A - General Works|AM1 - AM401 Museums. Collectors and collecting|AM111 - AM160 Museology. Museum methods, technique, etc.",331,
        "A - General Works|AM1 - AM401 Museums. Collectors and collecting|AM200 - AM401 Collectors and collecting",127,
        "A - General Works|AN - Newspapers",628,
        "A - General Works|AP1 - AP230 Periodicals",6161,
        "A - General Works|AP1 - AP230 Periodicals|AP101 - AP115 Humorous periodicals",47,
        "A - General Works|AP1 - AP230 Periodicals|AP200 - AP230 Juvenile periodicals",108,
        "A - General Works|AS1 - AS945 Academies and learned societies",23512,
        "A - General Works|AS1 - AS945 Academies and learned societies|AS11 - AS785 By region or country",22871,
        "A - General Works|AS1 - AS945 Academies and learned societies|AS2.5 - AS4 International associations, congresses, conferences, etc.",25,
        "A - General Works|AY10 - AY2001 Yearbooks. Almanacs. Directories",696,
        "A - General Works|AY10 - AY2001 Yearbooks. Almanacs. Directories|AY10 - AY29 Annuals",217,
        "A - General Works|AY10 - AY2001 Yearbooks. Almanacs. Directories|AY30 - AY1730 Almanacs",479,
        "A - General Works|AZ101 - AZ999 History of scholarship and learning. The humanities",1223,
        "A - General Works|AZ101 - AZ999 History of scholarship and learning. The humanities|AZ101 - AZ111 Philosophy. Theory",321,
        "A - General Works|AZ101 - AZ999 History of scholarship and learning. The humanities|AZ191 - AZ193 Evaluation",57,
        "A - General Works|AZ101 - AZ999 History of scholarship and learning. The humanities|AZ200 - AZ361 History",159,
        "A - General Works|AZ101 - AZ999 History of scholarship and learning. The humanities|AZ501 - AZ908 By region or country",368,
        "B - Philosophy. Psychology. Religion",321144,
        "B - Philosophy. Psychology. Religion|B1 - B5802 Philosophy (General)",57866,
        "B - Philosophy. Psychology. Religion|B1 - B5802 Philosophy (General)|B108 - B5802 By period",50888,
        "B - Philosophy. Psychology. Religion|B1 - B5802 Philosophy (General)|B108 - B5802 By period|B108 - B708 Ancient",9659,
        "B - Philosophy. Psychology. Religion|B1 - B5802 Philosophy (General)|B108 - B5802 By period|B720 - B765 Medieval",1798,
        "B - Philosophy. Psychology. Religion|B1 - B5802 Philosophy (General)|B108 - B5802 By period|B770 - B785 Renaissance",483,
        "B - Philosophy. Psychology. Religion|B1 - B5802 Philosophy (General)|B108 - B5802 By period|B790 - B5802 Modern",36877,
        "B - Philosophy. Psychology. Religion|B1 - B5802 Philosophy (General)|B108 - B5802 By period|B790 - B5802 Modern|B5800 - B5802 By religion",73,
        "B - Philosophy. Psychology. Religion|B1 - B5802 Philosophy (General)|B108 - B5802 By period|B790 - B5802 Modern|B808 - B849 Special topics and schools of philosophy",5715,
        "B - Philosophy. Psychology. Religion|B1 - B5802 Philosophy (General)|B108 - B5802 By period|B790 - B5802 Modern|B850 - B5739 By region or country",29725,
        "B - Philosophy. Psychology. Religion|B1 - B5802 Philosophy (General)|B69 - B99 General works",729,
        "B - Philosophy. Psychology. Religion|BC1 - BC199 Logic",2310,
        "B - Philosophy. Psychology. Religion|BC1 - BC199 Logic|BC11 - BC39 History",217,
        "B - Philosophy. Psychology. Religion|BC1 - BC199 Logic|BC11 - BC39 History|BC25 - BC39 By period",158,
        "B - Philosophy. Psychology. Religion|BC1 - BC199 Logic|BC171 - BC199 Special topics",664,
        "B - Philosophy. Psychology. Religion|BC1 - BC199 Logic|BC60 - BC99 General works",474,
        "B - Philosophy. Psychology. Religion|BD10 - BD701 Speculative philosophy",11230,
        "B - Philosophy. Psychology. Religion|BD10 - BD701 Speculative philosophy|BD10 - BD41 General philosophical works",397,
        "B - Philosophy. Psychology. Religion|BD10 - BD701 Speculative philosophy|BD143 - BD237 Epistomology. Theory of knowledge",3399,
        "B - Philosophy. Psychology. Religion|BD10 - BD701 Speculative philosophy|BD240 - BD260 Methodology",519,
        "B - Philosophy. Psychology. Religion|BD10 - BD701 Speculative philosophy|BD300 - BD450 Ontology",3339,
        "B - Philosophy. Psychology. Religion|BD10 - BD701 Speculative philosophy|BD493 - BD701 Cosmology",1446,
        "B - Philosophy. Psychology. Religion|BD10 - BD701 Speculative philosophy|BD95 - BD131 Metaphysics",623,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology",39500,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF173 - BF175.5 Psychoanalysis",2832,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF176 - BF176.5 Psychological tests and testing",211,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF180 - BF198.7 Experimental psychology",241,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF207 - BF209 Psychotropic drugs and other substances",35,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF231 - BF299 Sensation. Aesthesiology",777,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF309 - BF499 Consciousness. Cognition",8537,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF38 - BF64 Philosophy. Relation to other topics",1372,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF501 - BF505 Motivation",224,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF511 - BF593 Affection. Feeling. Emotion",4077,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF608 - BF635 Will. Volition. Choice. Control",371,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF636 - BF637 Applied psychology",616,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF638 - BF648 New Thought. Menticulture, etc.",61,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF660 - BF685 Comparative psychology. Animal and human psychology",231,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF692 - BF692.5 Psychology of sex. Sexual behavior",388,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF697 - BF697.5 Differential psychology. Individuality. Self",591,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF698 - BF698.9 Personality",1449,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF699 - BF711 Genetic psychology",212,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF712 - BF724.85 Developmental psychology",4857,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF725 - BF727 Class psychology",1,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF795 - BF839 Temperament. Character",164,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF839.8 - BF885 Physiognomy. Phrenology",139,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF889 - BF905 Graphology. Study of handwriting",60,
        "B - Philosophy. Psychology. Religion|BF1 - BF990 Psychology|BF908 - BF940 The hand. Palmistry",32,
        "B - Philosophy. Psychology. Religion|BF1001 - BF1389 Parapsychology",1922,
        "B - Philosophy. Psychology. Religion|BF1001 - BF1389 Parapsychology|BF1001 - BF1045 Psychic research. Psychology of the conscious",611,
        "B - Philosophy. Psychology. Religion|BF1001 - BF1389 Parapsychology|BF1048 - BF1108 Hallucinations. Sleep. Dreaming. Visions",571,
        "B - Philosophy. Psychology. Religion|BF1001 - BF1389 Parapsychology|BF1111 - BF1156 Hypnotism. Suggestion. Mesmerism. Subliminal projection",124,
        "B - Philosophy. Psychology. Religion|BF1001 - BF1389 Parapsychology|BF1161 - BF1171 Telepathy. Mind reading. Though transference",3,
        "B - Philosophy. Psychology. Religion|BF1001 - BF1389 Parapsychology|BF1228 - BF1389 Spiritualism",459,
        "B - Philosophy. Psychology. Religion|BF1404 - BF2055 Occult sciences",3928,
        "B - Philosophy. Psychology. Religion|BF1404 - BF2055 Occult sciences|BF1444 - BF1486 Ghosts. Apparitions. Hauntings",471,
        "B - Philosophy. Psychology. Religion|BF1404 - BF2055 Occult sciences|BF1501 - BF1562 Demonology. Satanism. Possession",279,
        "B - Philosophy. Psychology. Religion|BF1404 - BF2055 Occult sciences|BF1562.5 - BF1584 Witchcraft",601,
        "B - Philosophy. Psychology. Religion|BF1404 - BF2055 Occult sciences|BF1585 - BF1623 Magic. Hermetics. Necromancy",605,
        "B - Philosophy. Psychology. Religion|BF1404 - BF2055 Occult sciences|BF1651 - BF1729 Astrology",346,
        "B - Philosophy. Psychology. Religion|BF1404 - BF2055 Occult sciences|BF1745 - BF1779 Oracles. Sibyls. Divinations",265,
        "B - Philosophy. Psychology. Religion|BF1404 - BF2055 Occult sciences|BF1783 - BF1815 Seers. Prophets. Prophecies",45,
        "B - Philosophy. Psychology. Religion|BF1404 - BF2055 Occult sciences|BF1845 - BF1891 Fortune-telling",73,
        "B - Philosophy. Psychology. Religion|BF1404 - BF2055 Occult sciences|BF2050 - BF2055 Human-alien encounters. Contact between humans and extraterrestrials",45,
        "B - Philosophy. Psychology. Religion|BH1 - BH301 Aesthetics",2407,
        "B - Philosophy. Psychology. Religion|BH1 - BH301 Aesthetics|BH81 - BH208 History",640,
        "B - Philosophy. Psychology. Religion|BJ1 - BJ1725 Ethics",10389,
        "B - Philosophy. Psychology. Religion|BJ1 - BJ1725 Ethics|BJ1188 - BJ1295 Religious ethics",1487,
        "B - Philosophy. Psychology. Religion|BJ1 - BJ1725 Ethics|BJ1298 - BJ1335 Evolutionary and genetic ethics",111,
        "B - Philosophy. Psychology. Religion|BJ1 - BJ1725 Ethics|BJ1365 - BJ1385 Positivist ethics",3,
        "B - Philosophy. Psychology. Religion|BJ1 - BJ1725 Ethics|BJ1390 - BJ1390.5 Communist ethics",113,
        "B - Philosophy. Psychology. Religion|BJ1 - BJ1725 Ethics|BJ1518 - BJ1697 Individual ethics. Character. Virtue",2390,
        "B - Philosophy. Psychology. Religion|BJ1 - BJ1725 Ethics|BJ71 - BJ1185 History and general works",2794,
        "B - Philosophy. Psychology. Religion|BJ1801 - BJ2195 Social usages. Etiquette",434,
        "B - Philosophy. Psychology. Religion|BJ1801 - BJ2195 Social usages. Etiquette|BJ2021 - BJ2078 Etiquette of entertaining",57,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism",29470,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL1 - BL50 Religion (General)",1438,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL175 - BL265 Natural theology",1790,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL175 - BL265 Natural theology|BL175 - BL190 General",144,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL175 - BL265 Natural theology|BL205 - BL216 Nature and attributes of Deity",79,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL175 - BL265 Natural theology|BL224 - BL227 Creation. Theory of the Earth",53,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL175 - BL265 Natural theology|BL239 - BL265 Religion and science",1225,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL2700 - BL2790 Rationalism",1185,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL300 - BL325 The myth. Comparative mythology",626,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL350 - BL385 Classification of religions",25,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL425 - BL490 Religious doctrines (General)",956,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL425 - BL490 Religious doctrines (General)|BL435 - BL457 Nature worship",133,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL425 - BL490 Religious doctrines (General)|BL465 - BL470 Worship of human beings",32,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL425 - BL490 Religious doctrines (General)|BL473 - BL490 Other",437,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL500 - BL547 Eschatology",402,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL51 - BL65 Philosophy of religion. Psychology of religion. Religion in relation to other subjects",2399,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL550 - BL619 Worship. Cultus",593,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL624 - BL629.5 Religious life",1012,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL630 - BL632 Religious organization",15,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions",14687,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental",8526,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1050 - BL1060 By region",96,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1100 - BL1295 Hinduism",3529,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1100 - BL1295 Hinduism|BL1100 - BL1107.5 General",45,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1100 - BL1295 Hinduism|BL1108.19 - BL1108.7 Religious education",3,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1100 - BL1295 Hinduism|BL1109.19 - BL1109.7 Antiquities. Archaeology. Inscriptions",1,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1100 - BL1295 Hinduism|BL1111 - BL1143.2 Sacred books. Sources",975,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1100 - BL1295 Hinduism|BL1145 - BL1146 Hindu literature",1,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1100 - BL1295 Hinduism|BL1153.69 - BL1168 By region or country",49,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1100 - BL1295 Hinduism|BL1212.32 - BL1215 Doctrines. Theology",98,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1100 - BL1295 Hinduism|BL1216 - BL1225 Hindu pantheon. Deities",216,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1100 - BL1295 Hinduism|BL1225.2 - BL1243.58 Religious life",410,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1100 - BL1295 Hinduism|BL1243.72 - BL1243.78 Monasteries. Temples, etc.",103,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1100 - BL1295 Hinduism|BL1271.2 - BL1295 Modifications. Sects",478,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1100 - BL1295 Hinduism|BL1271.2 - BL1295 Modifications. Sects|BL1284.5 - BL1289.59 Vaishnavism",162,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1300 - BL1380 Jainism",208,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1300 - BL1380 Jainism|BL1310 - BL1314.2 Sacred books. Sources",13,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1300 - BL1380 Jainism|BL1315 - BL1317 Jain literature",3,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1300 - BL1380 Jainism|BL1375.3 - BL1375.7 Jaina pantheon. Deities",1,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1300 - BL1380 Jainism|BL1376 - BL1378.85 Forms of worship",27,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1500 - BL1590 Zoroastrianism (Mazdeism). Parseeism",232,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1600 - BL1695 Semitic religions",245,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1600 - BL1695 Semitic religions|BL1600 - BL1605 General",26,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1600 - BL1695 Semitic religions|BL1615 - BL1616 Sumerian",23,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1600 - BL1695 Semitic religions|BL1620 - BL1625 Assyro-Babylonian",34,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1600 - BL1695 Semitic religions|BL1640 - BL1645 Syrian. Palestinian. Samaritan",33,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1600 - BL1695 Semitic religions|BL1660 - BL1665 Phoenician. Carthaginian, etc.",12,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1600 - BL1695 Semitic religions|BL1670 - BL1672 Canaanite",19,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1600 - BL1695 Semitic religions|BL1680 - BL1685 Arabian (except Islam)",1,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1750 - BL2350 By region or country",3336,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1750 - BL2350 By region or country|BL1790 - BL1975 China",1791,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1750 - BL2350 By region or country|BL1790 - BL1975 China|BL1830 - BL1883 Confucianism",197,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1750 - BL2350 By region or country|BL1790 - BL1975 China|BL1899 - BL1942.85 Taoism",1014,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1750 - BL2350 By region or country|BL2000 - BL2032 India",731,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1750 - BL2350 By region or country|BL2000 - BL2032 India|BL2017 - BL2018.7 Sikhism",247,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1750 - BL2350 By region or country|BL2195 - BL2228 Japan",310,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1750 - BL2350 By region or country|BL2195 - BL2228 Japan|BL2216 - BL2227.8 Shinto",142,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL1000 - BL2370 Asian. Oriental|BL1750 - BL2350 By region or country|BL2230 - BL2240 Korea",57,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL2390 - BL2490 African",949,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL2390 - BL2490 African|BL2420 - BL2460 Egyptian",367,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL2500 - BL2592 American",1398,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL2600 - BL2630 Pacific Ocean Islands. Oceania",117,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL689 - BL980 European. Occidental",2752,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL689 - BL980 European. Occidental|BL700 - BL820 Classical (Etruscan, Greek, Roman)",1537,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL689 - BL980 European. Occidental|BL830 - BL875 Germanic and Norse",180,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL660 - BL2680 History and principles of religions|BL689 - BL980 European. Occidental|BL900 - BL980 Other European",348,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL70 - BL71 Sacred books (General)",26,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL71.5 - BL73 Biography",58,
        "B - Philosophy. Psychology. Religion|BL1 - BL2790 Religions. Mythology. Rationalism|BL74 - BL99 Religions of the world",909,
        "B - Philosophy. Psychology. Religion|BM1 - BM990 Judaism",8296,
        "B - Philosophy. Psychology. Religion|BM1 - BM990 Judaism|BM1 - BM449 General",1955,
        "B - Philosophy. Psychology. Religion|BM1 - BM990 Judaism|BM1 - BM449 General|BM150 - BM449 History",1419,
        "B - Philosophy. Psychology. Religion|BM1 - BM990 Judaism|BM1 - BM449 General|BM150 - BM449 History|BM201 - BM449 By region or country",407,
        "B - Philosophy. Psychology. Religion|BM1 - BM990 Judaism|BM1 - BM449 General|BM70 - BM135 Study and teaching",119,
        "B - Philosophy. Psychology. Religion|BM1 - BM990 Judaism|BM480 - BM488.8 Pre-Talmudic Jewish literature (non-Biblical)",456,
        "B - Philosophy. Psychology. Religion|BM1 - BM990 Judaism|BM495 - BM532 Sources of Jewish religion. Rabbinical literature",1787,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.",16103,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam",14673,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP1 - BP68 General",2655,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP1 - BP68 General|BP42 - BP48 Study and teaching",179,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP1 - BP68 General|BP50 - BP68 History",2050,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP100 - BP137 Sacred books",1985,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP100 - BP137 Sacred books|BP100 - BP134 Koran",1163,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP160 - BP165 General works on Islam",949,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP166 - BP166.94 Theology (Kalam)",850,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP170.3 - BP170.5 Missionary work of Islam",11,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP171 - BP173 Relation of Islam to other religions",544,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP173.25 - BP173.45 Islamic sociology",326,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP174 - BP190 The practice of Islam",2449,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP174 - BP190 The practice of Islam|BP176 - BP181 The five duties of a Moslem.  Pillars of Islam",69,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP174 - BP190 The practice of Islam|BP184 - BP184.9 Religious ceremonies, rites, etc.",78,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP174 - BP190 The practice of Islam|BP186 - BP186.97 Special days and seasons, fasts, feasts, festivals, etc.",31,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP174 - BP190 The practice of Islam|BP187 - BP187.9 Shrines, sacred places, etc.",185,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP174 - BP190 The practice of Islam|BP188 - BP190 Islamic religious life",1726,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP174 - BP190 The practice of Islam|BP188 - BP190 Islamic religious life|BP188.2 - BP188.3 Devotional literature",5,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP174 - BP190 The practice of Islam|BP188 - BP190 Islamic religious life|BP188.45 - BP189.65 Sufism. Mysticism. Dervishes",1233,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP174 - BP190 The practice of Islam|BP188 - BP190 Islamic religious life|BP189.68 - BP189.7 Monasticism",9,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP191 - BP253 Branches, sects, etc.",1359,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP70 - BP80 Biography",536,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP70 - BP80 Biography|BP75 - BP77.75 Muhammad, Prophet, d. 632",431,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP1 - BP253 Islam|BP87 - BP89 Islamic literature",92,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP300 - BP395 Bahai Faith",187,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP500 - BP585 Theosophy",227,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP595 - BP597 Anthroposophy",296,
        "B - Philosophy. Psychology. Religion|BP1 - BP610 Islam. Bahai Faith. Theosophy, etc.|BP600 - BP610 Other beliefs and movements",632,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism",6403,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism|BQ1001 - BQ1045 Buddhist literature",80,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism|BQ1100 - BQ3340 Tripitaka (Canonical literature)",787,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism|BQ251 - BQ799 History",851,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism|BQ4000 - BQ4060 General works",275,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism|BQ4061 - BQ4570 Doctrinal and systematic Buddhism",529,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism|BQ4600 - BQ4610 Relation to other religious and philosophical systems",13,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism|BQ4620 - BQ4905 Buddhist pantheon",114,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism|BQ4911 - BQ5720 Practice of Buddhism. Forms of worship",364,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism|BQ4911 - BQ5720 Practice of Buddhism. Forms of worship|BQ4965 - BQ5030 Ceremonies and rites. Ceremonial rules",36,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism|BQ4911 - BQ5720 Practice of Buddhism. Forms of worship|BQ5035 - BQ5065 Hymns. Chants. Recitations",10,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism|BQ4911 - BQ5720 Practice of Buddhism. Forms of worship|BQ5070 - BQ5075 Altar, liturgical objects, ornaments, memorials, etc.",3,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism|BQ4911 - BQ5720 Practice of Buddhism. Forms of worship|BQ5100 - BQ5125 Symbols and symbolism",12,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism|BQ4911 - BQ5720 Practice of Buddhism. Forms of worship|BQ5130 - BQ5137 Temple. Temple organization",11,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism|BQ4911 - BQ5720 Practice of Buddhism. Forms of worship|BQ5140 - BQ5355 Buddhist ministry. Priesthood. Organization",17,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism|BQ4911 - BQ5720 Practice of Buddhism. Forms of worship|BQ5360 - BQ5680 Religious life",220,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism|BQ840 - BQ999 Biography",450,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism|BQ840 - BQ999 Biography|BQ860 - BQ999 Individual",427,
        "B - Philosophy. Psychology. Religion|BQ1 - BQ9800 Buddhism|BQ840 - BQ999 Biography|BQ860 - BQ999 Individual|BQ860 - BQ939 Gautama Buddha",112,
        "B - Philosophy. Psychology. Religion|BR1 - BR1725 Christianity",23705,
        "B - Philosophy. Psychology. Religion|BR1 - BR1725 Christianity|BR140 - BR1510 History",11519,
        "B - Philosophy. Psychology. Religion|BR1 - BR1725 Christianity|BR140 - BR1510 History|BR160 - BR481 By period",3992,
        "B - Philosophy. Psychology. Religion|BR1 - BR1725 Christianity|BR140 - BR1510 History|BR500 - BR1510 By region or country",6903,
        "B - Philosophy. Psychology. Religion|BR1 - BR1725 Christianity|BR1690 - BR1725 Biography",986,
        "B - Philosophy. Psychology. Religion|BR1 - BR1725 Christianity|BR60 - BR67 Early Christian literature. Fathers of the Church, etc.",2872,
        "B - Philosophy. Psychology. Religion|BS1 - BS2970 The Bible",24914,
        "B - Philosophy. Psychology. Religion|BS1 - BS2970 The Bible|BS11 - BS115 Early versions",170,
        "B - Philosophy. Psychology. Religion|BS1 - BS2970 The Bible|BS125 - BS355 Modern texts and versions",700,
        "B - Philosophy. Psychology. Religion|BS1 - BS2970 The Bible|BS1901 - BS2970 New Testament",9437,
        "B - Philosophy. Psychology. Religion|BS1 - BS2970 The Bible|BS1901 - BS2970 New Testament|BS2280 - BS2545 Works about the New Testament",2119,
        "B - Philosophy. Psychology. Religion|BS1 - BS2970 The Bible|BS1901 - BS2970 New Testament|BS2547 - BS2970 Special parts of the New Testament",6605,
        "B - Philosophy. Psychology. Religion|BS1 - BS2970 The Bible|BS410 - BS680 Works about the Bible",5553,
        "B - Philosophy. Psychology. Religion|BS1 - BS2970 The Bible|BS701 - BS1830 Old Testament",8205,
        "B - Philosophy. Psychology. Religion|BT10 - BT1480 Doctrinal Theology",16536,
        "B - Philosophy. Psychology. Religion|BT10 - BT1480 Doctrinal Theology|BT1029 - BT1040 Catechisms",34,
        "B - Philosophy. Psychology. Religion|BT10 - BT1480 Doctrinal Theology|BT1095 - BT1255 Apologetics. Evidences of Christianity",621,
        "B - Philosophy. Psychology. Religion|BT10 - BT1480 Doctrinal Theology|BT1313 - BT1480 History of specific doctrines and movements. Heresies and schisms",798,
        "B - Philosophy. Psychology. Religion|BT10 - BT1480 Doctrinal Theology|BT19 - BT37 Doctrine and dogma",672,
        "B - Philosophy. Psychology. Religion|BT10 - BT1480 Doctrinal Theology|BT198 - BT590 Christology",3425,
        "B - Philosophy. Psychology. Religion|BT10 - BT1480 Doctrinal Theology|BT595 - BT680 Mary, Mother of Jesus Christ. Mariology",572,
        "B - Philosophy. Psychology. Religion|BT10 - BT1480 Doctrinal Theology|BT695 - BT749 Creation",2925,
        "B - Philosophy. Psychology. Religion|BT10 - BT1480 Doctrinal Theology|BT750 - BT811 Salvation. Soteriology",959,
        "B - Philosophy. Psychology. Religion|BT10 - BT1480 Doctrinal Theology|BT819 - BT891 Eschatology. Last things",641,
        "B - Philosophy. Psychology. Religion|BT10 - BT1480 Doctrinal Theology|BT899 - BT940 Future state. Future life",166,
        "B - Philosophy. Psychology. Religion|BT10 - BT1480 Doctrinal Theology|BT93 - BT93.6 Judaism",79,
        "B - Philosophy. Psychology. Religion|BT10 - BT1480 Doctrinal Theology|BT95 - BT97.2 Divine law. Moral government",76,
        "B - Philosophy. Psychology. Religion|BT10 - BT1480 Doctrinal Theology|BT960 - BT985 Invisible world (Saints, demons, etc.)",191,
        "B - Philosophy. Psychology. Religion|BT10 - BT1480 Doctrinal Theology|BT98 - BT180 God",2092,
        "B - Philosophy. Psychology. Religion|BT10 - BT1480 Doctrinal Theology|BT990 - BT1010 Creeds, confessions, covenants, etc.",144,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology",16186,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV2000 - BV3705 Missions",3144,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV2000 - BV3705 Missions|BV2123 - BV2595 Special churches",611,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV2000 - BV3705 Missions|BV2610 - BV2695 Special types of missions",170,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV2000 - BV3705 Missions|BV2750 - BV3695 Missions in individual countries",1926,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV3750 - BV3799 Evangelism. Revivals",644,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV4000 - BV4470 Pastoral theology",2026,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV4485 - BV5099 Practical religion. The Christian life",4715,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV5 - BV530 Worship (Public and private)",2021,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV5 - BV530 Worship (Public and private)|BV150 - BV168 Christian symbols and symbolism",129,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV5 - BV530 Worship (Public and private)|BV169 - BV199 Liturgy and ritual",426,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV5 - BV530 Worship (Public and private)|BV205 - BV287 Prayer",451,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV5 - BV530 Worship (Public and private)|BV30 - BV135 Times and seasons. The Church year",258,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV5 - BV530 Worship (Public and private)|BV301 - BV530 Hymnology",550,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV590 - BV1652 Ecclesiastical theology",3540,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV590 - BV1652 Ecclesiastical theology|BV1460 - BV1615 Religious education (General)",530,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV590 - BV1652 Ecclesiastical theology|BV1620 - BV1652 Social life, recreation, etc. in the church",14,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV590 - BV1652 Ecclesiastical theology|BV659 - BV683 Ministry. Clergy. Religious vocations",290,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV590 - BV1652 Ecclesiastical theology|BV700 - BV707 Parish. Congregation. The local church",11,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV590 - BV1652 Ecclesiastical theology|BV800 - BV873 Sacraments. Ordinances",591,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV590 - BV1652 Ecclesiastical theology|BV895 - BV896 Shrines. Holy places",3,
        "B - Philosophy. Psychology. Religion|BV1 - BV5099 Practical Theology|BV590 - BV1652 Ecclesiastical theology|BV900 - BV1450 Religious societies, associations, etc.",159,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations",48851,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX1 - BX9.5 Church unity. Ecumenical movement. Interdenominational cooperation",273,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX100 - BX189 Eastern churches. Oriental churches",346,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX200 - BX756 Orthodox Eastern Church",6414,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism",17979,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX4872 - BX4924 Pre-Reformation",394,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX4929 - BX4951 Post-Reformation",167,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX5001 - BX5009 Anglican Communion (General)",133,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX5011 - BX5207 Church of England",2780,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX5800 - BX5995 Protestant Episcopal Church in the United States of America",1003,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX5996 - BX6030 Protestant Episcopal Church outside the United States",2,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6051 - BX6093 Reformed Episcopal Church",4,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations",11504,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX6101 - BX6193 Adventists",105,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX6195 - BX6197 Arminians. Remonstrants",23,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX6201 - BX6495 Baptists",1352,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX6551 - BX6593 Catholic Apostolic Church. Irvingites",8,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX6651 - BX6693 Christadelphians. Brothers of Christ",2,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX6751 - BX6793 Christian Church",11,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX6801 - BX6843 Christian Reformed Church",8,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX6901 - BX6997 Christian Science",80,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX7020 - BX7060 Church of God",35,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX7079 - BX7097 Churches of God",8,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX7101 - BX7260 Congregationalism",271,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX7301 - BX7343 Disciples of Christ. Campbellites",114,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX7401 - BX7430 Dowieism. Christian Catholic Church",4,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX7451 - BX7493 Evangelical and Reformed Church",6,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX7601 - BX7795 Friends. Society of Friends. Quakers",563,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX7801 - BX7843 German Baptist Brethren. Church of the Brethren. Dunkards",35,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX7901 - BX7943 German Evangelical Synod of North America",1,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX8001 - BX8080 Lutheran churches",599,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX8101 - BX8144 Mennonites",279,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX8201 - BX8495 Methodism",1007,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX8525 - BX8528 Millennial Dawnists. Jehovah's Witnesses",89,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX8551 - BX8593 Moravian Church. United Brethren. Unitas Fratrum. Herrnhuters",148,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX8601 - BX8695 Mormons. Church of Jesus Christ of Latter-Day Saints",979,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX8701 - BX8749 New Jerusalem Church. New Church. Swedenborgianism",93,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX8762 - BX8785 Pentecostal churches",200,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX8799 - BX8809 Plymouth Brethren. Darbyites",10,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX8901 - BX9225 Presbyterianism. Calvinistic Methodism",914,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX9301 - BX9359 Puritanism",229,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX9401 - BX9640 Reformed or Calvinistic Churches",977,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX9701 - BX9743 Salvation Army",47,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX9751 - BX9793 Shakers. United Society of Believers. Millennial Church",163,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX9801 - BX9869 Unitarianism",178,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX9875 - BX9877.1 United Brethren in Christ. Church of the United Brethren in Christ",8,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX9881 - BX9882.95 United Church of Canada",6,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX9884 - BX9886 United Church of Christ",16,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX4800 - BX9999 Protestantism|BX6101 - BX9999 Other Protestant denominations|BX9901 - BX9969 Universalism. Universalists",71,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX800 - BX4795 Catholic Church",23829,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX800 - BX4795 Catholic Church|BX2400 - BX4563 Monasticism. Religious orders",3654,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX800 - BX4795 Catholic Church|BX4600 - BX4644 Churches, cathedrals, abbeys (as parish churches), etc.",155,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX800 - BX4795 Catholic Church|BX4650 - BX4750 Biography and portraits",6281,
        "B - Philosophy. Psychology. Religion|BX1 - BX9999 Christian Denominations|BX800 - BX4795 Catholic Church|BX4716.4 - BX4795 Dissenting sects other than Protestant",20,
        "C - Auxiliary Sciences of History",35910,
        "C - Auxiliary Sciences of History|C1 - C51 Auxiliary Sciences of History (General)",39,
        "C - Auxiliary Sciences of History|CB3 - CB482 History of Civilization",6175,
        "C - Auxiliary Sciences of History|CB3 - CB482 History of Civilization|CB158 - CB161 Forecasts of future progress",190,
        "C - Auxiliary Sciences of History|CB3 - CB482 History of Civilization|CB195 - CB281 Civilization and race",1260,
        "C - Auxiliary Sciences of History|CB3 - CB482 History of Civilization|CB305 - CB430 By period",2673,
        "C - Auxiliary Sciences of History|CB3 - CB482 History of Civilization|CB440 - CB482 Relation to special topics",352,
        "C - Auxiliary Sciences of History|CC1 - CC960 Archaeology",4098,
        "C - Auxiliary Sciences of History|CC1 - CC960 Archaeology|CC135 - CC137 Preservation, restoration, and conservation of antiquities.  Antiquities and state",490,
        "C - Auxiliary Sciences of History|CC1 - CC960 Archaeology|CC200 - CC260 Bells. Campanology. Cowbells",42,
        "C - Auxiliary Sciences of History|CC1 - CC960 Archaeology|CC300 - CC350 Crosses",32,
        "C - Auxiliary Sciences of History|CC1 - CC960 Archaeology|CC700 - CC705 Stone heaps, cairns, etc., of unknown purpose",3,
        "C - Auxiliary Sciences of History|CC1 - CC960 Archaeology|CC72 - CC81 Philosophy. Theory",2165,
        "C - Auxiliary Sciences of History|CC1 - CC960 Archaeology|CC83 - CC97 Study and teaching. Research",54,
        "C - Auxiliary Sciences of History|CD1 - CD6471 Diplomatics. Archives. Seals",5394,
        "C - Auxiliary Sciences of History|CD1 - CD6471 Diplomatics. Archives. Seals|CD1 - CD511 Diplomatics",219,
        "C - Auxiliary Sciences of History|CD1 - CD6471 Diplomatics. Archives. Seals|CD5001 - CD6471 Seals",358,
        "C - Auxiliary Sciences of History|CD1 - CD6471 Diplomatics. Archives. Seals|CD921 - CD4280 Archives",3751,
        "C - Auxiliary Sciences of History|CE1 - CE97 Technical Chronology. Calendar",392,
        "C - Auxiliary Sciences of History|CE1 - CE97 Technical Chronology. Calendar|CE21 - CE46 Ancient",113,
        "C - Auxiliary Sciences of History|CE1 - CE97 Technical Chronology. Calendar|CE51 - CE85 Medieval and modern",165,
        "C - Auxiliary Sciences of History|CE1 - CE97 Technical Chronology. Calendar|CE91 - CE92 Perpetual calendars. Century calendars, etc.",1,
        "C - Auxiliary Sciences of History|CJ1 - CJ6661 Numismatics",2240,
        "C - Auxiliary Sciences of History|CJ1 - CJ6661 Numismatics|CJ1 - CJ4625 Coins",2042,
        "C - Auxiliary Sciences of History|CJ1 - CJ6661 Numismatics|CJ4801 - CJ5450 Tokens",54,
        "C - Auxiliary Sciences of History|CJ1 - CJ6661 Numismatics|CJ5501 - CJ6661 Medals and medallions",143,
        "C - Auxiliary Sciences of History|CN1 - CN1355 Inscriptions. Epigraphy",1380,
        "C - Auxiliary Sciences of History|CN1 - CN1355 Inscriptions. Epigraphy|CN120 - CN740 Ancient inscriptions",1018,
        "C - Auxiliary Sciences of History|CN1 - CN1355 Inscriptions. Epigraphy|CN750 - CN753 Early Christian inscriptions",7,
        "C - Auxiliary Sciences of History|CN1 - CN1355 Inscriptions. Epigraphy|CN805 - CN865 By language",11,
        "C - Auxiliary Sciences of History|CN1 - CN1355 Inscriptions. Epigraphy|CN870 - CN1355 By region or country",252,
        "C - Auxiliary Sciences of History|CR1 - CR6305 Heraldry",1430,
        "C - Auxiliary Sciences of History|CR1 - CR6305 Heraldry|CR101 - CR115 Flags, banners, and standards",105,
        "C - Auxiliary Sciences of History|CR1 - CR6305 Heraldry|CR1101 - CR1131 Ecclesiastical and sacred heraldry",10,
        "C - Auxiliary Sciences of History|CR1 - CR6305 Heraldry|CR1179 - CR3395 Family heraldry",120,
        "C - Auxiliary Sciences of History|CR1 - CR6305 Heraldry|CR191 - CR1020 Public and official heraldry",159,
        "C - Auxiliary Sciences of History|CR1 - CR6305 Heraldry|CR3499 - CR4420 Titles of honor, rank, precedence, etc",77,
        "C - Auxiliary Sciences of History|CR1 - CR6305 Heraldry|CR4480 - CR4485 Royalty. Insignia. Regalia, crown and coronets, etc.",15,
        "C - Auxiliary Sciences of History|CR1 - CR6305 Heraldry|CR4501 - CR6305 Chivalry and knighthood (Orders, decorations, etc.)",757,
        "C - Auxiliary Sciences of History|CR1 - CR6305 Heraldry|CR4501 - CR6305 Chivalry and knighthood (Orders, decorations, etc.)|CR4571 - CR4595 Duels and dueling",37,
        "C - Auxiliary Sciences of History|CR1 - CR6305 Heraldry|CR4501 - CR6305 Chivalry and knighthood (Orders, decorations, etc.)|CR4651 - CR6305 Orders, etc.",500,
        "C - Auxiliary Sciences of History|CR1 - CR6305 Heraldry|CR51 - CR79 Crests, monograms, devices, badges, mottoes",42,
        "C - Auxiliary Sciences of History|CS1 - CS3090 Genealogy",4318,
        "C - Auxiliary Sciences of History|CS1 - CS3090 Genealogy|CS23 - CS35 Genealogical lists, etc., covering more than one country or continent",27,
        "C - Auxiliary Sciences of History|CS1 - CS3090 Genealogy|CS2300 - CS3090 Personal or family names",771,
        "C - Auxiliary Sciences of History|CS1 - CS3090 Genealogy|CS38 - CS39 Family history covering more than one country",2,
        "C - Auxiliary Sciences of History|CS1 - CS3090 Genealogy|CS42 - CS2209 By region or country",3389,
        "C - Auxiliary Sciences of History|CT21 - CT9999 Biography",9094,
        "C - Auxiliary Sciences of History|CT21 - CT9999 Biography|CT21 - CT22 Biography as an art or literary form",189,
        "C - Auxiliary Sciences of History|CT21 - CT9999 Biography|CT210 - CT3150 National biography",6345,
        "C - Auxiliary Sciences of History|CT21 - CT9999 Biography|CT31 - CT83 History of biographical literature. Lives of biographers",97,
        "C - Auxiliary Sciences of History|CT21 - CT9999 Biography|CT3200 - CT9999 Biography. By subject",1197,
        "C - Auxiliary Sciences of History|CT21 - CT9999 Biography|CT3200 - CT9999 Biography. By subject|CT3200 - CT3830 Biography of women (Collective)",577,
        "C - Auxiliary Sciences of History|CT21 - CT9999 Biography|CT3200 - CT9999 Biography. By subject|CT9960 - CT9998 Other miscellaneous groups",145,
        "C - Auxiliary Sciences of History|CT21 - CT9999 Biography|CT93 - CT206 General collective biography",890,
        "D - History (General) and History of Europe",401497,
        "D - History (General) and History of Europe|D1 - D2009 History (General)",61023,
        "D - History (General) and History of Europe|D1 - D2009 History (General)|D1 - D24.5 General",7978,
        "D - History (General) and History of Europe|D1 - D2009 History (General)|D101 - D110.5 Medieval and modern history, 476-",508,
        "D - History (General) and History of Europe|D1 - D2009 History (General)|D111 - D203 Medieval history",2287,
        "D - History (General) and History of Europe|D1 - D2009 History (General)|D205 - D472 Modern history, 1453-",6475,
        "D - History (General) and History of Europe|D1 - D2009 History (General)|D205 - D472 Modern history, 1453-|D219 - D234 1453-1648",246,
        "D - History (General) and History of Europe|D1 - D2009 History (General)|D205 - D472 Modern history, 1453-|D242 - D283.5 1601-1715. 17th century",648,
        "D - History (General) and History of Europe|D1 - D2009 History (General)|D205 - D472 Modern history, 1453-|D284 - D297 1715-1789. 18th century",392,
        "D - History (General) and History of Europe|D1 - D2009 History (General)|D205 - D472 Modern history, 1453-|D299 - D472 -1789",4424,
        "D - History (General) and History of Europe|D1 - D2009 History (General)|D205 - D472 Modern history, 1453-|D299 - D472 -1789|D301 - D309 Period of the French Revolution",82,
        "D - History (General) and History of Europe|D1 - D2009 History (General)|D205 - D472 Modern history, 1453-|D299 - D472 -1789|D351 - D400 19th century. 1801-1914/1920",1182,
        "D - History (General) and History of Europe|D1 - D2009 History (General)|D205 - D472 Modern history, 1453-|D299 - D472 -1789|D410 - D472 20th century",2929,
        "D - History (General) and History of Europe|D1 - D2009 History (General)|D25 - D27 Military and naval history",281,
        "D - History (General) and History of Europe|D1 - D2009 History (General)|D31 - D34 Political and diplomatic history",138,
        "D - History (General) and History of Europe|D1 - D2009 History (General)|D51 - D90 Ancient history",941,
        "D - History (General) and History of Europe|DA1 - DA995 History of Great Britain",37901,
        "D - History (General) and History of Europe|DA1 - DA995 History of Great Britain|DA10 - DA18.2 British Empire. Commonwealth of Nations. The Commonwealth",573,
        "D - History (General) and History of Europe|DA1 - DA995 History of Great Britain|DA20 - DA690 England",27213,
        "D - History (General) and History of Europe|DA1 - DA995 History of Great Britain|DA20 - DA690 England|DA28 - DA592 History",20984,
        "D - History (General) and History of Europe|DA1 - DA995 History of Great Britain|DA20 - DA690 England|DA28 - DA592 History|DA129 - DA592 By period",16156,
        "D - History (General) and History of Europe|DA1 - DA995 History of Great Britain|DA20 - DA690 England|DA28 - DA592 History|DA129 - DA592 By period|DA129 - DA260 Early and medieval to 1485",2896,
        "D - History (General) and History of Europe|DA1 - DA995 History of Great Britain|DA20 - DA690 England|DA28 - DA592 History|DA129 - DA592 By period|DA300 - DA592 Modern, 1485-",13181,
        "D - History (General) and History of Europe|DA1 - DA995 History of Great Britain|DA20 - DA690 England|DA600 - DA667 Description and travel. Guidebooks",1030,
        "D - History (General) and History of Europe|DA1 - DA995 History of Great Britain|DA20 - DA690 England|DA670 - DA690 Local history and description",3751,
        "D - History (General) and History of Europe|DA1 - DA995 History of Great Britain|DA700 - DA745 Wales",567,
        "D - History (General) and History of Europe|DA1 - DA995 History of Great Britain|DA750 - DA890 Scotland",2411,
        "D - History (General) and History of Europe|DA1 - DA995 History of Great Britain|DA900 - DA995 Ireland",4935,
        "D - History (General) and History of Europe|DAW1001 - DAW1051 History of Central Europe",215,
        "D - History (General) and History of Europe|DB1 - DB3150 History of Austria. Liechtenstein. Hungary. Czechslovakia",11361,
        "D - History (General) and History of Europe|DB1 - DB3150 History of Austria. Liechtenstein. Hungary. Czechslovakia|DB1 - DB879 Austria. Austro-Hungarian Empire",4599,
        "D - History (General) and History of Europe|DB1 - DB3150 History of Austria. Liechtenstein. Hungary. Czechslovakia|DB2000 - DB3150 Czechoslovakia",5042,
        "D - History (General) and History of Europe|DB1 - DB3150 History of Austria. Liechtenstein. Hungary. Czechslovakia|DB2000 - DB3150 Czechoslovakia|DB2300 - DB2650 Local history and description of Czech lands",566,
        "D - History (General) and History of Europe|DB1 - DB3150 History of Austria. Liechtenstein. Hungary. Czechslovakia|DB2000 - DB3150 Czechoslovakia|DB2700 - DB3150 Slovakia",892,
        "D - History (General) and History of Europe|DB1 - DB3150 History of Austria. Liechtenstein. Hungary. Czechslovakia|DB881 - DB898 Liechtenstein",10,
        "D - History (General) and History of Europe|DB1 - DB3150 History of Austria. Liechtenstein. Hungary. Czechslovakia|DB901 - DB999 Hungary",1452,
        "D - History (General) and History of Europe|DC1 - DC947 History of France",24308,
        "D - History (General) and History of Europe|DC1 - DC947 History of France|DC24 - DC424 History",19270,
        "D - History (General) and History of Europe|DC1 - DC947 History of France|DC24 - DC424 History|DC60 - DC424 By period",16223,
        "D - History (General) and History of Europe|DC1 - DC947 History of France|DC24 - DC424 History|DC60 - DC424 By period|DC110 - DC424 Modern, 1515-",14494,
        "D - History (General) and History of Europe|DC1 - DC947 History of France|DC24 - DC424 History|DC60 - DC424 By period|DC110 - DC424 Modern, 1515-|DC139 - DC249 Revolutionary and Napoleonic period, 1789-1815",6222,
        "D - History (General) and History of Europe|DC1 - DC947 History of France|DC24 - DC424 History|DC60 - DC424 By period|DC110 - DC424 Modern, 1515-|DC251 - DC354.9 19th century",2384,
        "D - History (General) and History of Europe|DC1 - DC947 History of France|DC24 - DC424 History|DC60 - DC424 By period|DC110 - DC424 Modern, 1515-|DC361 - DC424 20th century",2446,
        "D - History (General) and History of Europe|DC1 - DC947 History of France|DC24 - DC424 History|DC60 - DC424 By period|DC60 - DC109 Early and medieval to 1515",1726,
        "D - History (General) and History of Europe|DC1 - DC947 History of France|DC600 - DC801 Local history and description",3312,
        "D - History (General) and History of Europe|DC1 - DC947 History of France|DC921 - DC930 Andorra",11,
        "D - History (General) and History of Europe|DC1 - DC947 History of France|DC941 - DC947 Monaco",28,
        "D - History (General) and History of Europe|DD1 - DD901 History of Germany",18764,
        "D - History (General) and History of Europe|DD1 - DD901 History of Germany|DD258 - DD262 West Germany",1583,
        "D - History (General) and History of Europe|DD1 - DD901 History of Germany|DD280 - DD289.5 East Germany",889,
        "D - History (General) and History of Europe|DD1 - DD901 History of Germany|DD301 - DD454 Prussia",742,
        "D - History (General) and History of Europe|DD1 - DD901 History of Germany|DD701 - DD901 Local history and description",2116,
        "D - History (General) and History of Europe|DD1 - DD901 History of Germany|DD84 - DD257.4 History",10265,
        "D - History (General) and History of Europe|DD1 - DD901 History of Germany|DD84 - DD257.4 History|DD121 - DD257.4 By period",8753,
        "D - History (General) and History of Europe|DD1 - DD901 History of Germany|DD84 - DD257.4 History|DD121 - DD257.4 By period|DD121 - DD124 Earliest to 481",50,
        "D - History (General) and History of Europe|DD1 - DD901 History of Germany|DD84 - DD257.4 History|DD121 - DD257.4 By period|DD125 - DD174.6 Early and medieval to 1519",598,
        "D - History (General) and History of Europe|DD1 - DD901 History of Germany|DD84 - DD257.4 History|DD121 - DD257.4 By period|DD175 - DD257.4 Modern, 1519-",8105,
        "D - History (General) and History of Europe|DE1 - DE100 History of the Greco-Roman world",1596,
        "D - History (General) and History of Europe|DF10 - DF951 History of Greece",7456,
        "D - History (General) and History of Europe|DF10 - DF951 History of Greece|DF10 - DF289 Ancient Greece",5193,
        "D - History (General) and History of Europe|DF10 - DF951 History of Greece|DF501 - DF649 Medieval Greece. Byzantine Empire, 323-1453",1091,
        "D - History (General) and History of Europe|DF10 - DF951 History of Greece|DF701 - DF951 Modern Greece",1150,
        "D - History (General) and History of Europe|DG11 - DG999 History of Italy",18535,
        "D - History (General) and History of Europe|DG11 - DG999 History of Italy|DG11 - DG365 Ancient Italy. Rome to 476",8602,
        "D - History (General) and History of Europe|DG11 - DG999 History of Italy|DG401 - DG583.8 Medieval and modern Italy, 476-",4857,
        "D - History (General) and History of Europe|DG11 - DG999 History of Italy|DG600 - DG684.72 Northern Italy",927,
        "D - History (General) and History of Europe|DG11 - DG999 History of Italy|DG691 - DG817.3 Central Italy",1787,
        "D - History (General) and History of Europe|DG11 - DG999 History of Italy|DG819 - DG875 Southern Italy",787,
        "D - History (General) and History of Europe|DG11 - DG999 History of Italy|DG987 - DG999 Malta. Maltese Islands",101,
        "D - History (General) and History of Europe|DH1 - DH925 History of the Low Countries. Benelux Countries",1078,
        "D - History (General) and History of Europe|DH1 - DH925 History of the Low Countries. Benelux Countries|DH401 - DH811 Belgium",689,
        "D - History (General) and History of Europe|DH1 - DH925 History of the Low Countries. Benelux Countries|DH401 - DH811 Belgium|DH503 - DH694 History",235,
        "D - History (General) and History of Europe|DH1 - DH925 History of the Low Countries. Benelux Countries|DH401 - DH811 Belgium|DH503 - DH694 History|DH571 - DH694 By period",184,
        "D - History (General) and History of Europe|DH1 - DH925 History of the Low Countries. Benelux Countries|DH401 - DH811 Belgium|DH503 - DH694 History|DH571 - DH694 By period|DH571 - DH584 Early and medieval to 1555",16,
        "D - History (General) and History of Europe|DH1 - DH925 History of the Low Countries. Benelux Countries|DH401 - DH811 Belgium|DH503 - DH694 History|DH571 - DH694 By period|DH585 - DH619 1555-1794. Spanish and Austrian rule",20,
        "D - History (General) and History of Europe|DH1 - DH925 History of the Low Countries. Benelux Countries|DH401 - DH811 Belgium|DH503 - DH694 History|DH571 - DH694 By period|DH620 - DH676 1794-1909",49,
        "D - History (General) and History of Europe|DH1 - DH925 History of the Low Countries. Benelux Countries|DH401 - DH811 Belgium|DH503 - DH694 History|DH571 - DH694 By period|DH677 - DH694 20th century",95,
        "D - History (General) and History of Europe|DH1 - DH925 History of the Low Countries. Benelux Countries|DH401 - DH811 Belgium|DH801 - DH811 Local history and description",105,
        "D - History (General) and History of Europe|DH1 - DH925 History of the Low Countries. Benelux Countries|DH901 - DH925 Luxembourg",38,
        "D - History (General) and History of Europe|DH1 - DH925 History of the Low Countries. Benelux Countries|DH95 - DH207 History",231,
        "D - History (General) and History of Europe|DH1 - DH925 History of the Low Countries. Benelux Countries|DH95 - DH207 History|DH141 - DH207 By period",202,
        "D - History (General) and History of Europe|DJ1 - DJ411 History of Netherlands (Holland)",638,
        "D - History (General) and History of Europe|DJ1 - DJ411 History of Netherlands (Holland)|DJ401 - DJ411 Local history and description",34,
        "D - History (General) and History of Europe|DJ1 - DJ411 History of Netherlands (Holland)|DJ95 - DJ292 History",334,
        "D - History (General) and History of Europe|DJ1 - DJ411 History of Netherlands (Holland)|DJ95 - DJ292 History|DJ151 - DJ292 By period",213,
        "D - History (General) and History of Europe|DJ1 - DJ411 History of Netherlands (Holland)|DJ95 - DJ292 History|DJ151 - DJ292 By period|DJ151 - DJ152 Early and medieval to 1555",2,
        "D - History (General) and History of Europe|DJ1 - DJ411 History of Netherlands (Holland)|DJ95 - DJ292 History|DJ151 - DJ292 By period|DJ154 - DJ210 1555-1795. United provinces",127,
        "D - History (General) and History of Europe|DJ1 - DJ411 History of Netherlands (Holland)|DJ95 - DJ292 History|DJ151 - DJ292 By period|DJ215 - DJ292 19th-20th centuries",73,
        "D - History (General) and History of Europe|DJK1 - DJK77 History of Eastern Europe (General)",1611,
        "D - History (General) and History of Europe|DJK1 - DJK77 History of Eastern Europe (General)|DJK26 - DJK28 Ethnography",205,
        "D - History (General) and History of Europe|DJK1 - DJK77 History of Eastern Europe (General)|DJK30 - DJK51 History",745,
        "D - History (General) and History of Europe|DJK1 - DJK77 History of Eastern Europe (General)|DJK61 - DJK77 Local history and description",97,
        "D - History (General) and History of Europe|DJK1 - DJK77 History of Eastern Europe (General)|DJK61 - DJK77 Local history and description|DJK61 - DJK66 Black Sea region",36,
        "D - History (General) and History of Europe|DJK1 - DJK77 History of Eastern Europe (General)|DJK61 - DJK77 Local history and description|DJK71 - DJK76 Carpathian Mountain region",15,
        "D - History (General) and History of Europe|DJK1 - DJK77 History of Eastern Europe (General)|DJK61 - DJK77 Local history and description|DJK76.2 - DJK76.8 Danube River Valley",12,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics",46298,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK36 - DK293 History",21611,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK36 - DK293 History|DK112.8 - DK264.8 House of Romanov, 1613-1917",7222,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK36 - DK293 History|DK265 - DK265.95 Revolution, 1917-1921",3101,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK36 - DK293 History|DK266 - DK292 Soviet regime, 1918-1991",5902,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK36 - DK293 History|DK70 - DK112.42 Early to 1613",1211,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK36 - DK293 History|DK70 - DK112.42 Early to 1613|DK70 - DK99.7 Rus'",768,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK36 - DK293 History|DK70 - DK112.42 Early to 1613|DK99.8 - DK112.42 Muscovy",450,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description",19268,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK502.3 - DK502.75 Baltic States",175,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK503 - DK503.95 Estonia",183,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK504 - DK504.95 Latvia",282,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK505 - DK505.95 Lithuania",219,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK507 - DK507.95 Belarus. Byelorussian S.S.R.  White Russia",402,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK508 - DK508.95 Ukraine",2253,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK509.1 - DK509.95 Moldova. Moldovian S.S.R.  Bessarabia",158,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK510 - DK651 Russia (Federation). Russian S.F.S.R.",8776,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK670 - DK679.5 Georgia (Republic). Georgian S.S.R.  Georgian Sakartvelo",269,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK680 - DK689.5 Armenia (Republic). Armenian S.S.R.",55,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK690 - DK699.5 Azerbaijan. Azerbaijan S.S.R.",222,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK751 - DK781 Siberia",2072,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK845 - DK860 Soviet Central Asia. West Turkestan",463,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK901 - DK909.5 Kazakhstan. Kazakh S.S.R.",260,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK911 - DK919.5 Kyrgyzstan. Kirghiz S.S.R. Kirghizia",101,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK921 - DK929.5 Tajikistan. Tajik S.S.R. Tadzhikistan",103,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK931 - DK939.5 Turkmenistan. Turkmen S.S.R.  Turkmenia",75,
        "D - History (General) and History of Europe|DK1 - DK949.5 History of Russia. Soviet Union. Former Soviet Republics|DK501 - DK949.5 Local history and description|DK941 - DK949.5 Uzbekistan. Uzbek S.S.R.",150,
        "D - History (General) and History of Europe|DK4010 - DK4800 History of Poland",2529,
        "D - History (General) and History of Europe|DK4010 - DK4800 History of Poland|DK4123 - DK4452 History",1627,
        "D - History (General) and History of Europe|DK4010 - DK4800 History of Poland|DK4123 - DK4452 History|DK4186 - DK4348 To 1795",204,
        "D - History (General) and History of Europe|DK4010 - DK4800 History of Poland|DK4123 - DK4452 History|DK4348.5 - DK4395 1795-1918. 19th century (General)",175,
        "D - History (General) and History of Europe|DK4010 - DK4800 History of Poland|DK4123 - DK4452 History|DK4397 - DK4420 1918-1945",199,
        "D - History (General) and History of Europe|DK4010 - DK4800 History of Poland|DK4123 - DK4452 History|DK4429 - DK4442 1945-1989. People's Republic",299,
        "D - History (General) and History of Europe|DK4010 - DK4800 History of Poland|DK4123 - DK4452 History|DK4445 - DK4452 -1989",107,
        "D - History (General) and History of Europe|DK4010 - DK4800 History of Poland|DK4600 - DK4800 Local history and description",433,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia",2028,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL1002 - DL1180 Finland",161,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL1002 - DL1180 Finland|DL1024 - DL1141.6 History",108,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL1002 - DL1180 Finland|DL1024 - DL1141.6 History|DL1050 - DL1141.6 By period",81,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL1002 - DL1180 Finland|DL1024 - DL1141.6 History|DL1050 - DL1141.6 By period|DL1055 - DL1141.6 Modern, 1523-",81,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL1002 - DL1180 Finland|DL1024 - DL1141.6 History|DL1050 - DL1141.6 By period|DL1055 - DL1141.6 Modern, 1523-|DL1070 - DL1078 Revolution, 1917-1918. Civil War",8,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL1002 - DL1180 Finland|DL1024 - DL1141.6 History|DL1050 - DL1141.6 By period|DL1055 - DL1141.6 Modern, 1523-|DL1090 - DL1105 1939-1945",32,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL1002 - DL1180 Finland|DL1024 - DL1141.6 History|DL1050 - DL1141.6 By period|DL1055 - DL1141.6 Modern, 1523-|DL1090 - DL1105 1939-1945|DL1095 - DL1105 Russo-Finnish War, 1939-1940",32,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL1002 - DL1180 Finland|DL1170 - DL1180 Local history and description",4,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL101 - DL291 Denmark",278,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL101 - DL291 Denmark|DL143 - DL263.3 History",146,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL101 - DL291 Denmark|DL143 - DL263.3 History|DL160 - DL263.3 By period",79,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL101 - DL291 Denmark|DL143 - DL263.3 History|DL160 - DL263.3 By period|DL160 - DL183.9 Early and medieval to 1523",22,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL101 - DL291 Denmark|DL143 - DL263.3 History|DL160 - DL263.3 By period|DL184 - DL263.3 Modern, 1523-",56,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL301 - DL398 Iceland",165,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL401 - DL596 Norway",205,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL401 - DL596 Norway|DL443 - DL537 History",100,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL401 - DL596 Norway|DL443 - DL537 History|DL460 - DL537 By period",64,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL401 - DL596 Norway|DL443 - DL537 History|DL460 - DL537 By period|DL460 - DL478 Early and medieval to 1387",30,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL401 - DL596 Norway|DL443 - DL537 History|DL460 - DL537 By period|DL480 - DL502 1387-1814. Union of Kalmar, 1397",1,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL401 - DL596 Norway|DL443 - DL537 History|DL460 - DL537 By period|DL503 - DL526 1814-1905. 19th century",5,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL401 - DL596 Norway|DL443 - DL537 History|DL460 - DL537 By period|DL527 - DL537 20th century. Period of World War II, 1939-1945",28,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL401 - DL596 Norway|DL576 - DL596 Local history and description",16,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL43 - DL87 History",306,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL43 - DL87 History|DL61 - DL87 By period",204,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL601 - DL991 Sweden",574,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL601 - DL991 Sweden|DL643 - DL879 History",333,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL601 - DL991 Sweden|DL643 - DL879 History|DL660 - DL879 By period",257,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL601 - DL991 Sweden|DL643 - DL879 History|DL660 - DL879 By period|DL660 - DL700.9 Early and medieval to 1523. Union of Kalmar, 1397",15,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL601 - DL991 Sweden|DL643 - DL879 History|DL660 - DL879 By period|DL701 - DL879 Modern, 1523-",242,
        "D - History (General) and History of Europe|DL1 - DL1180 History of Northern Europe. Scandinavia|DL601 - DL991 Sweden|DL971 - DL991 Local history and description",80,
        "D - History (General) and History of Europe|DP1 - DP402 History of Spain",8570,
        "D - History (General) and History of Europe|DP1 - DP402 History of Spain|DP285 - DP402 Local history and description",1952,
        "D - History (General) and History of Europe|DP1 - DP402 History of Spain|DP56 - DP272.4 History",5391,
        "D - History (General) and History of Europe|DP1 - DP402 History of Spain|DP56 - DP272.4 History|DP91 - DP272.4 By period",4659,
        "D - History (General) and History of Europe|DP1 - DP402 History of Spain|DP56 - DP272.4 History|DP91 - DP272.4 By period|DP161 - DP272.4 Modern Spain, 1479/1516-",3445,
        "D - History (General) and History of Europe|DP1 - DP402 History of Spain|DP56 - DP272.4 History|DP91 - DP272.4 By period|DP161 - DP272.4 Modern Spain, 1479/1516-|DP161.5 - DP166 1479-1516. Fernando V and Isabel I",129,
        "D - History (General) and History of Europe|DP1 - DP402 History of Spain|DP56 - DP272.4 History|DP91 - DP272.4 By period|DP161 - DP272.4 Modern Spain, 1479/1516-|DP170 - DP189 1516-1700. Hapsburgs",426,
        "D - History (General) and History of Europe|DP1 - DP402 History of Spain|DP56 - DP272.4 History|DP91 - DP272.4 By period|DP161 - DP272.4 Modern Spain, 1479/1516-|DP192 - DP200.8 1700-1808. Bourbons",158,
        "D - History (General) and History of Europe|DP1 - DP402 History of Spain|DP56 - DP272.4 History|DP91 - DP272.4 By period|DP161 - DP272.4 Modern Spain, 1479/1516-|DP201 - DP232.6 1808-1886. 19th century",370,
        "D - History (General) and History of Europe|DP1 - DP402 History of Spain|DP56 - DP272.4 History|DP91 - DP272.4 By period|DP161 - DP272.4 Modern Spain, 1479/1516-|DP233 - DP272.4 20th century. 1886-",2278,
        "D - History (General) and History of Europe|DP1 - DP402 History of Spain|DP56 - DP272.4 History|DP91 - DP272.4 By period|DP91 - DP96 Earliest to 711",149,
        "D - History (General) and History of Europe|DP1 - DP402 History of Spain|DP56 - DP272.4 History|DP91 - DP272.4 By period|DP97.3 - DP160.8 711-1516. Moorish domination and the Reconquest",993,
        "D - History (General) and History of Europe|DP501 - DP900 History of Portugal",1433,
        "D - History (General) and History of Europe|DP501 - DP900 History of Portugal|DP535 - DP682.2 History",901,
        "D - History (General) and History of Europe|DP501 - DP900 History of Portugal|DP535 - DP682.2 History|DP558 - DP682.2 By period",665,
        "D - History (General) and History of Europe|DP501 - DP900 History of Portugal|DP535 - DP682.2 History|DP558 - DP682.2 By period|DP558 - DP618 Early and medieval to 1580",252,
        "D - History (General) and History of Europe|DP501 - DP900 History of Portugal|DP535 - DP682.2 History|DP558 - DP682.2 By period|DP620 - DP682.2 -1580",413,
        "D - History (General) and History of Europe|DP501 - DP900 History of Portugal|DP702 - DP802 Local history and description",144,
        "D - History (General) and History of Europe|DQ1 - DQ851 History of Switzerland",724,
        "D - History (General) and History of Europe|DQ1 - DQ851 History of Switzerland|DQ1 - DQ20 General",87,
        "D - History (General) and History of Europe|DQ1 - DQ851 History of Switzerland|DQ20.5 - DQ26 Description and travel",40,
        "D - History (General) and History of Europe|DQ1 - DQ851 History of Switzerland|DQ30 - DQ49.5 Antiquities. Social life and customs. Ethnography",89,
        "D - History (General) and History of Europe|DQ1 - DQ851 History of Switzerland|DQ301 - DQ851 Local history and description",256,
        "D - History (General) and History of Europe|DQ1 - DQ851 History of Switzerland|DQ51 - DQ210 History",248,
        "D - History (General) and History of Europe|DQ1 - DQ851 History of Switzerland|DQ51 - DQ210 History|DQ51 - DQ57 General",57,
        "D - History (General) and History of Europe|DQ1 - DQ851 History of Switzerland|DQ51 - DQ210 History|DQ78 - DQ210 By period",134,
        "D - History (General) and History of Europe|DQ1 - DQ851 History of Switzerland|DQ51 - DQ210 History|DQ78 - DQ210 By period|DQ111 - DQ123 1516-1798",17,
        "D - History (General) and History of Europe|DQ1 - DQ851 History of Switzerland|DQ51 - DQ210 History|DQ78 - DQ210 By period|DQ124 - DQ191 19th century",37,
        "D - History (General) and History of Europe|DQ1 - DQ851 History of Switzerland|DQ51 - DQ210 History|DQ78 - DQ210 By period|DQ201 - DQ210 20th century",50,
        "D - History (General) and History of Europe|DQ1 - DQ851 History of Switzerland|DQ51 - DQ210 History|DQ78 - DQ210 By period|DQ78 - DQ110 Early and medieval to 1516",26,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula",10916,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR1202 - DR2285 Yugoslavia",3295,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR1202 - DR2285 Yugoslavia|DR1232 - DR1321 History",1031,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR1202 - DR2285 Yugoslavia|DR1232 - DR1321 History|DR1259 - DR1321 By period",918,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR1202 - DR2285 Yugoslavia|DR1232 - DR1321 History|DR1259 - DR1321 By period|DR1259 - DR1265 Early and medieval to 1500",1,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR1202 - DR2285 Yugoslavia|DR1232 - DR1321 History|DR1259 - DR1321 By period|DR1266 - DR1272 1500-1800",1,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR1202 - DR2285 Yugoslavia|DR1232 - DR1321 History|DR1259 - DR1321 By period|DR1273 - DR1280 1800-1918",19,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR1202 - DR2285 Yugoslavia|DR1232 - DR1321 History|DR1259 - DR1321 By period|DR1281 - DR1321 -1918",895,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR1202 - DR2285 Yugoslavia|DR1232 - DR1321 History|DR1259 - DR1321 By period|DR1281 - DR1321 -1918|DR1313 - DR1313.8 Yugoslav War, 1991-1995",436,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR1202 - DR2285 Yugoslavia|DR1350 - DR2285 Local history and description",2122,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR201 - DR296 Romania",1267,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR201 - DR296 Romania|DR215 - DR269.6 History",704,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR201 - DR296 Romania|DR215 - DR269.6 History|DR238 - DR269.6 By period",517,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR201 - DR296 Romania|DR215 - DR269.6 History|DR238 - DR269.6 By period|DR238 - DR240.5 Early and medieval to 1601. Roman period",70,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR201 - DR296 Romania|DR215 - DR269.6 History|DR238 - DR269.6 By period|DR241 - DR241.5 Phanariote regime, 1601-1822",28,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR201 - DR296 Romania|DR215 - DR269.6 History|DR238 - DR269.6 By period|DR242 - DR249 1822-1881. 19th century",60,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR201 - DR296 Romania|DR215 - DR269.6 History|DR238 - DR269.6 By period|DR250 - DR266.5 1866/1881-1944",151,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR201 - DR296 Romania|DR215 - DR269.6 History|DR238 - DR269.6 By period|DR267 - DR267.5 1944-1989",78,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR201 - DR296 Romania|DR215 - DR269.6 History|DR238 - DR269.6 By period|DR268 - DR269.6 -1989",41,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR201 - DR296 Romania|DR279 - DR296 Local history and description",232,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR32 - DR48.5 History. Balkan War, 1912-1913",536,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR401 - DR741 Turkey",2840,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR401 - DR741 Turkey|DR436 - DR605 History",1744,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR401 - DR741 Turkey|DR436 - DR605 History|DR481 - DR605 By period",1181,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR401 - DR741 Turkey|DR436 - DR605 History|DR481 - DR605 By period|DR485 - DR555.7 1281/1453-1789. Fall of Constantinople, 1453",386,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR401 - DR741 Turkey|DR436 - DR605 History|DR481 - DR605 By period|DR556 - DR567 1789-1861. 19th century",95,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR401 - DR741 Turkey|DR436 - DR605 History|DR481 - DR605 By period|DR568 - DR575 1861-1909. War with Russia, 1877-1878",178,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR401 - DR741 Turkey|DR436 - DR605 History|DR481 - DR605 By period|DR576 - DR605 20th century. Constitutional movement",488,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR401 - DR741 Turkey|DR701 - DR741 Local history and description (European Turkey)",439,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR50 - DR50.84 Thrace",31,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR51 - DR98 Bulgaria",1309,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR51 - DR98 Bulgaria|DR65 - DR93.47 History",900,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR51 - DR98 Bulgaria|DR65 - DR93.47 History|DR73.7 - DR93.47 By period",668,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR51 - DR98 Bulgaria|DR65 - DR93.47 History|DR73.7 - DR93.47 By period|DR73.7 - DR80.8 Early and medieval",100,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR51 - DR98 Bulgaria|DR65 - DR93.47 History|DR73.7 - DR93.47 By period|DR81 - DR84 Turkish rule, 1396-1878",183,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR51 - DR98 Bulgaria|DR65 - DR93.47 History|DR73.7 - DR93.47 By period|DR84.9 - DR89.8 1878-1944",194,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR51 - DR98 Bulgaria|DR65 - DR93.47 History|DR73.7 - DR93.47 By period|DR89.9 - DR93.34 1944-1990",102,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR51 - DR98 Bulgaria|DR65 - DR93.47 History|DR73.7 - DR93.47 By period|DR93.4 - DR93.47 -1990",86,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR51 - DR98 Bulgaria|DR95 - DR98 Local history and description",75,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR901 - DR998 Albania",197,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR901 - DR998 Albania|DR927 - DR978.52 History",115,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR901 - DR998 Albania|DR927 - DR978.52 History|DR954 - DR978.52 By period",76,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR901 - DR998 Albania|DR927 - DR978.52 History|DR954 - DR978.52 By period|DR954 - DR960.5 To 1501",8,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR901 - DR998 Albania|DR927 - DR978.52 History|DR954 - DR978.52 By period|DR961 - DR969 1501-1912. Turkish rule",13,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR901 - DR998 Albania|DR927 - DR978.52 History|DR954 - DR978.52 By period|DR969.8 - DR978.52 20th century",55,
        "D - History (General) and History of Europe|DR1 - DR2285 History of Balkan Peninsula|DR901 - DR998 Albania|DR996 - DR998 Local history and description",5,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia",105141,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS101 - DS151 Israel (Palestine). The Jews",18087,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS101 - DS151 Israel (Palestine). The Jews|DS133 - DS151 Jews outside of Palestine",10023,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS13 - DS28 Ethnography",626,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS153 - DS154.9 Jordan. Transjordan",276,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS155 - DS156 Asia Minor",102,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS161 - DS195.5 Armenia",345,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS201 - DS248 Arabian Peninsula. Saudi Arabia",1663,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS251 - DS326 Iran (Persia)",3167,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS31 - DS35.2 History",731,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS327 - DS329.4 Central Asia",217,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS331 - DS349.9 Southern Asia. Indian Ocean Region",583,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS331 - DS349.9 Southern Asia. Indian Ocean Region|DS349.8 - DS349.9 Islands of the Indian Ocean",6,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS35.3 - DS35.77 The Islamic World",326,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS350 - DS375 Afghanistan",1274,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS36 - DS39.2 Arab countries",1436,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS36 - DS39.2 Arab countries|DS37 - DS39.2 History",769,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS376 - DS392.2 Pakistan",890,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS393 - DS396.9 Bangladesh. East Pakistan",200,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS401 - DS486.8 India (Bharat)",12349,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS401 - DS486.8 India (Bharat)|DS430 - DS432 Ethnography. Sects",103,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS401 - DS486.8 India (Bharat)|DS433 - DS481 History",4299,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS401 - DS486.8 India (Bharat)|DS483 - DS486.8 Local history and description",3264,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS41 - DS66 Middle East. Southwestern Asia. Ancient Orient. Arab East. Near East",4681,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS41 - DS66 Middle East. Southwestern Asia. Ancient Orient. Arab East. Near East|DS51 - DS54.95 Local history and description",834,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS41 - DS66 Middle East. Southwestern Asia. Ancient Orient. Arab East. Near East|DS51 - DS54.95 Local history and description|DS54 - DS54.95 Cyprus",518,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS488 - DS490 Sri Lanka",348,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS491 - DS492.9 Bhutan",55,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS493 - DS495.8 Nepal",204,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS498 - DS498.8 Goa. Portuguese in India",110,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS5.95 - DS10 Description and travel",127,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS501 - DS518.9 East Asia. The Far East",1636,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS520 - DS560.72 Southeastern Asia",5142,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS520 - DS560.72 Southeastern Asia|DS524 - DS526.7 History",325,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS520 - DS560.72 Southeastern Asia|DS527 - DS530.9 Burma",406,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS520 - DS560.72 Southeastern Asia|DS531 - DS560.72 French Indochina",3901,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS520 - DS560.72 Southeastern Asia|DS531 - DS560.72 French Indochina|DS541 - DS553.7 History",234,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS520 - DS560.72 Southeastern Asia|DS531 - DS560.72 French Indochina|DS554 - DS554.98 Cambodia",325,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS520 - DS560.72 Southeastern Asia|DS531 - DS560.72 French Indochina|DS555 - DS555.98 Laos",112,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS520 - DS560.72 Southeastern Asia|DS531 - DS560.72 French Indochina|DS556 - DS559.93 Vietnam. Annam",3034,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS520 - DS560.72 Southeastern Asia|DS531 - DS560.72 French Indochina|DS556 - DS559.93 Vietnam. Annam|DS557 - DS559.9 Vietnamese Conflict",2416,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS520 - DS560.72 Southeastern Asia|DS531 - DS560.72 French Indochina|DS560 - DS560.72 Democratic Republic (North Vietnam), 1945-",37,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS561 - DS589 Thailand (Siam)",553,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS591 - DS599 Malaysia. Malay Peninsula. Straits Settlements",921,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS591 - DS599 Malaysia. Malay Peninsula. Straits Settlements|DS597.33 - DS597.34 Sabah. British North Borneo",21,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS591 - DS599 Malaysia. Malay Peninsula. Straits Settlements|DS597.36 - DS597.39 Sarawak",61,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS600 - DS605 Malay Archipelago",36,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS608 - DS610.9 Singapore",288,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS611 - DS649 Indonesia (Dutch East Indies)",1540,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS611 - DS649 Indonesia (Dutch East Indies)|DS631 - DS632 Ethnography",8,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS611 - DS649 Indonesia (Dutch East Indies)|DS633 - DS644.46 History",460,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS611 - DS649 Indonesia (Dutch East Indies)|DS646.1 - DS646.15 Sumatra",15,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS611 - DS649 Indonesia (Dutch East Indies)|DS646.17 - DS646.29 Java",88,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS611 - DS649 Indonesia (Dutch East Indies)|DS646.3 - DS646.34 Borneo. Kalimantan, Indonesia",88,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS611 - DS649 Indonesia (Dutch East Indies)|DS646.4 - DS646.49 Celebes. Sulawesi",15,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS611 - DS649 Indonesia (Dutch East Indies)|DS646.5 - DS646.59 Timor",52,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS611 - DS649 Indonesia (Dutch East Indies)|DS646.6 - DS646.69 Moluccas. Maluku",25,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS650 - DS650.99 Brunei",26,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS651 - DS689 Philippines",1047,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS67 - DS79.9 Iraq (Assyria, Babylonia, Mesopotamia)",2798,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS701 - DS799.9 China",31292,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS701 - DS799.9 China|DS730 - DS731 Ethnography",293,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS701 - DS799.9 China|DS733 - DS779.32 History",17010,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS701 - DS799.9 China|DS781 - DS796 Local history and description",3773,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS701 - DS799.9 China|DS781 - DS796 Local history and description|DS781 - DS784.2 Manchuria",259,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS701 - DS799.9 China|DS781 - DS796 Local history and description|DS785 - DS786 Tibet",331,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS701 - DS799.9 China|DS798.92 - DS799.9 Taiwan",2385,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS80 - DS90 Lebanon (Phenicia)",796,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS801 - DS897 Japan",4294,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS801 - DS897 Japan|DS833 - DS891.5 History",2083,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS801 - DS897 Japan|DS894.21 - DS897 Local history and description",554,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS901 - DS937 Korea",3019,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS901 - DS937 Korea|DS904.8 - DS922.46 History",1872,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS901 - DS937 Korea|DS904.8 - DS922.46 History|DS918 - DS921.8 War and intervention, 1950-1953",649,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS901 - DS937 Korea|DS924 - DS925 Local history and description",84,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS901 - DS937 Korea|DS930 - DS937 Democratic People's Republic, 1948-",467,
        "D - History (General) and History of Europe|DS1 - DS937 History of Asia|DS92 - DS99 Syria",693,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa",30529,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT1001 - DT1190 Southern Africa",263,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT1251 - DT1465 Angola",202,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT15 - DT16 Ethnography",111,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT1501 - DT1685 Namibia. South-West Africa",162,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT154.1 - DT159.9 Sudan. Anglo-Egyptian Sudan",723,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT160 - DT177 North Africa",259,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT160 - DT177 North Africa|DT167 - DT176 History",176,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT160 - DT177 North Africa|DT167 - DT176 History|DT168 - DT169.5 Carthaginian period",30,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT17 - DT39 History",2406,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT1701 - DT2405 South Africa",1525,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT1701 - DT2405 South Africa|DT1754 - DT1770 Ethnography",353,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT1701 - DT2405 South Africa|DT1772 - DT1974 History",808,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT1701 - DT2405 South Africa|DT1991 - DT2054 Cape Province. Cape of Good Hope",28,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT1701 - DT2405 South Africa|DT2075 - DT2145 Orange Free State. Oranje Vrystaat",3,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT1701 - DT2405 South Africa|DT2181 - DT2278 KwaZulu-Natal. Natal",17,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT1701 - DT2405 South Africa|DT2291 - DT2378 Transvaal. South African Republic",16,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT179.2 - DT179.9 Northwest Africa",6,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT181 - DT346 Maghrib. Barbery States",3136,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT181 - DT346 Maghrib. Barbery States|DT211 - DT239 Libya",371,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT181 - DT346 Maghrib. Barbery States|DT241 - DT269 Tunisia (Tunis)",343,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT181 - DT346 Maghrib. Barbery States|DT271 - DT299 Algeria",1033,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT181 - DT346 Maghrib. Barbery States|DT301 - DT330 Morocco",612,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT181 - DT346 Maghrib. Barbery States|DT331 - DT346 Sahara",128,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT2421 - DT2525 Botswana. Bechuanaland",67,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT2541 - DT2686 Lesotho. Basutoland",25,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT2701 - DT2825 Swaziland",13,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT2831 - DT2864 British Central Africa. Federation of Rhodesia and Nyasaland",1,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT2871 - DT3025 Zimbabwe. Southern Rhodesia",249,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT3031 - DT3145 Zambia. Northern Rhodesia",92,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT3161 - DT3257 Malawi. Nyasaland",62,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT3291 - DT3415 Mozambique",131,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT348 - DT363.3 Central Sub-Saharan Africa",810,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT365 - DT469 Eastern Africa",3379,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT365 - DT469 Eastern Africa|DT367 - DT367.8 Northeast Africa",32,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT365 - DT469 Eastern Africa|DT371 - DT390 Ethiopia (Abyssinia)",549,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT365 - DT469 Eastern Africa|DT391 - DT398 Eritrea",98,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT365 - DT469 Eastern Africa|DT401 - DT409 Somalia. Somaliland and adjacent territory",208,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT365 - DT469 Eastern Africa|DT411 - DT411.9 Djibouti. French Territory of the Afars and Issas. French Somaliland",33,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT365 - DT469 Eastern Africa|DT421 - DT432.5 East Africa. British East Africa",165,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT365 - DT469 Eastern Africa|DT433.2 - DT433.29 Uganda",205,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT365 - DT469 Eastern Africa|DT433.5 - DT434 Kenya",474,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT365 - DT469 Eastern Africa|DT436 - DT449 Tanzania. Tanganyika. German East Africa",287,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT365 - DT469 Eastern Africa|DT450 - DT450.49 Rwanda. Ruanda-Urundi",399,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT365 - DT469 Eastern Africa|DT450.5 - DT450.95 Burundi",69,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT365 - DT469 Eastern Africa|DT468 - DT469 Islands (East African coast)",17,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT43 - DT154 Egypt",4504,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT43 - DT154 Egypt|DT115 - DT154 Local history and description",336,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT43 - DT154 Egypt|DT115 - DT154 Local history and description|DT139 - DT153.5 Cairo",96,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT43 - DT154 Egypt|DT56.8 - DT69.5 Antiquities",1113,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT43 - DT154 Egypt|DT56.8 - DT69.5 Antiquities|DT63 - DT63.5 Pyramids",74,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT43 - DT154 Egypt|DT56.8 - DT69.5 Antiquities|DT68 - DT68.8 Religious antiquities",11,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT43 - DT154 Egypt|DT74 - DT107.87 History",1634,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast",7510,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT491 - DT516.9 British West Africa",1956,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT491 - DT516.9 British West Africa|DT509 - DT509.9 Gambia",70,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT491 - DT516.9 British West Africa|DT509.97 - DT512.9 Ghana (Gold Coast)",459,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT491 - DT516.9 British West Africa|DT515 - DT515.9 Nigeria",843,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT491 - DT516.9 British West Africa|DT516 - DT516.9 Sierra Leone",221,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT521 - DT555.9 French West Africa. French Sahara. West Sahara. Sahel",2443,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT521 - DT555.9 French West Africa. French Sahara. West Sahara. Sahel|DT541 - DT541.9 Benin. Dahomey",179,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT521 - DT555.9 French West Africa. French Sahara. West Sahara. Sahel|DT543 - DT543.9 Guinea",106,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT521 - DT555.9 French West Africa. French Sahara. West Sahara. Sahel|DT545 - DT545.9 Cote d'Ivoire. Ivory Coast",303,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT521 - DT555.9 French West Africa. French Sahara. West Sahara. Sahel|DT546.1 - DT546.49 French-speaking Equatorial Africa",392,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT521 - DT555.9 French West Africa. French Sahara. West Sahara. Sahel|DT546.1 - DT546.49 French-speaking Equatorial Africa|DT546.1 - DT546.19 Gabon (Gaboon, Gabun)",87,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT521 - DT555.9 French West Africa. French Sahara. West Sahara. Sahel|DT546.1 - DT546.49 French-speaking Equatorial Africa|DT546.2 - DT546.29 Congo (Brazaville). Middle Congo",99,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT521 - DT555.9 French West Africa. French Sahara. West Sahara. Sahel|DT546.1 - DT546.49 French-speaking Equatorial Africa|DT546.3 - DT546.39 Central African Republic. Central African Empire. Ubangi-Shari",66,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT521 - DT555.9 French West Africa. French Sahara. West Sahara. Sahel|DT546.1 - DT546.49 French-speaking Equatorial Africa|DT546.4 - DT546.49 Chad (Tchad)",126,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT521 - DT555.9 French West Africa. French Sahara. West Sahara. Sahel|DT547 - DT547.9 Niger",153,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT521 - DT555.9 French West Africa. French Sahara. West Sahara. Sahel|DT549 - DT549.9 Senegal",279,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT521 - DT555.9 French West Africa. French Sahara. West Sahara. Sahel|DT551 - DT551.9 Mali. Mali Federation. Sudanese Republic. French Sudan",220,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT521 - DT555.9 French West Africa. French Sahara. West Sahara. Sahel|DT554 - DT554.9 Mauritania",112,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT521 - DT555.9 French West Africa. French Sahara. West Sahara. Sahel|DT555 - DT555.9 Burkina Faso. Upper Volta",138,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT561 - DT581 Cameroon (Cameroun, Kamerun)",509,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT582 - DT582.9 Togo. Togoland",102,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT591 - DT615.9 Portuguese-speaking West Africa",392,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT591 - DT615.9 Portuguese-speaking West Africa|DT613 - DT613.9 Guinea-Bissau. Portuguese Guinea",117,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT591 - DT615.9 Portuguese-speaking West Africa|DT615 - DT615.9 Sao Tome and Principe",18,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT619 - DT620.9 Spanish West Africa",69,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT619 - DT620.9 Spanish West Africa|DT620 - DT620.9 Equatorial Guinea (Spanish Guinea)",55,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT621 - DT637 Liberia",271,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT641 - DT665 Zaire. Congo (Democratic Republic). Belgian Congo",1140,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT470 - DT671 West Africa. West Coast|DT669 - DT671 Islands",4,
        "D - History (General) and History of Europe|DT1 - DT3415 History of Africa|DT7 - DT12.25 Description and travel",174,
        "D - History (General) and History of Europe|DU1 - DU950 History of Oceania (South Seas)",5682,
        "D - History (General) and History of Europe|DU1 - DU950 History of Oceania (South Seas)|DU28.11 - DU68 History",207,
        "D - History (General) and History of Europe|DU1 - DU950 History of Oceania (South Seas)|DU400 - DU430 New Zealand",633,
        "D - History (General) and History of Europe|DU1 - DU950 History of Oceania (South Seas)|DU400 - DU430 New Zealand|DU419 - DU422 History",206,
        "D - History (General) and History of Europe|DU1 - DU950 History of Oceania (South Seas)|DU400 - DU430 New Zealand|DU422.5 - DU424.5 Ethnography",228,
        "D - History (General) and History of Europe|DU1 - DU950 History of Oceania (South Seas)|DU400 - DU430 New Zealand|DU428 - DU430 Local history and description",4,
        "D - History (General) and History of Europe|DU1 - DU950 History of Oceania (South Seas)|DU520 - DU950 Smaller Island Groups",1727,
        "D - History (General) and History of Europe|DU1 - DU950 History of Oceania (South Seas)|DU520 - DU950 Smaller Island Groups|DU620 - DU629 Hawaiian Islands. Hawaii",517,
        "D - History (General) and History of Europe|DU1 - DU950 History of Oceania (South Seas)|DU80 - DU398 Australia",2520,
        "D - History (General) and History of Europe|DU1 - DU950 History of Oceania (South Seas)|DU80 - DU398 Australia|DU108 - DU117.2 History",702,
        "D - History (General) and History of Europe|DU1 - DU950 History of Oceania (South Seas)|DU80 - DU398 Australia|DU120 - DU125 Ethnography",617,
        "D - History (General) and History of Europe|DU1 - DU950 History of Oceania (South Seas)|DU80 - DU398 Australia|DU150 - DU180 New South Wales",123,
        "D - History (General) and History of Europe|DU1 - DU950 History of Oceania (South Seas)|DU80 - DU398 Australia|DU182 - DU198 Tasmania. Van Diemen's Land",26,
        "D - History (General) and History of Europe|DU1 - DU950 History of Oceania (South Seas)|DU80 - DU398 Australia|DU200 - DU230 Victoria",100,
        "D - History (General) and History of Europe|DU1 - DU950 History of Oceania (South Seas)|DU80 - DU398 Australia|DU250 - DU280 Queensland",81,
        "D - History (General) and History of Europe|DU1 - DU950 History of Oceania (South Seas)|DU80 - DU398 Australia|DU300 - DU330 South Australia",44,
        "D - History (General) and History of Europe|DU1 - DU950 History of Oceania (South Seas)|DU80 - DU398 Australia|DU350 - DU380 Western Australia",47,
        "D - History (General) and History of Europe|DU1 - DU950 History of Oceania (South Seas)|DU80 - DU398 Australia|DU392 - DU398 Northern Territory of Australia",29,
        "D - History (General) and History of Europe|DX101 - DX301 History of Gypsies",570,
        "E - History: America",100150,
        "E - History: America|E11 - E143 America",21395,
        "E - History: America|E11 - E143 America|E101 - E135 Discovery of America and early explorations",1926,
        "E - History: America|E11 - E143 America|E101 - E135 Discovery of America and early explorations|E103 - E110 Pre-Columbian period",176,
        "E - History: America|E11 - E143 America|E101 - E135 Discovery of America and early explorations|E111 - E120 Columbus",600,
        "E - History: America|E11 - E143 America|E101 - E135 Discovery of America and early explorations|E121 - E135 Post-Columbian period. El Dorado",967,
        "E - History: America|E11 - E143 America|E11 - E29 General",454,
        "E - History: America|E11 - E143 America|E141 - E143 Descriptive accounts of America. Earliest to 1810",181,
        "E - History: America|E11 - E143 America|E31 - E49.3 North America",227,
        "E - History: America|E11 - E143 America|E51 - E73 Pre-Columbian America. The Indians",2198,
        "E - History: America|E11 - E143 America|E75 - E99 Indians of North America",9327,
        "E - History: America|E11 - E143 America|E75 - E99 Indians of North America|E81 - E83 Indian wars",104,
        "E - History: America|E151 - E889 United States",76972,
        "E - History: America|E151 - E889 United States|E151 - E169.13 General",5231,
        "E - History: America|E151 - E889 United States|E171 - E183.9 History",10257,
        "E - History: America|E151 - E889 United States|E171 - E183.9 History|E171 - E180 General",4254,
        "E - History: America|E151 - E889 United States|E171 - E183.9 History|E171 - E180 General|E175 - E175.7 Historiography",572,
        "E - History: America|E151 - E889 United States|E171 - E183.9 History|E171 - E180 General|E176 - E176.8 Biography",1058,
        "E - History: America|E151 - E889 United States|E171 - E183.9 History|E183 - E183.3 Political history",288,
        "E - History: America|E151 - E889 United States|E184 - E185.98 Elements in the population",17352,
        "E - History: America|E151 - E889 United States|E184 - E185.98 Elements in the population|E184.5 - E185.98 Afro-Americans",10224,
        "E - History: America|E151 - E889 United States|E184 - E185.98 Elements in the population|E184.5 - E185.98 Afro-Americans|E185.2 - E185.89 Status and development since emancipation",5940,
        "E - History: America|E151 - E889 United States|E184 - E185.98 Elements in the population|E184.5 - E185.98 Afro-Americans|E185.96 - E185.98 Biography. Genealogy",1901,
        "E - History: America|E151 - E889 United States|E186 - E199 Colonial history (1607-1775)",686,
        "E - History: America|E151 - E889 United States|E186 - E199 Colonial history (1607-1775)|E186 - E189 General",501,
        "E - History: America|E151 - E889 United States|E186 - E199 Colonial history (1607-1775)|E191 - E199 By period",171,
        "E - History: America|E151 - E889 United States|E186 - E199 Colonial history (1607-1775)|E191 - E199 By period|E195 - E199 1689-1775",133,
        "E - History: America|E151 - E889 United States|E201 - E298 The Revolution, 1775-1783",4177,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861",11976,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E300 - E302.6 General",580,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E300 - E302.6 General|E302.5 - E302.6 Biography (Late eighteenth century)",102,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period",6035,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E303 - E309 1775-1789. The Confederation, 1783-1789",80,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E310 - E337 1789-1809. Constitutional period",1855,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E310 - E337 1789-1809. Constitutional period|E311 - E320 Washington's administrations, 1789-1797",903,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E310 - E337 1789-1809. Constitutional period|E321 - E330 John Adams' administration, 1797-1801",197,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E310 - E337 1789-1809. Constitutional period|E331 - E337 Jefferson's administrations, 1801-1809",626,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E310 - E337 1789-1809. Constitutional period|E331 - E337 Jefferson's administrations, 1801-1809|E336 - E336.5 Neutral trade and its restrictions, 1800-1810",21,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E337.8 - E400 Early nineteenth century, 1801/1809-1845",2210,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E337.8 - E400 Early nineteenth century, 1801/1809-1845|E337.8 - E340 General",223,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E337.8 - E400 Early nineteenth century, 1801/1809-1845|E337.8 - E340 General|E339 - E340 Biography",26,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E337.8 - E400 Early nineteenth century, 1801/1809-1845|E341 - E370 Madison's administrations, 1809-1817",787,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E337.8 - E400 Early nineteenth century, 1801/1809-1845|E341 - E370 Madison's administrations, 1809-1817|E351.5 - E364.9 War of 1812",623,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E337.8 - E400 Early nineteenth century, 1801/1809-1845|E371 - E375 Monroe's administrations, 1817-1825",75,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E337.8 - E400 Early nineteenth century, 1801/1809-1845|E376 - E380 John Quincy Adams' administration, 1825-1829",81,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E337.8 - E400 Early nineteenth century, 1801/1809-1845|E381 - E385 Jackson's administrations, 1829-1837",396,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E337.8 - E400 Early nineteenth century, 1801/1809-1845|E386 - E390 Van Buren's administration, 1837-1841",58,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E337.8 - E400 Early nineteenth century, 1801/1809-1845|E391 - E393 William H. Harrison's administration, March 4-April 4, 1841",51,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E337.8 - E400 Early nineteenth century, 1801/1809-1845|E396 - E400 Tyler's administration, April 4, 1841-1845",68,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E401 - E415.3 Mexican War, 1846-1848",369,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E415.6 - E440.5 Middle nineteenth century, 1845/1848-1861",1479,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E415.6 - E440.5 Middle nineteenth century, 1845/1848-1861|E415.6 - E415.9 General",209,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E415.6 - E440.5 Middle nineteenth century, 1845/1848-1861|E415.6 - E415.9 General|E415.8 - E415.9 Biography",11,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E415.6 - E440.5 Middle nineteenth century, 1845/1848-1861|E416 - E420 Polk's administration, 1845-1849",118,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E415.6 - E440.5 Middle nineteenth century, 1845/1848-1861|E421 - E423 Taylor's administiration, 1849-July 9, 1850",37,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E415.6 - E440.5 Middle nineteenth century, 1845/1848-1861|E426 - E430 Fillmore's administration, July 9, 1850-1853",31,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E415.6 - E440.5 Middle nineteenth century, 1845/1848-1861|E431 - E435 Pierce's administration, 1853-1857",126,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E303 - E440.5 By period|E415.6 - E440.5 Middle nineteenth century, 1845/1848-1861|E436 - E440.5 Buchanan's administration, 1857-1861",254,
        "E - History: America|E151 - E889 United States|E300 - E453 Revolution to the Civil War, 1775/1783-1861|E441 - E453 Slavery in the United States. Antislavery movements",4227,
        "E - History: America|E151 - E889 United States|E456 - E655 Civil War period, 1861-1865",12982,
        "E - History: America|E151 - E889 United States|E456 - E655 Civil War period, 1861-1865|E456 - E459 Lincoln's administrations, 1861-April 15, 1865",1956,
        "E - History: America|E151 - E889 United States|E456 - E655 Civil War period, 1861-1865|E461 - E655 The Civil War, 1861-1865",10859,
        "E - History: America|E151 - E889 United States|E660 - E738 Late nineteenth century, 1865-1900",2354,
        "E - History: America|E151 - E889 United States|E660 - E738 Late nineteenth century, 1865-1900|E660 - E664 General",419,
        "E - History: America|E151 - E889 United States|E660 - E738 Late nineteenth century, 1865-1900|E660 - E664 General|E663 - E664 Biography",46,
        "E - History: America|E151 - E889 United States|E660 - E738 Late nineteenth century, 1865-1900|E666 - E670 Johnson's administration, April 15, 1865-1869",540,
        "E - History: America|E151 - E889 United States|E660 - E738 Late nineteenth century, 1865-1900|E671 - E680 Grant's administrations, 1869-1877",190,
        "E - History: America|E151 - E889 United States|E740 - E837.7 Twentieth century",6491,
        "E - History: America|E151 - E889 United States|E740 - E837.7 Twentieth century|E740 - E749 General",4151,
        "E - History: America|E151 - E889 United States|E740 - E837.7 Twentieth century|E740 - E749 General|E743 - E743.5 Political history",335,
        "E - History: America|E151 - E889 United States|E740 - E837.7 Twentieth century|E740 - E749 General|E744 - E744.5 Diplomatic history. Foreign and general relations",1084,
        "E - History: America|E151 - E889 United States|E740 - E837.7 Twentieth century|E740 - E749 General|E747 - E748 Biography",83,
        "E - History: America|E151 - E889 United States|E740 - E837.7 Twentieth century|E756 - E760 Theodore Roosevelt's administrations, September 14, 1901-1909",292,
        "E - History: America|E151 - E889 United States|E740 - E837.7 Twentieth century|E761 - E765 Tafts' administration, 1909-1913",41,
        "E - History: America|E151 - E889 United States|E740 - E837.7 Twentieth century|E766 - E783 Wilson's administrations, 1913-1921",307,
        "E - History: America|E151 - E889 United States|E740 - E837.7 Twentieth century|E784 - E805 1919-1933. Harding-Coolidge-Hoover era. The twenties",276,
        "E - History: America|E151 - E889 United States|E740 - E837.7 Twentieth century|E784 - E805 1919-1933. Harding-Coolidge-Hoover era. The twenties|E785 - E786 Harding's administration, 1921-August 2, 1923",13,
        "E - History: America|E151 - E889 United States|E740 - E837.7 Twentieth century|E784 - E805 1919-1933. Harding-Coolidge-Hoover era. The twenties|E791 - E796 Coolidge's administration, August 2, 1923-1929",53,
        "E - History: America|E151 - E889 United States|E740 - E837.7 Twentieth century|E784 - E805 1919-1933. Harding-Coolidge-Hoover era. The twenties|E801 - E805 Hoover's administration, 1919-1933",90,
        "E - History: America|E151 - E889 United States|E740 - E837.7 Twentieth century|E806 - E813 Franklin Delano Roosevelt's administrations, 1933-April 12, 1945",824,
        "E - History: America|E151 - E889 United States|E740 - E837.7 Twentieth century|E813 - E816 Truman's administrations, April 12, 1945-1953",285,
        "E - History: America|E151 - E889 United States|E740 - E837.7 Twentieth century|E835 - E837.7 Eisenhower's administrations, 1953-1961",276,
        "E - History: America|E151 - E889 United States|E838 - E889 Later twentieth century, 1961",5077,
        "E - History: America|E151 - E889 United States|E838 - E889 Later twentieth century, 1961|E838 - E840.8 General",1176,
        "E - History: America|E151 - E889 United States|E838 - E889 Later twentieth century, 1961|E838 - E840.8 General|E839.5 - E839.8 Political history",270,
        "E - History: America|E151 - E889 United States|E838 - E889 Later twentieth century, 1961|E838 - E840.8 General|E840 - E840.3 Diplomatic history. Foreign and general relations",555,
        "E - History: America|E151 - E889 United States|E838 - E889 Later twentieth century, 1961|E838 - E840.8 General|E840.6 - E840.8 Biography (General)",43,
        "E - History: America|E151 - E889 United States|E838 - E889 Later twentieth century, 1961|E841 - E843 Kennedy's administration, 1961-November 22, 1963",708,
        "E - History: America|E151 - E889 United States|E838 - E889 Later twentieth century, 1961|E846 - E851 Johnson's administrations, November 22, 1963-1969",228,
        "E - History: America|E151 - E889 United States|E838 - E889 Later twentieth century, 1961|E855 - E861 Nixon's administrations, 1969-August 9, 1974",396,
        "E - History: America|E151 - E889 United States|E838 - E889 Later twentieth century, 1961|E855 - E861 Nixon's administrations, 1969-August 9, 1974|E860 - E861 Watergate Affair. Resignation",93,
        "E - History: America|E151 - E889 United States|E838 - E889 Later twentieth century, 1961|E865 - E868 Ford's administration, August 9, 1974-1977",68,
        "E - History: America|E151 - E889 United States|E838 - E889 Later twentieth century, 1961|E872 - E875 Carter's administration, 1977-1981",172,
        "E - History: America|E151 - E889 United States|E838 - E889 Later twentieth century, 1961|E876 - E880 Reagan's administrations, 1981-1989",557,
        "E - History: America|E151 - E889 United States|E838 - E889 Later twentieth century, 1961|E881 - E884 Bush administration, 1989-1993",145,
        "E - History: America|E151 - E889 United States|E838 - E889 Later twentieth century, 1961|E885 - E889 Clinton administration, 1993-2001",393,
        "F - America: local history",117668,
        "F - America: local history|F1 - F975 United States local history",48075,
        "F - America: local history|F1 - F975 United States local history|F1 - F15 New England",526,
        "F - America: local history|F1 - F975 United States local history|F206 - F220 The South. South Atlantic States",1982,
        "F - America: local history|F1 - F975 United States local history|F296 - F301 Gulf States. West Florida",43,
        "F - America: local history|F1 - F975 United States local history|F476 - F485 Old Northwest. Northwest Territory",106,
        "F - America: local history|F1 - F975 United States local history|F590.3 - F596.3 The West. Trans-Mississippi Region. Great Plains",1739,
        "F - America: local history|F1 - F975 United States local history|F721 - F723 Rocky Mountains. Yellowstone National Park",98,
        "F - America: local history|F1 - F975 United States local history|F786 - F790 New Southwest. Colorado River, Canyon, and Valley",544,
        "F - America: local history|F1 - F975 United States local history|F850.5 - F851.5 Pacific States",77,
        "F - America: local history|F1001 - F1145.3 British America",4972,
        "F - America: local history|F1001 - F1145.3 British America|F1001 - F1145.3 Canada",4972,
        "F - America: local history|F1001 - F1145.3 British America|F1001 - F1145.3 Canada|F1001 - F1035 General",2177,
        "F - America: local history|F1001 - F1145.3 British America|F1001 - F1145.3 Canada|F1060 - F1060.97 Canadian Northwest. Northwest Territories",350,
        "F - America: local history|F1001 - F1145.3 British America|F1001 - F1145.3 Canada|F1121 - F1139 Newfoundland and Labrador",116,
        "F - America: local history|F1001 - F1145.3 British America|F1001 - F1145.3 Canada|F1121 - F1139 Newfoundland and Labrador|F1135 - F1139 Labrador",34,
        "F - America: local history|F1001 - F1145.3 British America|F1001 - F1145.3 Canada|F1141 - F1145.3 Nunavut",9,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America",64287,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F1201 - F1393 Mexico",9554,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F1201 - F1393 Mexico|F1218.5 - F1221 Antiquities. Indians",2865,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F1401 - F1419 Latin America (General)",5447,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F1421 - F1440 Central America",2859,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F1421 - F1440 Central America|F1435 - F1435.3 Mayas",1072,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F1601 - F1629 West Indies",312,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F2155 - F2191 Caribbean area. Caribbean Sea",605,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F2201 - F3799 South America",33668,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F2201 - F3799 South America|F2201 - F2239 General",2977,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F2201 - F3799 South America|F2251 - F2299 Colombia",2573,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F2201 - F3799 South America|F2301 - F2349 Venezuela",4382,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F2201 - F3799 South America|F2501 - F2659 Brazil",3469,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F2201 - F3799 South America|F2661 - F2699 Paraguay",1397,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F2201 - F3799 South America|F2701 - F2799 Uruguay",1441,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F2201 - F3799 South America|F2801 - F3021 Argentina",6934,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F2201 - F3799 South America|F3031 - F3031.5 Falkland Islands",160,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F2201 - F3799 South America|F3051 - F3285 Chile",3229,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F2201 - F3799 South America|F3301 - F3359 Bolivia",1320,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F2201 - F3799 South America|F3401 - F3619 Peru",3317,
        "F - America: local history|F1201 - F3799 Latin America. Spanish America|F2201 - F3799 South America|F3701 - F3799 Ecuador",994,
        "G - Geography. Anthropology. Recreation",135855,
        "G - Geography. Anthropology. Recreation|G1 - G922 Geography (General)",13697,
        "G - Geography. Anthropology. Recreation|G1 - G922 Geography (General)|G100.5 - G108.5 Toponymy",350,
        "G - Geography. Anthropology. Recreation|G1 - G922 Geography (General)|G149 - G180 Travel. Voyages and travels (General)",2966,
        "G - Geography. Anthropology. Recreation|G1 - G922 Geography (General)|G149 - G180 Travel. Voyages and travels (General)|G154.9 - G180 Travel and state, Tourist Trade",2709,
        "G - Geography. Anthropology. Recreation|G1 - G922 Geography (General)|G200 - G336 History of discoveries, explorations, and travel",722,
        "G - Geography. Anthropology. Recreation|G1 - G922 Geography (General)|G369 - G503 Special voyages and travels",1436,
        "G - Geography. Anthropology. Recreation|G1 - G922 Geography (General)|G521 - G539 Adventures, shipwrecks, buried treasure, etc.",714,
        "G - Geography. Anthropology. Recreation|G1 - G922 Geography (General)|G540 - G550 Seafaring life, ocean travel, etc.",186,
        "G - Geography. Anthropology. Recreation|G1 - G922 Geography (General)|G575 - G890 Arctic and Antarctic regions",1344,
        "G - Geography. Anthropology. Recreation|G1 - G922 Geography (General)|G80 - G99 History of geography",568,
        "G - Geography. Anthropology. Recreation|G1 - G922 Geography (General)|G905 - G910 Tropics (General)",10,
        "G - Geography. Anthropology. Recreation|G1000 - G3122 Atlases",4262,
        "G - Geography. Anthropology. Recreation|G1000 - G3122 Atlases|G1000 - G1000.5 Atlases of the moon, planets, etc.",12,
        "G - Geography. Anthropology. Recreation|G1000 - G3122 Atlases|G1001 - G1046 World atlases",677,
        "G - Geography. Anthropology. Recreation|G1000 - G3122 Atlases|G1050 - G1052 Northern and Southern Hemispheres",7,
        "G - Geography. Anthropology. Recreation|G1000 - G3122 Atlases|G1054 - G1055 Polar regions",1,
        "G - Geography. Anthropology. Recreation|G1000 - G3122 Atlases|G1059 - G1061 Maritime atlases (General)",15,
        "G - Geography. Anthropology. Recreation|G1000 - G3122 Atlases|G1100 - G3102 By region or country",3338,
        "G - Geography. Anthropology. Recreation|G1000 - G3122 Atlases|G1100 - G3102 By region or country|G1100 - G1779 America. Western Hemisphere",1400,
        "G - Geography. Anthropology. Recreation|G1000 - G3122 Atlases|G1100 - G3102 By region or country|G1100 - G1779 America. Western Hemisphere|G1100 - G1692 North America",1262,
        "G - Geography. Anthropology. Recreation|G1000 - G3122 Atlases|G1100 - G3102 By region or country|G1100 - G1779 America. Western Hemisphere|G1445 - G2739 Africa",138,
        "G - Geography. Anthropology. Recreation|G1000 - G3122 Atlases|G1100 - G3102 By region or country|G1780 - G2799 Eastern Hemisphere. Eurasia, Africa, etc.",1806,
        "G - Geography. Anthropology. Recreation|G1000 - G3122 Atlases|G1100 - G3102 By region or country|G1780 - G2799 Eastern Hemisphere. Eurasia, Africa, etc.|G1791 - G2082 Europe",754,
        "G - Geography. Anthropology. Recreation|G1000 - G3122 Atlases|G1100 - G3102 By region or country|G1780 - G2799 Eastern Hemisphere. Eurasia, Africa, etc.|G2110 - G2196 Former Soviet republics. Union of Soviet Socialist Republics. Russia (Empire)",139,
        "G - Geography. Anthropology. Recreation|G1000 - G3122 Atlases|G1100 - G3102 By region or country|G1780 - G2799 Eastern Hemisphere. Eurasia, Africa, etc.|G2200 - G2444.84 Asia",677,
        "G - Geography. Anthropology. Recreation|G1000 - G3122 Atlases|G1100 - G3102 By region or country|G1780 - G2799 Eastern Hemisphere. Eurasia, Africa, etc.|G2740 - G2799 Australasia",29,
        "G - Geography. Anthropology. Recreation|G1000 - G3122 Atlases|G1100 - G3102 By region or country|G2800 - G3064 Oceans (General)",120,
        "G - Geography. Anthropology. Recreation|G1000 - G3122 Atlases|G1100 - G3102 By region or country|G3100 - G3102 Antarctica",12,
        "G - Geography. Anthropology. Recreation|G3160 - G3171 Globes",5,
        "G - Geography. Anthropology. Recreation|G3180 - G9980 Maps",20432,
        "G - Geography. Anthropology. Recreation|G3180 - G9980 Maps|G3180 - G3182 Universe. Solar system",4,
        "G - Geography. Anthropology. Recreation|G3180 - G9980 Maps|G3190 - G3192 Celestial maps",3,
        "G - Geography. Anthropology. Recreation|G3180 - G9980 Maps|G3195 - G3199 Moon",31,
        "G - Geography. Anthropology. Recreation|G3180 - G9980 Maps|G3200 - G3202 World maps",394,
        "G - Geography. Anthropology. Recreation|G3180 - G9980 Maps|G3210 - G3222 Northern and Southern Hemispheres",8,
        "G - Geography. Anthropology. Recreation|G3180 - G9980 Maps|G3260 - G3272 Polar regions",30,
        "G - Geography. Anthropology. Recreation|G3180 - G9980 Maps|G3290 - G9880 By region or country",19866,
        "G - Geography. Anthropology. Recreation|G3180 - G9980 Maps|G3290 - G9880 By region or country|G3290 - G5668 America. Western Hemisphere",15033,
        "G - Geography. Anthropology. Recreation|G3180 - G9980 Maps|G3290 - G9880 By region or country|G3290 - G5668 America. Western Hemisphere|G3300 - G5184 North America",14612,
        "G - Geography. Anthropology. Recreation|G3180 - G9980 Maps|G3290 - G9880 By region or country|G3290 - G5668 America. Western Hemisphere|G5200 - G5668 South America",369,
        "G - Geography. Anthropology. Recreation|G3180 - G9980 Maps|G3290 - G9880 By region or country|G5670 - G9084 Eastern Hemisphere. Eurasia, Africa, etc.",4432,
        "G - Geography. Anthropology. Recreation|G3180 - G9980 Maps|G3290 - G9880 By region or country|G5670 - G9084 Eastern Hemisphere. Eurasia, Africa, etc.|G5700 - G6967 Europe",1371,
        "G - Geography. Anthropology. Recreation|G3180 - G9980 Maps|G3290 - G9880 By region or country|G5670 - G9084 Eastern Hemisphere. Eurasia, Africa, etc.|G7000 - G7342 Former Soviet republics. Union of Soviet Socialist Republics.  Russia (Empire)",274,
        "G - Geography. Anthropology. Recreation|G3180 - G9980 Maps|G3290 - G9880 By region or country|G5670 - G9084 Eastern Hemisphere. Eurasia, Africa, etc.|G7400 - G8198.54 Asia",1810,
        "G - Geography. Anthropology. Recreation|G3180 - G9980 Maps|G3290 - G9880 By region or country|G5670 - G9084 Eastern Hemisphere. Eurasia, Africa, etc.|G8200 - G8904 Africa",738,
        "G - Geography. Anthropology. Recreation|G3180 - G9980 Maps|G3290 - G9880 By region or country|G5670 - G9084 Eastern Hemisphere. Eurasia, Africa, etc.|G8950 - G9084 Australasia",190,
        "G - Geography. Anthropology. Recreation|GA1 - GA1776 Mathematical geography. Cartography",1763,
        "G - Geography. Anthropology. Recreation|GA1 - GA1776 Mathematical geography. Cartography|GA101 - GA1776 Cartography",1649,
        "G - Geography. Anthropology. Recreation|GA1 - GA1776 Mathematical geography. Cartography|GA101 - GA1776 Cartography|GA110 - GA115 Projection",38,
        "G - Geography. Anthropology. Recreation|GA1 - GA1776 Mathematical geography. Cartography|GA101 - GA1776 Cartography|GA125 - GA155 Map drawing, modeling, printing, reading, etc.",143,
        "G - Geography. Anthropology. Recreation|GA1 - GA1776 Mathematical geography. Cartography|GA101 - GA1776 Cartography|GA192 - GA197.3 Map libraries, collections of maps, globes, etc.",49,
        "G - Geography. Anthropology. Recreation|GA1 - GA1776 Mathematical geography. Cartography|GA101 - GA1776 Cartography|GA260 - GA288 Globe making, globes",9,
        "G - Geography. Anthropology. Recreation|GA1 - GA1776 Mathematical geography. Cartography|GA101 - GA1776 Cartography|GA300 - GA325 World maps, general atlases, etc.",87,
        "G - Geography. Anthropology. Recreation|GA1 - GA1776 Mathematical geography. Cartography|GA101 - GA1776 Cartography|GA341 - GA1776 Maps. By region or country",657,
        "G - Geography. Anthropology. Recreation|GA1 - GA1776 Mathematical geography. Cartography|GA51 - GA87 Surveys (General)",34,
        "G - Geography. Anthropology. Recreation|GB3 - GB5030 Physical geography",8433,
        "G - Geography. Anthropology. Recreation|GB3 - GB5030 Physical geography|GB111 - GB398.7 By region or country",460,
        "G - Geography. Anthropology. Recreation|GB3 - GB5030 Physical geography|GB400 - GB649 Geomorphology",2036,
        "G - Geography. Anthropology. Recreation|GB3 - GB5030 Physical geography|GB400 - GB649 Geomorphology|GB450 - GB460 Coasts",416,
        "G - Geography. Anthropology. Recreation|GB3 - GB5030 Physical geography|GB400 - GB649 Geomorphology|GB461 - GB468.99 Reefs",30,
        "G - Geography. Anthropology. Recreation|GB3 - GB5030 Physical geography|GB400 - GB649 Geomorphology|GB471 - GB478.99 Islands",50,
        "G - Geography. Anthropology. Recreation|GB3 - GB5030 Physical geography|GB400 - GB649 Geomorphology|GB500 - GB555 Mountains. Orography",83,
        "G - Geography. Anthropology. Recreation|GB3 - GB5030 Physical geography|GB400 - GB649 Geomorphology|GB561 - GB649 Other natural landforms: floodplains, caves, deserts, dunes, etc.",858,
        "G - Geography. Anthropology. Recreation|GB3 - GB5030 Physical geography|GB5000 - GB5030 Natural disasters",351,
        "G - Geography. Anthropology. Recreation|GB3 - GB5030 Physical geography|GB651 - GB2998 Hydrology. Water",5355,
        "G - Geography. Anthropology. Recreation|GB3 - GB5030 Physical geography|GB651 - GB2998 Hydrology. Water|GB980 - GB2998 Ground and surface waters",3429,
        "G - Geography. Anthropology. Recreation|GB3 - GB5030 Physical geography|GB651 - GB2998 Hydrology. Water|GB980 - GB2998 Ground and surface waters|GB1001 - GB1199.6 Groundwater. Hydrogeology",1249,
        "G - Geography. Anthropology. Recreation|GB3 - GB5030 Physical geography|GB651 - GB2998 Hydrology. Water|GB980 - GB2998 Ground and surface waters|GB1201 - GB1598 Rivers. Stream measurements",832,
        "G - Geography. Anthropology. Recreation|GB3 - GB5030 Physical geography|GB651 - GB2998 Hydrology. Water|GB980 - GB2998 Ground and surface waters|GB1601 - GB1798.9 Lakes. Limnology. Ponds. Lagoons",169,
        "G - Geography. Anthropology. Recreation|GB3 - GB5030 Physical geography|GB651 - GB2998 Hydrology. Water|GB980 - GB2998 Ground and surface waters|GB2401 - GB2598 Ice. Glaciers. Ice sheets. Sea ice",263,
        "G - Geography. Anthropology. Recreation|GB3 - GB5030 Physical geography|GB651 - GB2998 Hydrology. Water|GB980 - GB2998 Ground and surface waters|GB2601 - GB2798 Snow. Snow surveys",22,
        "G - Geography. Anthropology. Recreation|GB3 - GB5030 Physical geography|GB651 - GB2998 Hydrology. Water|GB980 - GB2998 Ground and surface waters|GB2801 - GB2998 Hydrometerology",21,
        "G - Geography. Anthropology. Recreation|GB3 - GB5030 Physical geography|GB651 - GB2998 Hydrology. Water|GB980 - GB2998 Ground and surface waters|GB980 - GB992 Watersheds. Runoff. Drainage",98,
        "G - Geography. Anthropology. Recreation|GC1 - GC1581 Oceanography",3531,
        "G - Geography. Anthropology. Recreation|GC1 - GC1581 Oceanography|GC100 - GC103 Seawater",22,
        "G - Geography. Anthropology. Recreation|GC1 - GC1581 Oceanography|GC1000 - GC1023 Marine resources. Applied oceanography",247,
        "G - Geography. Anthropology. Recreation|GC1 - GC1581 Oceanography|GC1080 - GC1581 Marine pollution. Seawater pollution",198,
        "G - Geography. Anthropology. Recreation|GC1 - GC1581 Oceanography|GC109 - GC149 Chemical oceanography",104,
        "G - Geography. Anthropology. Recreation|GC1 - GC1581 Oceanography|GC150 - GC182 Physical oceanography",63,
        "G - Geography. Anthropology. Recreation|GC1 - GC1581 Oceanography|GC170 - GC190 Environmental policy",5,
        "G - Geography. Anthropology. Recreation|GC1 - GC1581 Oceanography|GC190 - GC190.5 Ocean-atmosphere interaction",56,
        "G - Geography. Anthropology. Recreation|GC1 - GC1581 Oceanography|GC200 - GC376 Dynamics of the ocean",485,
        "G - Geography. Anthropology. Recreation|GC1 - GC1581 Oceanography|GC200 - GC376 Dynamics of the ocean|GC205 - GC226 Waves",183,
        "G - Geography. Anthropology. Recreation|GC1 - GC1581 Oceanography|GC200 - GC376 Dynamics of the ocean|GC228.5 - GC228.6 Ocean circulation",59,
        "G - Geography. Anthropology. Recreation|GC1 - GC1581 Oceanography|GC200 - GC376 Dynamics of the ocean|GC229 - GC296.8 Currents",78,
        "G - Geography. Anthropology. Recreation|GC1 - GC1581 Oceanography|GC200 - GC376 Dynamics of the ocean|GC297 - GC299 Water masses and ocean mixing",4,
        "G - Geography. Anthropology. Recreation|GC1 - GC1581 Oceanography|GC377 - GC399 Marine sediments",194,
        "G - Geography. Anthropology. Recreation|GC1 - GC1581 Oceanography|GC401 - GC881 Oceanography. By region",382,
        "G - Geography. Anthropology. Recreation|GC1 - GC1581 Oceanography|GC65 - GC78 Underwater exploration",61,
        "G - Geography. Anthropology. Recreation|GC1 - GC1581 Oceanography|GC70 - GC90 Environmental education",248,
        "G - Geography. Anthropology. Recreation|GC1 - GC1581 Oceanography|GC96 - GC97.8 Estuarine oceanography",102,
        "G - Geography. Anthropology. Recreation|GE1 - GE350 Environmental sciences",5035,
        "G - Geography. Anthropology. Recreation|GF1 - GF900 Human ecology. Anthropogeography",3653,
        "G - Geography. Anthropology. Recreation|GF1 - GF900 Human ecology. Anthropogeography|GF101 - GF127 Settlements",161,
        "G - Geography. Anthropology. Recreation|GF1 - GF900 Human ecology. Anthropogeography|GF500 - GF900 By region or country",1067,
        "G - Geography. Anthropology. Recreation|GF1 - GF900 Human ecology. Anthropogeography|GF53 - GF71 Environmental influences on humans",45,
        "G - Geography. Anthropology. Recreation|GN1 - GN890 Anthropology",23232,
        "G - Geography. Anthropology. Recreation|GN1 - GN890 Anthropology|GN301 - GN674 Ethnology. Social and cultural anthropology",11442,
        "G - Geography. Anthropology. Recreation|GN1 - GN890 Anthropology|GN301 - GN674 Ethnology. Social and cultural anthropology|GN357 - GN367 Culture and cultural processes",522,
        "G - Geography. Anthropology. Recreation|GN1 - GN890 Anthropology|GN301 - GN674 Ethnology. Social and cultural anthropology|GN378 - GN396 Collected dthnographies",501,
        "G - Geography. Anthropology. Recreation|GN1 - GN890 Anthropology|GN301 - GN674 Ethnology. Social and cultural anthropology|GN397 - GN397.5 Applied anthropology",8,
        "G - Geography. Anthropology. Recreation|GN1 - GN890 Anthropology|GN301 - GN674 Ethnology. Social and cultural anthropology|GN406 - GN517 Cultural traits, customs, and institutions",3885,
        "G - Geography. Anthropology. Recreation|GN1 - GN890 Anthropology|GN301 - GN674 Ethnology. Social and cultural anthropology|GN537 - GN673 Ethnic groups and races",4036,
        "G - Geography. Anthropology. Recreation|GN1 - GN890 Anthropology|GN49 - GN298 Physical anthropology. Somatology",2266,
        "G - Geography. Anthropology. Recreation|GN1 - GN890 Anthropology|GN49 - GN298 Physical anthropology. Somatology|GN269 - GN279 Race (General)",172,
        "G - Geography. Anthropology. Recreation|GN1 - GN890 Anthropology|GN49 - GN298 Physical anthropology. Somatology|GN281 - GN289 Human evolution",841,
        "G - Geography. Anthropology. Recreation|GN1 - GN890 Anthropology|GN49 - GN298 Physical anthropology. Somatology|GN51 - GN59 Anthropometry",179,
        "G - Geography. Anthropology. Recreation|GN1 - GN890 Anthropology|GN49 - GN298 Physical anthropology. Somatology|GN62.8 - GN263 Human variation",454,
        "G - Geography. Anthropology. Recreation|GN1 - GN890 Anthropology|GN700 - GN890 Prehistoric archaeology",5090,
        "G - Geography. Anthropology. Recreation|GR1 - GR950 Folklore",10211,
        "G - Geography. Anthropology. Recreation|GR1 - GR950 Folklore|GR420 - GR950 By subject",1296,
        "G - Geography. Anthropology. Recreation|GR1 - GR950 Folklore|GR420 - GR950 By subject|GR430 - GR487 Folklore relating to private life (including dreams, love, children, nursery rhymes, etc.)",109,
        "G - Geography. Anthropology. Recreation|GR1 - GR950 Folklore|GR420 - GR950 By subject|GR500 - GR615 Supernatural beings, demonology, fairies, ghosts, charms, etc.",438,
        "G - Geography. Anthropology. Recreation|GR1 - GR950 Folklore|GR420 - GR950 By subject|GR620 - GR640 Cosmic phenomena",22,
        "G - Geography. Anthropology. Recreation|GR1 - GR950 Folklore|GR420 - GR950 By subject|GR650 - GR690 Geographical topics",19,
        "G - Geography. Anthropology. Recreation|GR1 - GR950 Folklore|GR420 - GR950 By subject|GR700 - GR860 Animals, plants, and minerals",478,
        "G - Geography. Anthropology. Recreation|GR1 - GR950 Folklore|GR420 - GR950 By subject|GR865 - GR874 Transportation, travel, commerce, etc.",2,
        "G - Geography. Anthropology. Recreation|GR1 - GR950 Folklore|GR420 - GR950 By subject|GR890 - GR910 Occupations",14,
        "G - Geography. Anthropology. Recreation|GR1 - GR950 Folklore|GR420 - GR950 By subject|GR931 - GR935 Signs and symbols",9,
        "G - Geography. Anthropology. Recreation|GR1 - GR950 Folklore|GR420 - GR950 By subject|GR940 - GR941 Mythical places",14,
        "G - Geography. Anthropology. Recreation|GR1 - GR950 Folklore|GR72 - GR79 Folk literature (General)",378,
        "G - Geography. Anthropology. Recreation|GR1 - GR950 Folklore|GR99.6 - GR390 By region or country",7219,
        "G - Geography. Anthropology. Recreation|GT1 - GT7070 Manners and customs (General)",7610,
        "G - Geography. Anthropology. Recreation|GT1 - GT7070 Manners and customs (General)|GT170 - GT476 Houses. Dwellings",139,
        "G - Geography. Anthropology. Recreation|GT1 - GT7070 Manners and customs (General)|GT2400 - GT3390.5 Customs relative to private life (including children, marriage, eating and drinking, funeral customs, etc.)",2537,
        "G - Geography. Anthropology. Recreation|GT1 - GT7070 Manners and customs (General)|GT3400 - GT5090 Customs relative to public and social life (including town life, court life, festivals, holidays, ceremonies of royalty, etc.)",1887,
        "G - Geography. Anthropology. Recreation|GT1 - GT7070 Manners and customs (General)|GT495 - GT499 Human body and its parts. Personal beauty",182,
        "G - Geography. Anthropology. Recreation|GT1 - GT7070 Manners and customs (General)|GT500 - GT2370 Costume. Dress. Fashion",2466,
        "G - Geography. Anthropology. Recreation|GT1 - GT7070 Manners and customs (General)|GT5220 - GT5286 Customs relative to transportation and travel",39,
        "G - Geography. Anthropology. Recreation|GT1 - GT7070 Manners and customs (General)|GT5320 - GT6737 Customs relative to special classes",128,
        "G - Geography. Anthropology. Recreation|GT1 - GT7070 Manners and customs (General)|GT5320 - GT6737 Customs relative to special classes|GT5320 - GT5690 By birth, rank, etc.",3,
        "G - Geography. Anthropology. Recreation|GT1 - GT7070 Manners and customs (General)|GT5320 - GT6737 Customs relative to special classes|GT5750 - GT6390 By occupation",81,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure",29523,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV1199 - GV1570 Games and amusements",2096,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV1199 - GV1570 Games and amusements|GV1203 - GV1218 Children's games and amusements",165,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV1199 - GV1570 Games and amusements|GV1218.5 - GV1220.8 Toys",33,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV1199 - GV1570 Games and amusements|GV1221 - GV1469.62 Indoor games and amusements",1382,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV1199 - GV1570 Games and amusements|GV1221 - GV1469.62 Indoor games and amusements|GV1232 - GV1299 Card games: Poker, patience, whist, etc.",143,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV1199 - GV1570 Games and amusements|GV1221 - GV1469.62 Indoor games and amusements|GV1301 - GV1311 Gambling. Chance and banking games",54,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV1199 - GV1570 Games and amusements|GV1221 - GV1469.62 Indoor games and amusements|GV1312 - GV1469 Board games. Move games",346,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV1199 - GV1570 Games and amusements|GV1221 - GV1469.62 Indoor games and amusements|GV1469.15 - GV1469.62 Computer games. Video games. Fantasy games",753,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV1199 - GV1570 Games and amusements|GV1470 - GV1511 Parties. Party games and stunts",180,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV1199 - GV1570 Games and amusements|GV1470 - GV1511 Parties. Party games and stunts|GV1491 - GV1507 Puzzles",45,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV1199 - GV1570 Games and amusements|GV1541 - GV1561 Parlor magic and tricks",122,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV1199 - GV1570 Games and amusements|GV1564 - GV1565 Darts",1,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV1580 - GV1799.4 Dancing",4004,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV1800 - GV1860 Circuses, spectacles, etc. (including rodeos, waxworks, amusement parks, etc.)",519,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV181.35 - GV181.6 Recreation leadership. Administration of recreation services",161,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV182 - GV182.5 Recreational areas and facilities. Recreation centers",114,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV191.2 - GV200.66 Outdoor life. Outdoor recreation",1583,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV191.2 - GV200.66 Outdoor life. Outdoor recreation|GV191.68 - GV198.9 Camping",131,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV191.2 - GV200.66 Outdoor life. Outdoor recreation|GV198.94 - GV198.97 Dude ranches",7,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV191.2 - GV200.66 Outdoor life. Outdoor recreation|GV199 - GV199.6 Hiking. Pedestrian tours",674,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV191.2 - GV200.66 Outdoor life. Outdoor recreation|GV199.8 - GV200.3 Mountaineering",184,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV191.2 - GV200.66 Outdoor life. Outdoor recreation|GV200.4 - GV200.5 Orienteering. Wilderness survival",11,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV191.2 - GV200.66 Outdoor life. Outdoor recreation|GV200.6 - GV200.66 Caving. Spelunking",20,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV201 - GV555 Physical education and training",2974,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV201 - GV555 Physical education and training|GV346 - GV351.5 School and college athletics. Intramural and interscholastic athletics",230,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV201 - GV555 Physical education and training|GV401 - GV433 Physical education facilities. Sports facilities (including gymnasiums, athletic fields, playgrounds, etc.)",259,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV201 - GV555 Physical education and training|GV435 - GV436.7 Physical measurements. Physical tests, etc.",122,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV201 - GV555 Physical education and training|GV450 - GV451.4 Nudism. Sunbathing",10,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV201 - GV555 Physical education and training|GV460 - GV555 Gymnastics. Gymnastic exercises (including calisthenics, heavy exercises, acrobatics, etc.)",683,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV557 - GV1198.99 Sports",16522,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV557 - GV1198.99 Sports|GV1020 - GV1038.2 Automobile travel. Motoring. Automobile racing",406,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV557 - GV1198.99 Sports|GV1040 - GV1060.4 Cycling. Bicycling. Motorcycling",388,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV557 - GV1198.99 Sports|GV1060.5 - GV1098 Track and field athletics",532,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV557 - GV1198.99 Sports|GV1101 - GV1150.9 Fighting sports: Bullfighting, boxing, fencing, etc.",822,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV557 - GV1198.99 Sports|GV1151 - GV1190 Shooting. Archery",78,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV557 - GV1198.99 Sports|GV1195 - GV1198.99 Wrestling",171,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV557 - GV1198.99 Sports|GV712 - GV725 Athletic contests. Sports Events",1058,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV557 - GV1198.99 Sports|GV733 - GV734.5 Professionalism in sports. Professional sports (General)",24,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV557 - GV1198.99 Sports|GV743 - GV749 Athletic and sporting goods, supplies, etc.",27,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV557 - GV1198.99 Sports|GV750 - GV770.27 Air sports: Airplane flying, kiteflying, bungee-jumping, etc.",27,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV557 - GV1198.99 Sports|GV770.3 - GV840 Water sports: Canoeing, sailing, yachting, scuba diving, etc.",718,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV557 - GV1198.99 Sports|GV840.7 - GV857 Winter sports: Ice hockey, skiing, bobsledding, snowmobiling, etc.",439,
        "G - Geography. Anthropology. Recreation|GV1 - GV1860 Recreation. Leisure|GV557 - GV1198.99 Sports|GV861 - GV1017 Ball games: Baseball, football, golf, etc.",7385,
        "H - Social sciences",634882,
        "H - Social sciences|H1 - H99 Social sciences (General)",12981,
        "H - Social sciences|HA1 - HA4737 Statistics",7433,
        "H - Social sciences|HA1 - HA4737 Statistics|HA154 - HA4737 Statistical data",4166,
        "H - Social sciences|HA1 - HA4737 Statistics|HA154 - HA4737 Statistical data|HA154 - HA155 Universal statistics",38,
        "H - Social sciences|HA1 - HA4737 Statistics|HA154 - HA4737 Statistical data|HA175 - HA4737 By region or country",4055,
        "H - Social sciences|HA1 - HA4737 Statistics|HA29 - HA32 Theory and method of social science statistics",1895,
        "H - Social sciences|HA1 - HA4737 Statistics|HA36 - HA37 Statistical services. Statistical bureaus",40,
        "H - Social sciences|HA1 - HA4737 Statistics|HA38 - HA39 Registration of vital events. Vital records",39,
        "H - Social sciences|HB1 - HB3840 Economic theory. Demography",40062,
        "H - Social sciences|HB1 - HB3840 Economic theory. Demography|HB131 - HB147 Methodology",2340,
        "H - Social sciences|HB1 - HB3840 Economic theory. Demography|HB201 - HB206 Value. Utility",248,
        "H - Social sciences|HB1 - HB3840 Economic theory. Demography|HB221 - HB236 Price",615,
        "H - Social sciences|HB1 - HB3840 Economic theory. Demography|HB238 - HB251 Competition. Production. Wealth",253,
        "H - Social sciences|HB1 - HB3840 Economic theory. Demography|HB3711 - HB3840 Business cycles. Economic fluctuations",2256,
        "H - Social sciences|HB1 - HB3840 Economic theory. Demography|HB522 - HB715 Income. Factor shares",2092,
        "H - Social sciences|HB1 - HB3840 Economic theory. Demography|HB71 - HB74 Economics as a science. Relation to other subjects",864,
        "H - Social sciences|HB1 - HB3840 Economic theory. Demography|HB75 - HB130 History of economics",4988,
        "H - Social sciences|HB1 - HB3840 Economic theory. Demography|HB801 - HB843 Consumption. Demand",494,
        "H - Social sciences|HB1 - HB3840 Economic theory. Demography|HB846 - HB846.8 Welfare theory",260,
        "H - Social sciences|HB1 - HB3840 Economic theory. Demography|HB848 - HB3697 Demography. Population. Vital events",12607,
        "H - Social sciences|HC1 - HC1085 Economic history and conditions",71400,
        "H - Social sciences|HC1 - HC1085 Economic history and conditions|HC72 - HC88 Economic growth, development, planning",6974,
        "H - Social sciences|HC1 - HC1085 Economic history and conditions|HC94 - HC1085 By region or country",57598,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor",142025,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD101 - HD1395.5 Land use",8110,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD101 - HD1395.5 Land use|HD1241 - HD1339 Land tenure",900,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD101 - HD1395.5 Land use|HD1361 - HD1395.5 Real estate business",1053,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD1401 - HD2210 Agriculture",12497,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD1401 - HD2210 Agriculture|HD1428 - HD1431 International cooperation",35,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD1401 - HD2210 Agriculture|HD1470 - HD1476 Size of farms",129,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD1401 - HD2210 Agriculture|HD1483 - HD1486 Agricultural associations, societies, etc.",99,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD1401 - HD2210 Agriculture|HD1491 - HD1492.5 Cooperative agriculture",682,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD1401 - HD2210 Agriculture|HD1493 - HD1493.5 Government owned and operated farms. State farms. Sovkhozes",44,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD1401 - HD2210 Agriculture|HD1501 - HD1542 Agricultural classes (including farm tenancy, agricultural laborers",1366,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD1401 - HD2210 Agriculture|HD1635 - HD1702 Utilization and culture of special classes of lands (including pasture lands, water resources development)",2005,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD1401 - HD2210 Agriculture|HD1711 - HD1741 Irrigation",68,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD2321 - HD4730.9 Industry",12493,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD2321 - HD4730.9 Industry|HD2331 - HD2336 Home labor. Home-based businesses",28,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD2321 - HD4730.9 Industry|HD2337 - HD2339 Sweatshops",14,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD2321 - HD4730.9 Industry|HD2340.8 - HD2346.5 Small and medium-sized businesses, artisans, handicrafts, trades",1523,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD28 - HD70 Management. Industrial management",31893,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD4801 - HD8943 Labor. Work. Working class",42716,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD4801 - HD8943 Labor. Work. Working class|HD4861 - HD4895 Labor systems",537,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD4801 - HD8943 Labor. Work. Working class|HD4909 - HD5100.9 Wages",1662,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD4801 - HD8943 Labor. Work. Working class|HD5106 - HD5267 Hours of labor (including overtime, shift work, sick leave, vacations)",448,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD4801 - HD8943 Labor. Work. Working class|HD5306 - HD5474 Labor disputes. Strikes and lockouts",862,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD4801 - HD8943 Labor. Work. Working class|HD5481 - HD5630.7 Industrial arbitration. Mediation and conciliation",227,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD4801 - HD8943 Labor. Work. Working class|HD5650 - HD5660 Employee participation in management. Employee ownership. Industrial democracy. Works councils",272,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD4801 - HD8943 Labor. Work. Working class|HD5701 - HD6000.9 Labor market. Labor supply. Labor demand (including unemployment, manpower policy, occupational training, employment agencies)",5645,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD4801 - HD8943 Labor. Work. Working class|HD6050 - HD6305 Classes of labor (including women, children, students, middle-aged and older persons, minorities)",5384,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD4801 - HD8943 Labor. Work. Working class|HD6350 - HD6940.7 Trade unions. Labor unions. Worker's associations",4316,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD4801 - HD8943 Labor. Work. Working class|HD6941 - HD6948 Employers' associations",6,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD9000 - HD9999 Special industries and trades",28669,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD9000 - HD9999 Special industries and trades|HD9000 - HD9495 Agricultural industries",8243,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD9000 - HD9999 Special industries and trades|HD9502 - HD9502.5 Energy industries. Energy policy. Fuel trade",2821,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD9000 - HD9999 Special industries and trades|HD9506 - HD9624 Mineral industries. Metal trade",6211,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD9000 - HD9999 Special industries and trades|HD9650 - HD9663 Chemistry industries",430,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD9000 - HD9999 Special industries and trades|HD9665 - HD9675 Pharmaceutical industry",599,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD9000 - HD9999 Special industries and trades|HD9680 - HD9714 Mechanical industries (including electric utilities, electronic industries, and machinery)",4540,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD9000 - HD9999 Special industries and trades|HD9715 - HD9717.5 Construction industry",633,
        "H - Social sciences|HD28 - HD9999 Industries. Land use. Labor|HD9000 - HD9999 Special industries and trades|HD9720 - HD9975 Manufacturing industries",3908,
        "H - Social sciences|HE1 - HE9990 Transportation and communications",18695,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE1001 - HE5600 Railroads. Rapid transit systems",3004,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE199 - HE199.5 Freight (General)",178,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE305 - HE311 Urban transportation",819,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE323 - HE328 Transportation geography. Trade routes",48,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE331 - HE380 Traffic engineering. Roads and highways. Streets",2037,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE331 - HE380 Traffic engineering. Roads and highways. Streets|HE374 - HE377 Bridges",14,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE331 - HE380 Traffic engineering. Roads and highways. Streets|HE379 - HE380 Tunnels. Vehicular tunnels",1,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE380.8 - HE971 Water transportation",2207,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE380.8 - HE971 Water transportation|HE380.8 - HE560 Waterways",830,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE380.8 - HE971 Water transportation|HE561 - HE971 Shipping",1330,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE380.8 - HE971 Water transportation|HE561 - HE971 Shipping|HE730 - HE943 Merchant marine. Ocean shipping. Coastwise shipping",568,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE5601 - HE5725 Automotive transportation (including trucking, bus lines, and taxicab service)",2036,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE5746 - HE5749 Stage lines",5,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE5751 - HE5870 Ferries",20,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE5880 - HE5990 Express service",35,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE6000 - HE7500 Postal service. Stamps. Philately",690,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE8701 - HE9680.7 Telephone industry",295,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE9713 - HE9715 Cellular telephone services industry. Wireless telephone",82,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE9719 - HE9721 Artificial satellite telecommunications",25,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE9723 - HE9737 Signaling",2,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE9751 - HE9756 Messenger service",5,
        "H - Social sciences|HE1 - HE9990 Transportation and communications|HE9761 - HE9900 Air transportation. Airlines",840,
        "H - Social sciences|HF1 - HF6182 Commerce",59763,
        "H - Social sciences|HF1 - HF6182 Commerce|HF1021 - HF1027 Commercial geography. Economic geography",258,
        "H - Social sciences|HF1 - HF6182 Commerce|HF1040 - HF1054 Commodities. Commercial products",254,
        "H - Social sciences|HF1 - HF6182 Commerce|HF1701 - HF2701 Tariff. Free trade. Protectionism",1776,
        "H - Social sciences|HF1 - HF6182 Commerce|HF294 - HF343 Boards of trade. Chambers of commerce. Merchants' associations",169,
        "H - Social sciences|HF1 - HF6182 Commerce|HF3000 - HF4055 By region or country",4721,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business",35895,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5381 - HF5386 Vocational guidance. Career development",1698,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5387 - HF5387.5 Business ethics",876,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5410 - HF5417.5 Marketing. Disribution of products",7633,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5419 - HF5422 Wholesale trade",60,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5428 - HF5429.6 Retail trade",740,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5429.7 - HF5430.6 Shopping centers. Shopping malls",95,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5437 - HF5444 Purchasing. Selling. Sales personnel. Sales executives",1136,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5446 - HF5459 Canvassing. Peddling",17,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5460 - HF5469.5 Department stores. Mail order business. Supermarkets. Convenience stores",353,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5469.7 - HF5481 Markets. Fairs",323,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5482 - HF5482.4 Secondhand trade",15,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5482.6 - HF5482.65 Black market",6,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5484 - HF5495 Warehouses. Storage",52,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5520 - HF5541 Office equipment and supplies",15,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5546 - HF5548.6 Office management",3245,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5548.7 - HF5548.85 Industrial psychology",612,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5549 - HF5549.5 Personnel management. Employment management",2231,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5601 - HF5689 Accounting. Bookkeeping",5208,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5691 - HF5716 Business mathematics. Commercial arithmetic",247,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5717 - HF5734.7 Business communication",982,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5735 - HF5746 Business records management",183,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5761 - HF5780 Shipment of goods. Delivery of goods",116,
        "H - Social sciences|HF1 - HF6182 Commerce|HF5001 - HF6182 Business|HF5801 - HF6182 Advertising",3047,
        "H - Social sciences|HG1 - HG9999 Finance",47182,
        "H - Social sciences|HG1 - HG9999 Finance|HG1501 - HG3550 Banking",7535,
        "H - Social sciences|HG1 - HG9999 Finance|HG1501 - HG3550 Banking|HG1621 - HG1638 Interest rates. Interest tables",173,
        "H - Social sciences|HG1 - HG9999 Finance|HG1501 - HG3550 Banking|HG1641 - HG1643 Bank loans. Bank credit. Commercial loans",169,
        "H - Social sciences|HG1 - HG9999 Finance|HG1501 - HG3550 Banking|HG1685 - HG1704 Drafts. Checks",24,
        "H - Social sciences|HG1 - HG9999 Finance|HG1501 - HG3550 Banking|HG1706 - HG1708 Accounting. Bookkeeping",72,
        "H - Social sciences|HG1 - HG9999 Finance|HG1501 - HG3550 Banking|HG1710 - HG1710.5 Electronic funds transfers",221,
        "H - Social sciences|HG1 - HG9999 Finance|HG1501 - HG3550 Banking|HG1811 - HG2351 Special classes of banks and financial institutions",1487,
        "H - Social sciences|HG1 - HG9999 Finance|HG1501 - HG3550 Banking|HG2397 - HG3550 By region or country",3644,
        "H - Social sciences|HG1 - HG9999 Finance|HG201 - HG1496 Money",5692,
        "H - Social sciences|HG1 - HG9999 Finance|HG201 - HG1496 Money|HG451 - HG1496 By region or country",3024,
        "H - Social sciences|HG1 - HG9999 Finance|HG3691 - HG3769 Credit. Debt. Loans (including credit institutions, credit instruments, consumer credit, bankruptcy)",1078,
        "H - Social sciences|HG1 - HG9999 Finance|HG3810 - HG4000 Foreign exchange. International finance",10916,
        "H - Social sciences|HG1 - HG9999 Finance|HG3810 - HG4000 Foreign exchange. International finance|HG3879 - HG3898 International monetary system",6366,
        "H - Social sciences|HG1 - HG9999 Finance|HG4001 - HG4285 Finance management, Business finance. Corporation finance",3035,
        "H - Social sciences|HG1 - HG9999 Finance|HG4301 - HG4480.9 Trust services. Trust companies",71,
        "H - Social sciences|HG1 - HG9999 Finance|HG6105 - HG6270.9 Lotteries",59,
        "H - Social sciences|HG1 - HG9999 Finance|HG8011 - HG9999 Insurance",2855,
        "H - Social sciences|HG1 - HG9999 Finance|HG8011 - HG9999 Insurance|HG8053.5 - HG8054.45 Insurance for professions. Malpractice",23,
        "H - Social sciences|HG1 - HG9999 Finance|HG8011 - HG9999 Insurance|HG8075 - HG8107 Insurance business. Insurance management",141,
        "H - Social sciences|HG1 - HG9999 Finance|HG8011 - HG9999 Insurance|HG8111 - HG8123 Government policy. State supervision",20,
        "H - Social sciences|HG1 - HG9999 Finance|HG8011 - HG9999 Insurance|HG8205 - HG8220 Government insurance",11,
        "H - Social sciences|HG1 - HG9999 Finance|HG8011 - HG9999 Insurance|HG8501 - HG8745 By region or country",399,
        "H - Social sciences|HG1 - HG9999 Finance|HG8011 - HG9999 Insurance|HG8751 - HG9295 Life insurance",751,
        "H - Social sciences|HG1 - HG9999 Finance|HG8011 - HG9999 Insurance|HG9301 - HG9343 Accident insurance",10,
        "H - Social sciences|HG1 - HG9999 Finance|HG8011 - HG9999 Insurance|HG9371 - HG9399 Health insurance",298,
        "H - Social sciences|HG1 - HG9999 Finance|HG8011 - HG9999 Insurance|HG9651 - HG9899 Fire insurance",162,
        "H - Social sciences|HG1 - HG9999 Finance|HG8011 - HG9999 Insurance|HG9956 - HG9969 Casualty insurance",110,
        "H - Social sciences|HG1 - HG9999 Finance|HG8011 - HG9999 Insurance|HG9969.5 - HG9999 Other insurance (including automobile, burglary, disaster, title, etc.)",328,
        "H - Social sciences|HJ9 - HJ9940 Public finance",12228,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ2005 - HJ2216 Income and expenditure. Budget",1284,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ2240 - HJ5908 Revenue. Taxation. Internal revenue",4346,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ2240 - HJ5908 Revenue. Taxation. Internal revenue|HJ2321 - HJ2323 Tax incidence. Tax shifting. Tax equity",79,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ2240 - HJ5908 Revenue. Taxation. Internal revenue|HJ2326 - HJ2327 Progressive taxation",8,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ2240 - HJ5908 Revenue. Taxation. Internal revenue|HJ2336 - HJ2337 Tax exemption",13,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ2240 - HJ5908 Revenue. Taxation. Internal revenue|HJ2361 - HJ3192.7 By region or country",1544,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ2240 - HJ5908 Revenue. Taxation. Internal revenue|HJ3801 - HJ3844 Revenue from sources other than taxation",81,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ2240 - HJ5908 Revenue. Taxation. Internal revenue|HJ3863 - HJ3925 Direct taxation",5,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ2240 - HJ5908 Revenue. Taxation. Internal revenue|HJ4113 - HJ4601 Property tax",389,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ2240 - HJ5908 Revenue. Taxation. Internal revenue|HJ4629 - HJ4830 Income tax",873,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ2240 - HJ5908 Revenue. Taxation. Internal revenue|HJ4919 - HJ4936 Capitation. Poll tax",15,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ2240 - HJ5908 Revenue. Taxation. Internal revenue|HJ5309 - HJ5510 Administrative fees. User charges. License fees",128,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ241 - HJ1620 By region or country",2163,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ6603 - HJ7390 Customs administration",347,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ7461 - HJ7980 Expenditures. Government spending",257,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ8001 - HJ8899 Public debts",1002,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ8001 - HJ8899 Public debts|HJ8101 - HJ8899 By region or country",785,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ9103 - HJ9695 Local finance. Municipal finance (including the revenue, budget, expenditures of counties, boroughs, municipalities, etc.)",900,
        "H - Social sciences|HJ9 - HJ9940 Public finance|HJ9701 - HJ9940 Public accounting. Auditing",396,
        "H - Social sciences|HM401 - HM1281 Sociology (General)",16111,
        "H - Social sciences|HM401 - HM1281 Sociology (General)|HM1001 - HM1281 Social psychology",4609,
        "H - Social sciences|HM401 - HM1281 Sociology (General)|HM1001 - HM1281 Social psychology|HM1041 - HM1101 Social perception. Social cognition (including perception of the self and others, prejudices, stereotype)",255,
        "H - Social sciences|HM401 - HM1281 Sociology (General)|HM1001 - HM1281 Social psychology|HM1106 - HM1171 Interpersonal relations. Social behavior",1485,
        "H - Social sciences|HM401 - HM1281 Sociology (General)|HM1001 - HM1281 Social psychology|HM1176 - HM1281 Social influence. Social pressure",2170,
        "H - Social sciences|HM401 - HM1281 Sociology (General)|HM435 - HM477 History of sociology. History of sociological theory",255,
        "H - Social sciences|HM401 - HM1281 Sociology (General)|HM435 - HM477 History of sociology. History of sociological theory|HM461 - HM473 Schools of sociology. Schools of social thought",88,
        "H - Social sciences|HM401 - HM1281 Sociology (General)|HM481 - HM554 Theory. Method. Relations to other subjects",867,
        "H - Social sciences|HM401 - HM1281 Sociology (General)|HM621 - HM656 Culture",1704,
        "H - Social sciences|HM401 - HM1281 Sociology (General)|HM661 - HM696 Social control",716,
        "H - Social sciences|HM401 - HM1281 Sociology (General)|HM711 - HM806 Groups and organizations",2311,
        "H - Social sciences|HM401 - HM1281 Sociology (General)|HM711 - HM806 Groups and organizations|HM756 - HM781 Community",242,
        "H - Social sciences|HM401 - HM1281 Sociology (General)|HM711 - HM806 Groups and organizations|HM786 - HM806 Organizational sociology. Organization theory",238,
        "H - Social sciences|HM401 - HM1281 Sociology (General)|HM811 - HM821 Deviant behavior. Social deviance",112,
        "H - Social sciences|HM401 - HM1281 Sociology (General)|HM831 - HM901 Social change",2840,
        "H - Social sciences|HN1 - HN995 Social history and conditions. Social problems. Social reform",25638,
        "H - Social sciences|HN1 - HN995 Social history and conditions. Social problems. Social reform|HN30 - HN39 The church and social problems",310,
        "H - Social sciences|HN1 - HN995 Social history and conditions. Social problems. Social reform|HN41 - HN46 Community centers. Social centers",20,
        "H - Social sciences|HN1 - HN995 Social history and conditions. Social problems. Social reform|HN50 - HN995 By region or country",21268,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women",60757,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ1073 - HQ1073.5 Thanatology. Death. Dying",216,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ1075 - HQ1075.5 Sex role",793,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ1088 - HQ1090.7 Men",608,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ1101 - HQ2030.7 Women. Feminism",20714,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ1101 - HQ2030.7 Women. Feminism|HQ1451 - HQ1870.7 By region or country",7430,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ1101 - HQ2030.7 Women. Feminism|HQ1871 - HQ2030.7 Women's clubs",188,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ12 - HQ449 Sexual life",10695,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ12 - HQ449 Sexual life|HQ101 - HQ440.7 Prostitution",1510,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ12 - HQ449 Sexual life|HQ19 - HQ30.7 Sexual behavior and attitudes. Sexuality",1444,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ12 - HQ449 Sexual life|HQ31 - HQ64 Sex instruction and sexual ethics",1137,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ12 - HQ449 Sexual life|HQ75 - HQ76.8 Homosexuality. Lesbianism",3518,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ2035 - HQ2039 Life skills. Coping skills. Everyday living skills",32,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ2042 - HQ2044 Life style",28,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ450 - HQ472 Erotica",557,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home",24446,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home|HQ1001 - HQ1006 The state and marriage",6,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home|HQ1051 - HQ1057 The church and marriage",16,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home|HQ1058 - HQ1058.5 Widows and widowers. Widowhood",18,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home|HQ1060 - HQ1064 Aged. Gerontology (Social aspects). Retirement",1396,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home|HQ750 - HQ755.5 Eugenics",266,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home|HQ755.7 - HQ759.92 Parents. Parenthood",2591,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home|HQ760 - HQ767.7 Family size",3842,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home|HQ767.8 - HQ792.2 Children. Child development (including child rearing, child care, child life)",5224,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home|HQ793 - HQ799.2 Youth. Adolescents. Teenagers",2810,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home|HQ799.5 - HQ799.9 Young men and women",430,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home|HQ799.95 - HQ799.97 Adulthood",83,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home|HQ800 - HQ800.4 Single people",130,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home|HQ801 - HQ801.83 Man-woman relationships. Courtship. Dating",407,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home|HQ809 - HQ809.3 Family violence",26,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home|HQ811 - HQ960.7 Divorce",404,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home|HQ961 - HQ967 Free love",17,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home|HQ981 - HQ996 Polygamy",46,
        "H - Social sciences|HQ1 - HQ2044 The family. Marriage. Women|HQ503 - HQ1064 The family. Marriage. Home|HQ998 - HQ999 Illegitimacy. Unmarried mothers",31,
        "H - Social sciences|HS1 - HS3371 Societies: secret, benevolent, etc.",1877,
        "H - Social sciences|HS1 - HS3371 Societies: secret, benevolent, etc.|HS101 - HS330.7 Secret societies",172,
        "H - Social sciences|HS1 - HS3371 Societies: secret, benevolent, etc.|HS1201 - HS1350 Knights of Pythias",5,
        "H - Social sciences|HS1 - HS3371 Societies: secret, benevolent, etc.|HS1501 - HS2460.7 Other societies. By classes",367,
        "H - Social sciences|HS1 - HS3371 Societies: secret, benevolent, etc.|HS1501 - HS2460.7 Other societies. By classes|HS1501 - HS1510 Benevolent and friendly societies and mutual assessment fraternities",30,
        "H - Social sciences|HS1 - HS3371 Societies: secret, benevolent, etc.|HS1501 - HS2460.7 Other societies. By classes|HS1525 - HS1560 Religious socieities",20,
        "H - Social sciences|HS1 - HS3371 Societies: secret, benevolent, etc.|HS1501 - HS2460.7 Other societies. By classes|HS1601 - HS2265 Race socieities",51,
        "H - Social sciences|HS1 - HS3371 Societies: secret, benevolent, etc.|HS1501 - HS2460.7 Other societies. By classes|HS2301 - HS2460.7 Political and patriotic societies",246,
        "H - Social sciences|HS1 - HS3371 Societies: secret, benevolent, etc.|HS2501 - HS3371 Clubs. Clubs and societies for special classes (including boys' societies, Boy Scouts, girls' societies)",427,
        "H - Social sciences|HS1 - HS3371 Societies: secret, benevolent, etc.|HS351 - HS929 Freemasons",730,
        "H - Social sciences|HS1 - HS3371 Societies: secret, benevolent, etc.|HS951 - HS1179 Odd Fellows",14,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races",22703,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT101 - HT395 Urban groups. Urban sociology. The city",15372,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT101 - HT395 Urban groups. Urban sociology. The city|HT161 - HT165 Garden cities. The 'city beautiful'",61,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT101 - HT395 Urban groups. Urban sociology. The city|HT165.5 - HT169.9 City planning",4707,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT101 - HT395 Urban groups. Urban sociology. The city|HT170 - HT178 Urban renewal. Urban redevelopment",854,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT101 - HT395 Urban groups. Urban sociology. The city|HT201 - HT221 City population (including children in cities, immigration)",57,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT101 - HT395 Urban groups. Urban sociology. The city|HT251 - HT265 Mental and moral life",18,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT101 - HT395 Urban groups. Urban sociology. The city|HT321 - HT325 The city as economic factor. City promotion",334,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT101 - HT395 Urban groups. Urban sociology. The city|HT330 - HT334 Metropolitan areas",59,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT101 - HT395 Urban groups. Urban sociology. The city|HT351 - HT352 Suburban cities and towns",86,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT101 - HT395 Urban groups. Urban sociology. The city|HT361 - HT384 Urbanization. City and country",464,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT101 - HT395 Urban groups. Urban sociology. The city|HT390 - HT395 Regional planning",1505,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT1501 - HT1595 Races (including race as a social group and race relations in general)",1279,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT401 - HT485 Rural groups. Rural sociology",411,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT51 - HT65 Human settlements. Communities",17,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT601 - HT1445 Classes",4570,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT601 - HT1445 Classes|HT621 - HT635 Orgin of social classes",13,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT601 - HT1445 Classes|HT641 - HT657 Classes arising from birth",422,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT601 - HT1445 Classes|HT675 - HT690 Classes arising from occupation",154,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT601 - HT1445 Classes|HT713 - HT725 Caste system",216,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT601 - HT1445 Classes|HT751 - HT815 Serfdom",114,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT601 - HT1445 Classes|HT851 - HT1445 Slavery",2653,
        "H - Social sciences|HT51 - HT1595 Communities. Classes. Races|HT601 - HT1445 Classes|HT851 - HT1445 Slavery|HT1048 - HT1444 By region or country",1752,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology",70235,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV40 - HV69 Social service. Social work. Charity organization and practice (including social case work, private/public relief, institutional care, etc.)",2593,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV4961 - HV4995 Degeneration",40,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV4997 - HV5000 Substance abuse",249,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV5001 - HV5720.5 Alcoholism. Intemperance. Temperance reform",1819,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV551.2 - HV639 Emergency management",1970,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV551.2 - HV639 Emergency management|HV553 - HV639 Relief in case of disasters",1314,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV551.2 - HV639 Emergency management|HV553 - HV639 Relief in case of disasters|HV560 - HV583 Red Cross. Red Crescent",143,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV551.2 - HV639 Emergency management|HV553 - HV639 Relief in case of disasters|HV599 - HV639 Special types of disasters",476,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV5725 - HV5770 Tobacco habit",247,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV5800 - HV5840 Drug habits. Drug abuse",2449,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV6001 - HV7220.5 Criminology",21236,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV6001 - HV7220.5 Criminology|HV6035 - HV6197 Criminal anthropology (including criminal types, criminal psychology, prison psychology, causes of crime)",1250,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV6001 - HV7220.5 Criminology|HV6201 - HV6249 Criminal classes",812,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV6001 - HV7220.5 Criminology|HV6250 - HV6250.4 Victims of crimes. Victimology",347,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV6001 - HV7220.5 Criminology|HV6251 - HV6773.55 Crimes and offenses",14571,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV6001 - HV7220.5 Criminology|HV6774 - HV7220.5 Crimes and criminal classes",2008,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV640 - HV645 Refugee problems",1447,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV650 - HV670 Life saving",2,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV675 - HV677 Accidents. Prevention of accidents",112,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV680 - HV696 Free professional services (including medical charities)",378,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief",13264,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV3025 - HV3174 Special classes. By occupation",4,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV3025 - HV3174 Special classes. By occupation|HV3025 - HV3163 Mariners",4,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV3176 - HV3199 Special classes. By race or ethnic group",231,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV4005 - HV4013 Immigrants",58,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV4023 - HV4470.7 Poor in cities. Slums",650,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV4480 - HV4630 Mendicancy. Vagabondism. Tramps. Homelessness",704,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV4701 - HV4890.9 Protection of animals. Animal rights. Animal welfare",709,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV4905 - HV5959 Animal experimentation. Anti-vivisection",99,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV697 - HV3024 Special classes",10713,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV697 - HV3024 Special classes|HV1421 - HV1441 Young Adults. Youth. Teenagers",347,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV697 - HV3024 Special classes|HV1442 - HV1448 Women",128,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV697 - HV3024 Special classes|HV1450 - HV1494 Aged",1047,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV697 - HV3024 Special classes|HV1551 - HV3024 People with disabilities (including blind, deaf, people with physical and mental disabilities)",3754,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV697 - HV3024 Special classes|HV697 - HV700.7 Families. Mothers. Widow's pensions",688,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV697 - HV3024 Special classes|HV701 - HV1420.5 Children",4486,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV697 - HV3024 Special classes|HV701 - HV1420.5 Children|HV835 - HV847 Foundlings",6,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV697 - HV3024 Special classes|HV701 - HV1420.5 Children|HV873 - HV887 Destitute, neglected, and abandoned children. Street children",1099,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV697 - HV3024 Special classes|HV701 - HV1420.5 Children|HV888 - HV907 Children with disabilities",387,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV697 - HV3024 Special classes|HV701 - HV1420.5 Children|HV931 - HV941 Fresh-air funds",4,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV697 - HV4959 Protection, assistance, and relief|HV697 - HV3024 Special classes|HV701 - HV1420.5 Children|HV959 - HV1420.5 Orphanages. Orphans",264,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV7231 - HV9960 Criminal justice administration",16879,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV7231 - HV9960 Criminal justice administration|HV7435 - HV7439 Gun control",234,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV7231 - HV9960 Criminal justice administration|HV7551 - HV8280.7 Police. Detectives. Constabulary",6185,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV7231 - HV9960 Criminal justice administration|HV7551 - HV8280.7 Police. Detectives. Constabulary|HV7935 - HV8025 Administration and organization",930,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV7231 - HV9960 Criminal justice administration|HV7551 - HV8280.7 Police. Detectives. Constabulary|HV8031 - HV8080 Police duty. Methods of protection",1406,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV7231 - HV9960 Criminal justice administration|HV7551 - HV8280.7 Police. Detectives. Constabulary|HV8031 - HV8080 Police duty. Methods of protection|HV8079.5 - HV8079.55 Traffic control. Traffic accident investigation",19,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV7231 - HV9960 Criminal justice administration|HV7551 - HV8280.7 Police. Detectives. Constabulary|HV8081 - HV8099 Private detectives. Detective bureaus",47,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV7231 - HV9960 Criminal justice administration|HV7551 - HV8280.7 Police. Detectives. Constabulary|HV8130 - HV8280.7 By region or country",2798,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV7231 - HV9960 Criminal justice administration|HV8290 - HV8291 Private security services",113,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV7231 - HV9960 Criminal justice administration|HV8301 - HV9920.7 Penology. Prisons. Corrections",8656,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV7231 - HV9960 Criminal justice administration|HV8301 - HV9920.7 Penology. Prisons. Corrections|HV9051 - HV9230.7 The juvenile offender. Juvenile delinquency. Reform schools, etc.",2041,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV7231 - HV9960 Criminal justice administration|HV8301 - HV9920.7 Penology. Prisons. Corrections|HV9261 - HV9430.7 Reformation and reclamation of adult prisoners",1033,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV7231 - HV9960 Criminal justice administration|HV8301 - HV9920.7 Penology. Prisons. Corrections|HV9441 - HV9920.7 By region or country",2490,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV7231 - HV9960 Criminal justice administration|HV9950 - HV9960 By region or country",530,
        "H - Social sciences|HV1 - HV9960 Social pathology. Social and public welfare. Criminology|HV85 - HV525 By region or country",4317,
        "H - Social sciences|HX1 - HX970.7 Socialism. Communism. Anarchism",14996,
        "H - Social sciences|HX1 - HX970.7 Socialism. Communism. Anarchism|HX519 - HX550 Communism/socialism in relation to special topics",1366,
        "H - Social sciences|HX1 - HX970.7 Socialism. Communism. Anarchism|HX626 - HX696 Communism: Utopian socialism, collective settlements",351,
        "H - Social sciences|HX1 - HX970.7 Socialism. Communism. Anarchism|HX806 - HX811 Utopias. The ideal state",410,
        "H - Social sciences|HX1 - HX970.7 Socialism. Communism. Anarchism|HX821 - HX970.9 Anarchism",975,
        "J - Political Science",166095,
        "J - Political Science|J1 - J981 General legislative and executive papers",1672,
        "J - Political Science|J1 - J981 General legislative and executive papers|J1 - J9 Gazettes",47,
        "J - Political Science|J1 - J981 General legislative and executive papers|J10 - J98 United States",833,
        "J - Political Science|J1 - J981 General legislative and executive papers|J10 - J98 United States|J80 - J82 Presidents' messages and other executive papers",69,
        "J - Political Science|J1 - J981 General legislative and executive papers|J100 - J981 Other regions and countries",766,
        "J - Political Science|JA1 - JA92 Political science (General)",7700,
        "J - Political Science|JA1 - JA92 Political science (General)|JA1 - JA26 Periodicals",348,
        "J - Political Science|JA1 - JA92 Political science (General)|JA27 - JA34 Societies",36,
        "J - Political Science|JA1 - JA92 Political science (General)|JA60 - JA64 Dictionaries and encyclopedias",125,
        "J - Political Science|JA1 - JA92 Political science (General)|JA71 - JA80.2 Theory. Relations to other subjects",3383,
        "J - Political Science|JA1 - JA92 Political science (General)|JA81 - JA84 History",707,
        "J - Political Science|JA1 - JA92 Political science (General)|JA86 - JA88 Study and teaching. Research",163,
        "J - Political Science|JC11 - JC607 Political theory",22675,
        "J - Political Science|JC11 - JC607 Political theory|JC11 - JC607 State. Theories of the state",22675,
        "J - Political Science|JC11 - JC607 Political theory|JC11 - JC607 State. Theories of the state|JC109 - JC121 Medieval state",72,
        "J - Political Science|JC11 - JC607 Political theory|JC11 - JC607 State. Theories of the state|JC131 - JC273 Modern state",3403,
        "J - Political Science|JC11 - JC607 Political theory|JC11 - JC607 State. Theories of the state|JC311 - JC314 Nationalism. Nation state",1070,
        "J - Political Science|JC11 - JC607 Political theory|JC11 - JC607 State. Theories of the state|JC319 - JC323 Political geography",457,
        "J - Political Science|JC11 - JC607 Political theory|JC11 - JC607 State. Theories of the state|JC345 - JC347 Symbolism",21,
        "J - Political Science|JC11 - JC607 Political theory|JC11 - JC607 State. Theories of the state|JC348 - JC497 Forms of the state",5305,
        "J - Political Science|JC11 - JC607 Political theory|JC11 - JC607 State. Theories of the state|JC501 - JC607 Purpose, functions, and relations of the state",8068,
        "J - Political Science|JC11 - JC607 Political theory|JC11 - JC607 State. Theories of the state|JC51 - JC93 Ancient state",1242,
        "J - Political Science|JF20 - JF2112 Political institutions and public administration",7068,
        "J - Political Science|JF20 - JF2112 Political institutions and public administration|JF1338 - JF2112 Public administration",3474,
        "J - Political Science|JF20 - JF2112 Political institutions and public administration|JF1338 - JF2112 Public administration|JF1411 - JF1521 Civil service",220,
        "J - Political Science|JF20 - JF2112 Political institutions and public administration|JF1338 - JF2112 Public administration|JF2011 - JF2112 Political parties",478,
        "J - Political Science|JF20 - JF2112 Political institutions and public administration|JF20 - JF1177 General. Comparative government",3570,
        "J - Political Science|JF20 - JF2112 Political institutions and public administration|JF20 - JF1177 General. Comparative government|JF201 - JF619 Organs and functions of government",824,
        "J - Political Science|JF20 - JF2112 Political institutions and public administration|JF20 - JF1177 General. Comparative government|JF201 - JF619 Organs and functions of government|JF251 - JF289 Executive. Heads of state",120,
        "J - Political Science|JF20 - JF2112 Political institutions and public administration|JF20 - JF1177 General. Comparative government|JF201 - JF619 Organs and functions of government|JF331 - JF341 Parliamentary government",49,
        "J - Political Science|JF20 - JF2112 Political institutions and public administration|JF20 - JF1177 General. Comparative government|JF201 - JF619 Organs and functions of government|JF441 - JF619 Legislation. Legislative process. Law",579,
        "J - Political Science|JF20 - JF2112 Political institutions and public administration|JF20 - JF1177 General. Comparative government|JF51 - JF56 General works. History",448,
        "J - Political Science|JF20 - JF2112 Political institutions and public administration|JF20 - JF1177 General. Comparative government|JF800 - JF1177 Political rights. Political participation",1412,
        "J - Political Science|JJ1000 - JJ1019 Political institutions and public administration",11,
        "J - Political Science|JJ1000 - JJ1019 Political institutions and public administration|JJ1000 - JJ1019 North America",11,
        "J - Political Science|JK1 - JK9993 Political institutions and public administration",50119,
        "J - Political Science|JK1 - JK9993 Political institutions and public administration|JK1 - JK9593 United States",49909,
        "J - Political Science|JK1 - JK9993 Political institutions and public administration|JK1 - JK9593 United States|JK1717 - JK2248 Political rights. Practical politics",2888,
        "J - Political Science|JK1 - JK9993 Political institutions and public administration|JK1 - JK9593 United States|JK1717 - JK2248 Political rights. Practical politics|JK1756 - JK1761 Citizenship",220,
        "J - Political Science|JK1 - JK9993 Political institutions and public administration|JK1 - JK9593 United States|JK1717 - JK2248 Political rights. Practical politics|JK1846 - JK1936 Suffrage",568,
        "J - Political Science|JK1 - JK9993 Political institutions and public administration|JK1 - JK9593 United States|JK1717 - JK2248 Political rights. Practical politics|JK1961 - JK2248 Electoral system",1296,
        "J - Political Science|JK1 - JK9993 Political institutions and public administration|JK1 - JK9593 United States|JK2255 - JK2391 Political parties",1834,
        "J - Political Science|JK1 - JK9993 Political institutions and public administration|JK1 - JK9593 United States|JK2403 - JK9593 State government",3510,
        "J - Political Science|JK1 - JK9993 Political institutions and public administration|JK1 - JK9593 United States|JK401 - JK1685 Government. Public administration",38127,
        "J - Political Science|JK1 - JK9993 Political institutions and public administration|JK1 - JK9593 United States|JK401 - JK1685 Government. Public administration|JK1001 - JK1443 Congress. Legislative branch",32870,
        "J - Political Science|JK1 - JK9993 Political institutions and public administration|JK1 - JK9593 United States|JK401 - JK1685 Government. Public administration|JK1001 - JK1443 Congress. Legislative branch|JK1154 - JK1276 Senate",222,
        "J - Political Science|JK1 - JK9993 Political institutions and public administration|JK1 - JK9593 United States|JK401 - JK1685 Government. Public administration|JK1001 - JK1443 Congress. Legislative branch|JK1308 - JK1443 House of Representatives",340,
        "J - Political Science|JK1 - JK9993 Political institutions and public administration|JK1 - JK9593 United States|JK401 - JK1685 Government. Public administration|JK1606 - JK1685 Government property, etc.",191,
        "J - Political Science|JK1 - JK9993 Political institutions and public administration|JK1 - JK9593 United States|JK401 - JK1685 Government. Public administration|JK501 - JK901 Executive branch",2972,
        "J - Political Science|JK1 - JK9993 Political institutions and public administration|JK1 - JK9593 United States|JK401 - JK1685 Government. Public administration|JK501 - JK901 Executive branch|JK631 - JK873 Civil Service. Departments and agencies",951,
        "J - Political Science|JK1 - JK9993 Political institutions and public administration|JK9663 - JK9993 Confederate States of America",210,
        "J - Political Science|JL1 - JL3899 Political institutions and public administration",6019,
        "J - Political Science|JL1 - JL3899 Political institutions and public administration|JL1 - JL500 Canada",692,
        "J - Political Science|JL1 - JL3899 Political institutions and public administration|JL1200 - JL1299 Mexico",486,
        "J - Political Science|JL1 - JL3899 Political institutions and public administration|JL1400 - JL1679 Central America",258,
        "J - Political Science|JL1 - JL3899 Political institutions and public administration|JL1850 - JL3899 South America",3158,
        "J - Political Science|JL1 - JL3899 Political institutions and public administration|JL599.5 - JL839 West Indies. Caribbean Area",103,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration",19699,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN1 - JN97 Europe (General)",3679,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN101 - JN1179 Great Britain",4069,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN1187 - JN1371 Scotland",119,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN1400 - JN1571.5 Ireland",186,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN1601 - JN2191 Austria-Hungary. Austria. Hungary",249,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN2210 - JN2229 Czech Republic. Czechoslovakia",162,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN2301 - JN3007 France",1185,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN3201 - JN4980 Germany",2557,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN5001 - JN5191 Greece",43,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN5201 - JN5690 Italy",614,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN5701 - JN5999 Netherlands",76,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN6101 - JN6371 Belgium",50,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN6500 - JN6598 Soviet Union. Russia. Former Soviet Republics",1324,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN6630 - JN6639 Ukraine",52,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN6640 - JN6649 Belarus",5,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN6680 - JN6689 Moldova",3,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN6690 - JN6699 Russia (Federation)",548,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN6730 - JN6739 Latvia",7,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN6750 - JN6769 Poland",128,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN7011 - JN7066 Scandinavia. Northern Europe",43,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN7101 - JN7367 Denmark",23,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN7370 - JN7379 Greenland",1,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN7390 - JN7399 Finland",9,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN7401 - JN7695 Norway",29,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN7721 - JN7997 Sweden",74,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN8101 - JN8399 Spain",552,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN8423 - JN8661 Portugal",65,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN8701 - JN9599 Switzerland",88,
        "J - Political Science|JN1 - JN9689 Political institutions and public administration|JN9600 - JN9689 Balkan States",306,
        "J - Political Science|JQ1 - JQ6651 Political institutions and public administration",10411,
        "J - Political Science|JQ1 - JQ6651 Political institutions and public administration|JQ1 - JQ1849 Asia",6782,
        "J - Political Science|JQ1 - JQ6651 Political institutions and public administration|JQ1 - JQ1849 Asia|JQ1070 - JQ1199 Central Asia. Including former republics of the Soviet Union",172,
        "J - Political Science|JQ1 - JQ6651 Political institutions and public administration|JQ1 - JQ1849 Asia|JQ1499 - JQ1749 East Asia. Including China, Japan, Korea",3011,
        "J - Political Science|JQ1 - JQ6651 Political institutions and public administration|JQ1 - JQ1849 Asia|JQ1758 - JQ1852 Middle East. Including Turkey, Iran, Israel, Arabian Peninsula",1090,
        "J - Political Science|JQ1 - JQ6651 Political institutions and public administration|JQ1 - JQ1849 Asia|JQ200 - JQ620 India",1362,
        "J - Political Science|JQ1 - JQ6651 Political institutions and public administration|JQ1870 - JQ3981 Africa",2503,
        "J - Political Science|JQ1 - JQ6651 Political institutions and public administration|JQ3995 - JQ6651 Australia. New Zealand. Pacific Ocean islands",678,
        "J - Political Science|JS3 - JS8500 Local government. Municipal government",6395,
        "J - Political Science|JS3 - JS8500 Local government. Municipal government|JS141 - JS271 Municipal government and local government other than municipal",108,
        "J - Political Science|JS3 - JS8500 Local government. Municipal government|JS1701 - JS1800 Canada",61,
        "J - Political Science|JS3 - JS8500 Local government. Municipal government|JS1840 - JS2058 West Indies. Caribbean Area",22,
        "J - Political Science|JS3 - JS8500 Local government. Municipal government|JS2101 - JS2143 Mexico",55,
        "J - Political Science|JS3 - JS8500 Local government. Municipal government|JS2145 - JS2219 Central America",10,
        "J - Political Science|JS3 - JS8500 Local government. Municipal government|JS2300 - JS2778 South America",176,
        "J - Political Science|JS3 - JS8500 Local government. Municipal government|JS300 - JS1583 United States",2809,
        "J - Political Science|JS3 - JS8500 Local government. Municipal government|JS3000 - JS6949.8 Europe",1606,
        "J - Political Science|JS3 - JS8500 Local government. Municipal government|JS55 - JS67 History",26,
        "J - Political Science|JS3 - JS8500 Local government. Municipal government|JS6950 - JS7509 Asia",684,
        "J - Political Science|JS3 - JS8500 Local government. Municipal government|JS7525 - JS7819 Africa",168,
        "J - Political Science|JS3 - JS8500 Local government. Municipal government|JS8001 - JS8490 Australia. New Zealand. Pacific Ocean islands",36,
        "J - Political Science|JV1 - JV9480 Colonies and colonization. Emigration and immigration. International migration",8636,
        "J - Political Science|JV1 - JV9480 Colonies and colonization. Emigration and immigration. International migration|JV1 - JV5399 Colonies and colonization",1806,
        "J - Political Science|JV1 - JV9480 Colonies and colonization. Emigration and immigration. International migration|JV1 - JV5399 Colonies and colonization|JV412 - JV461 Administration and organization",42,
        "J - Political Science|JV1 - JV9480 Colonies and colonization. Emigration and immigration. International migration|JV1 - JV5399 Colonies and colonization|JV500 - JV5399 Colonizing nations",1014,
        "J - Political Science|JV1 - JV9480 Colonies and colonization. Emigration and immigration. International migration|JV1 - JV5399 Colonies and colonization|JV61 - JV151 History",179,
        "J - Political Science|JV1 - JV9480 Colonies and colonization. Emigration and immigration. International migration|JV6001 - JV9480 Emigration and immigration. International migration",6830,
        "J - Political Science|JV1 - JV9480 Colonies and colonization. Emigration and immigration. International migration|JV6001 - JV9480 Emigration and immigration. International migration|JV6001 - JV6006 Periodicals. Serials",93,
        "J - Political Science|JV1 - JV9480 Colonies and colonization. Emigration and immigration. International migration|JV6001 - JV9480 Emigration and immigration. International migration|JV6021 - JV6032 History",81,
        "J - Political Science|JV1 - JV9480 Colonies and colonization. Emigration and immigration. International migration|JV6001 - JV9480 Emigration and immigration. International migration|JV6061 - JV6149 Emigration",117,
        "J - Political Science|JV1 - JV9480 Colonies and colonization. Emigration and immigration. International migration|JV6001 - JV9480 Emigration and immigration. International migration|JV6201 - JV6348 Immigration",840,
        "J - Political Science|JV1 - JV9480 Colonies and colonization. Emigration and immigration. International migration|JV6001 - JV9480 Emigration and immigration. International migration|JV6403 - JV7127 United States",1763,
        "J - Political Science|JV1 - JV9480 Colonies and colonization. Emigration and immigration. International migration|JV6001 - JV9480 Emigration and immigration. International migration|JV7200 - JV7539 Canada, Latin America, etc.",812,
        "J - Political Science|JV1 - JV9480 Colonies and colonization. Emigration and immigration. International migration|JV6001 - JV9480 Emigration and immigration. International migration|JV7590 - JV8349 Europe",1771,
        "J - Political Science|JV1 - JV9480 Colonies and colonization. Emigration and immigration. International migration|JV6001 - JV9480 Emigration and immigration. International migration|JV8490 - JV8758 Asia",354,
        "J - Political Science|JV1 - JV9480 Colonies and colonization. Emigration and immigration. International migration|JV6001 - JV9480 Emigration and immigration. International migration|JV8790 - JV9025 Africa",209,
        "J - Political Science|JV1 - JV9480 Colonies and colonization. Emigration and immigration. International migration|JV6001 - JV9480 Emigration and immigration. International migration|JV9029 - JV9036 Atlantic Ocean islands",4,
        "J - Political Science|JV1 - JV9480 Colonies and colonization. Emigration and immigration. International migration|JV6001 - JV9480 Emigration and immigration. International migration|JV9100 - JV9269 Australia. New Zealand",94,
        "J - Political Science|JV1 - JV9480 Colonies and colonization. Emigration and immigration. International migration|JV6001 - JV9480 Emigration and immigration. International migration|JV9290 - JV9470 Pacific Ocean islands",9,
        "J - Political Science|JZ2 - JZ6530 International relations",11509,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ1249 - JZ1254 Relation to other disciplines and topics",291,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ1305 - JZ2060 Scope of international relations",4830,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ1305 - JZ2060 Scope of international relations|JZ1328 - JZ1395 By period",56,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ1305 - JZ2060 Scope of international relations|JZ1400 - JZ1454 Diplomatic and consular service",144,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ1305 - JZ2060 Scope of international relations|JZ1464 - JZ2060 By country, territory, or region",1875,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ24 - JZ38 Societies. Associations, etc.",24,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ3675 - JZ3875 State territory and its different parts",39,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ3675 - JZ3875 State territory and its different parts|JZ3686 - JZ3875 International waters",27,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ4835 - JZ5490 International organizations and associations",1323,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ4835 - JZ5490 International organizations and associations|JZ4841 - JZ4848 Political non-governmental organizations. NGOs",193,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ4835 - JZ5490 International organizations and associations|JZ4850 - JZ5490 Intergovernmental organizations. IGOs",1052,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ4835 - JZ5490 International organizations and associations|JZ4850 - JZ5490 Intergovernmental organizations. IGOs|JZ4853 - JZ4934 The League of Nations",104,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ4835 - JZ5490 International organizations and associations|JZ4850 - JZ5490 Intergovernmental organizations. IGOs|JZ4935 - JZ5160 The United Nations",665,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ5.5 - JZ18 Periodicals",120,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ5511.2 - JZ6299 Promotion of peace. Peaceful change",3307,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ5511.2 - JZ6299 Promotion of peace. Peaceful change|JZ5514 - JZ5526 Societies. Associations, etc.",29,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ5511.2 - JZ6299 Promotion of peace. Peaceful change|JZ5527 - JZ5532 Congresses and conferences",29,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ5511.2 - JZ6299 Promotion of peace. Peaceful change|JZ5586 - JZ6009 International security. Disarmament",1469,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ5511.2 - JZ6299 Promotion of peace. Peaceful change|JZ6010 - JZ6299 Pacific settlement of international disputes",166,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ63 - JZ1153 Sources",35,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ63 - JZ1153 Sources|JZ221 - JZ1153 By region or country",17,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ6360 - JZ6377 Non-military coercion",476,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ6378 - JZ6405 The armed conflict. War and order",166,
        "J - Political Science|JZ2 - JZ6530 International relations|JZ6422 - JZ6422.5 Neutrality",5,
        "K - Law in general. Comparative and uniform law. Jurisprudence",405305,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence",45678,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K1 - K36.5 Periodicals",11342,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K100 - K103 Legal education",101,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K109 - K110 Law societies. International bar associations",5,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K115 - K130 The legal profession",193,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K140 - K165 History of law",167,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K190 - K195 Ethnological jurisprudence. Primitive law",58,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K201 - K487 Jurisprudence. Philosophy and theory of law",3397,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K201 - K487 Jurisprudence. Philosophy and theory of law|K212 - K213 Methodology",136,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K201 - K487 Jurisprudence. Philosophy and theory of law|K215 - K218 History",35,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K201 - K487 Jurisprudence. Philosophy and theory of law|K237 - K264 The concept of law",345,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K201 - K487 Jurisprudence. Philosophy and theory of law|K270 - K274 Acts and events",6,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K201 - K487 Jurisprudence. Philosophy and theory of law|K280 - K286 Sources of law",42,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K201 - K487 Jurisprudence. Philosophy and theory of law|K288 - K296 Interpretation and construction of law. Lacunae in law",68,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K201 - K487 Jurisprudence. Philosophy and theory of law|K300 - K304 Classification of law. Typology",28,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K201 - K487 Jurisprudence. Philosophy and theory of law|K321 - K474 Schools of legal theory",1225,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K201 - K487 Jurisprudence. Philosophy and theory of law|K321 - K474 Schools of legal theory|K325 - K328 Historical jurisprudence",6,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K201 - K487 Jurisprudence. Philosophy and theory of law|K321 - K474 Schools of legal theory|K330 - K344 Positivism",116,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K201 - K487 Jurisprudence. Philosophy and theory of law|K321 - K474 Schools of legal theory|K366 - K380 Sociology of law. Sociological jurisprudence",436,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K201 - K487 Jurisprudence. Philosophy and theory of law|K321 - K474 Schools of legal theory|K400 - K474 Natural law",393,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K201 - K487 Jurisprudence. Philosophy and theory of law|K486 - K487 Relation of law to other topics",6,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K37 - K44 Bibliography",83,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K50 - K54 Dictionaries. Words and phrases",174,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law",17832,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1000 - K1395 Commercial law",1515,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1000 - K1395 Commercial law|K1010 - K1014 The merchant. Business enterprises",10,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1000 - K1395 Commercial law|K1021 - K1022 Commercial agency",7,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1000 - K1395 Commercial law|K1024 - K1132 Commercial contracts",541,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1000 - K1395 Commercial law|K1024 - K1132 Commercial contracts|K1026 - K1045 Sale of goods",121,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1000 - K1395 Commercial law|K1024 - K1132 Commercial contracts|K1054 - K1065.5 Negotiable instruments",18,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1000 - K1395 Commercial law|K1024 - K1132 Commercial contracts|K1066 - K1089 Banking",179,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1000 - K1395 Commercial law|K1024 - K1132 Commercial contracts|K1094 - K1096 Loan of money",22,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1000 - K1395 Commercial law|K1024 - K1132 Commercial contracts|K1100 - K1109 Secured transactions",33,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1000 - K1395 Commercial law|K1024 - K1132 Commercial contracts|K1112 - K1116 Investments",103,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1000 - K1395 Commercial law|K1024 - K1132 Commercial contracts|K1130 - K1132 Carriage of goods and passengers. Carriers",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1000 - K1395 Commercial law|K1150 - K1231 Maritime law",214,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1000 - K1395 Commercial law|K1150 - K1231 Maritime law|K1195 - K1223 Maritime social legislation",25,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1000 - K1395 Commercial law|K1150 - K1231 Maritime law|K1226 - K1231 Marine insurance",5,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1000 - K1395 Commercial law|K1241 - K1287 Insurance",39,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1000 - K1395 Commercial law|K1301 - K1366 Business associations",406,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1000 - K1395 Commercial law|K1370 - K1395 Insolvency and bankruptcy. Creditors' rights",59,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1401 - K1578 Intellectual property",1395,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1401 - K1578 Intellectual property|K1411 - K1485 Copyright",372,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1401 - K1578 Intellectual property|K1500 - K1578 Industrial property",498,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1700 - K1973 Social legislation",543,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1700 - K1973 Social legislation|K1701 - K1841 Labor law",428,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1700 - K1973 Social legislation|K1861 - K1929 Social insurance",45,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K1700 - K1973 Social legislation|K1960 - K1973 Public welfare. Public assistance",25,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K2100 - K2385 Courts. Procedure",498,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K2100 - K2385 Courts. Procedure|K2110 - K2155 Court organization and procedure",113,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K2100 - K2385 Courts. Procedure|K2201 - K2385 Civil procedure",265,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K2400 - K2405 Arbitration and award",525,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3154 - K3370 Constitutional law",3571,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3154 - K3370 Constitutional law|K3171 - K3179 Constitutional principles",214,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3154 - K3370 Constitutional law|K3184 - K3188 Form and structure of government",30,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3154 - K3370 Constitutional law|K3224 - K3278 Individual and state",2517,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3154 - K3370 Constitutional law|K3280 - K3282 Church and state",50,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3154 - K3370 Constitutional law|K3289 - K3367 Organs of government",149,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3154 - K3370 Constitutional law|K3289 - K3367 Organs of government|K3290 - K3304 The people. Election law",45,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3154 - K3370 Constitutional law|K3289 - K3367 Organs of government|K3310 - K3329 The legislature",45,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3154 - K3370 Constitutional law|K3289 - K3367 Organs of government|K3332 - K3363 Heads of state and the central government",41,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3400 - K3431 Administrative law",103,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3400 - K3431 Administrative law|K3402 - K3417 The administrative process",52,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3400 - K3431 Administrative law|K3420 - K3431 Administrative organization",3,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3440 - K3460 Civil service. Government officials and employees",8,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3476 - K3560 Public property. Public restraint on private property",408,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3566 - K3578 Public health",71,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3581 - K3598 Environmental law",663,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3601 - K3611 Medical legislation",128,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3615 - K3622 Veterinary laws. Veterinary medicine and hygiene. Prevention of cruelty to animals",39,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3625 - K3649 Food. Drugs. Cosmetics",112,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3661 - K3674 Public safety",106,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3700 - K3705 Control of social activities",45,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3740 - K3762 Education",24,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3770 - K3795 Science and arts. Research",135,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3820 - K3836 Economic constitution, policy, planning, and development",416,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3840 - K4375 Regulation of industry, trade, and commerce. Occupational law",1442,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3840 - K4375 Regulation of industry, trade, and commerce. Occupational law|K3842 - K3862 Trade regulations. Control of trade practices",273,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3840 - K4375 Regulation of industry, trade, and commerce. Occupational law|K3870 - K3918 rimary production. Extractive industries",198,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3840 - K4375 Regulation of industry, trade, and commerce. Occupational law|K3921 - K3925 Manufacturing industries",34,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3840 - K4375 Regulation of industry, trade, and commerce. Occupational law|K3926 - K3935 Food processing industries",16,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3840 - K4375 Regulation of industry, trade, and commerce. Occupational law|K3941 - K3974 Trade and commerce",265,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3840 - K4375 Regulation of industry, trade, and commerce. Occupational law|K3978 - K3992 Public utilities",124,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3840 - K4375 Regulation of industry, trade, and commerce. Occupational law|K4011 - K4343 Transportation and communication",420,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K3840 - K4375 Regulation of industry, trade, and commerce. Occupational law|K4360 - K4375 Professions and occupations",31,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K4430 - K4675 Public finance",1023,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K4430 - K4675 Public finance|K4453 - K4640 National revenue",881,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K4430 - K4675 Public finance|K4650 - K4675 State and local finance",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K4700 - K4705 Government measures in time of war, national emergency, or economic crisis",4,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K4720 - K4780 National defense. Military law",40,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K4720 - K4780 National defense. Military law|K4725 - K4734 The military establishment. Armed forces",7,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K4720 - K4780 National defense. Military law|K4740 - K4760 Military criminal law and procedure",21,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K5000 - K5582 Criminal law and procedure",1715,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K5000 - K5582 Criminal law and procedure|K5015.4 - K5350 Criminal law",1224,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K5000 - K5582 Criminal law and procedure|K5401 - K5570 Criminal procedure",330,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K5000 - K5582 Criminal law and procedure|K5575 - K5582 Juvenile criminal law and procedure",23,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K524 - K525 Treaties and other international agreements",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K540 - K546 Trials",75,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K578 - K579 Concepts applying to several branches of law",4,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K583 - K591 Legal systems compared",147,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K592 - K597 Regional divisions. Interregional comparative law",5,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K600 - K615 Private law",72,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K600 - K615 Private law|K605 - K615 Unification",27,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K623 - K968 Civil law",1592,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K623 - K968 Civil law|K625 - K709 Persons",666,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K623 - K968 Civil law|K720 - K792 Property",205,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K623 - K968 Civil law|K795 - K798 Trusts and trustees",38,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K623 - K968 Civil law|K805 - K821 Succession upon death",29,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K623 - K968 Civil law|K830 - K968 Obligations",583,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K623 - K968 Civil law|K830 - K968 Obligations|K840 - K917 Contracts",288,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K520 - K5582 Comparative law. International uniform law|K623 - K968 Civil law|K830 - K968 Obligations|K923 - K968 Torts",238,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K68 - K70 Directories",27,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws",507,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7051 - K7054 International unification, approximation, and harmonization",22,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7060 - K7081 Choice of law",10,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7120 - K7197 Persons",69,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7120 - K7197 Persons|K7125 - K7140 Natural persons",46,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7120 - K7197 Persons|K7145 - K7148 Juristic persons. Associations",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7120 - K7197 Persons|K7155 - K7197 Domestic relations. Family law",20,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7120 - K7197 Persons|K7155 - K7197 Domestic relations. Family law|K7157 - K7179 Marriage. Husband and wife",7,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7120 - K7197 Persons|K7155 - K7197 Domestic relations. Family law|K7181 - K7197 Parent and child. Guardian and ward",7,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7200 - K7218 Property",11,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7230 - K7245 Succession upon death",9,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7260 - K7338 Obligations",32,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7260 - K7338 Obligations|K7265 - K7305 Contracts",16,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7260 - K7338 Obligations|K7315 - K7338 Torts",7,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7340 - K7512 Commercial law",67,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7340 - K7512 Commercial law|K7350 - K7444 Commercial contracts",23,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7340 - K7512 Commercial law|K7449 - K7460 Maritime law",3,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7340 - K7512 Commercial law|K7485 - K7495 Business associations. Business corporations",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7340 - K7512 Commercial law|K7510 - K7512 Insolvency and bankruptcy. Creditors' rights",19,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7550 - K7582 Intellectual property",12,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7550 - K7582 Intellectual property|K7555 - K7557 Copyright",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7550 - K7582 Intellectual property|K7570 - K7582 Industrial property",3,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7585 - K7595 Social legislation",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K7000 - K7720 Private international law. Conflict of laws|K7611 - K7688 Civil procedure. International civil procedure",83,
        "K - Law in general. Comparative and uniform law. Jurisprudence|K1 - K7720 Law in general. Comparative and uniform law. Jurisprudence|K85 - K89 Legal research",118,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KB1 - KB4855 Religious law in general. Comparative religious law. Jurisprudence",84,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KB1 - KB4855 Religious law in general. Comparative religious law. Jurisprudence|KB162 - KB250 Legal systems compared",21,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KB1 - KB4855 Religious law in general. Comparative religious law. Jurisprudence|KB270 - KB280 Theory, philosophy, and science of religious law",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KB1 - KB4855 Religious law in general. Comparative religious law. Jurisprudence|KB400 - KB4855 Interdisciplinary discussion of subjects",7,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KB1 - KB4855 Religious law in general. Comparative religious law. Jurisprudence|KB400 - KB4855 Interdisciplinary discussion of subjects|KB1572 - KB1690 Courts and procedure",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KB1 - KB4855 Religious law in general. Comparative religious law. Jurisprudence|KB400 - KB4855 Interdisciplinary discussion of subjects|KB2101 - KB2862 Constitutions and religion. Constitutional and administrative law",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KB1 - KB4855 Religious law in general. Comparative religious law. Jurisprudence|KB400 - KB4855 Interdisciplinary discussion of subjects|KB524 - KB530 Persons",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KB1 - KB4855 Religious law in general. Comparative religious law. Jurisprudence|KB400 - KB4855 Interdisciplinary discussion of subjects|KB531 - KB619 Domestic relations. Family law",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KB1 - KB4855 Religious law in general. Comparative religious law. Jurisprudence|KB400 - KB4855 Interdisciplinary discussion of subjects|KB632 - KB636.2 Inheritance and succession",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KB1 - KB4855 Religious law in general. Comparative religious law. Jurisprudence|KB400 - KB4855 Interdisciplinary discussion of subjects|KB810 - KB962.8 Obligations. Contracts and transactions",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBM1 - KBM4855 Jewish law. Halakah",159,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBM1 - KBM4855 Jewish law. Halakah|KBM1 - KBM523.72 Halakah",40,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBM1 - KBM4855 Jewish law. Halakah|KBM523.8 - KBM4855 Mishpat Ivri",118,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBM1 - KBM4855 Jewish law. Halakah|KBM523.8 - KBM4855 Mishpat Ivri|KBM1468 - KBM1547 Social laws and legislation",3,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBM1 - KBM4855 Jewish law. Halakah|KBM523.8 - KBM4855 Mishpat Ivri|KBM1572 - KBM1942 Courts and procedure",4,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBM1 - KBM4855 Jewish law. Halakah|KBM523.8 - KBM4855 Mishpat Ivri|KBM2070 - KBM2614 Constitutional law. Constitutional principles of the Jewish community",6,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBM1 - KBM4855 Jewish law. Halakah|KBM523.8 - KBM4855 Mishpat Ivri|KBM3098 - KBM3122 Medical legislation",10,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBM1 - KBM4855 Jewish law. Halakah|KBM523.8 - KBM4855 Mishpat Ivri|KBM3127 - KBM3134 Environmental law",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBM1 - KBM4855 Jewish law. Halakah|KBM523.8 - KBM4855 Mishpat Ivri|KBM3790 - KBM4855 Criminal law and procedure",15,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBM1 - KBM4855 Jewish law. Halakah|KBM523.8 - KBM4855 Mishpat Ivri|KBM524.12 - KBM524.26 The concept of Jewish law",10,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBM1 - KBM4855 Jewish law. Halakah|KBM523.8 - KBM4855 Mishpat Ivri|KBM524.32 - KBM524.34 Methodology of law development",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBM1 - KBM4855 Jewish law. Halakah|KBM523.8 - KBM4855 Mishpat Ivri|KBM524.6 - KBM530 Persons",9,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBM1 - KBM4855 Jewish law. Halakah|KBM523.8 - KBM4855 Mishpat Ivri|KBM531 - KBM619 Domestic relations. Family law",20,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBM1 - KBM4855 Jewish law. Halakah|KBM523.8 - KBM4855 Mishpat Ivri|KBM632 - KBM636.2 Inheritance and succession",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBM1 - KBM4855 Jewish law. Halakah|KBM523.8 - KBM4855 Mishpat Ivri|KBM639 - KBM1424 Dinei mamonot",13,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBP1 - KBP4860 Islamic law. Shari'ah. Fiqh",1417,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBP1 - KBP4860 Islamic law. Shari'ah. Fiqh|KBP100 - KBP136.8 Sources",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBP1 - KBP4860 Islamic law. Shari'ah. Fiqh|KBP173.25 - KBP0.6 Islamic law and other disciplines or subjects",1164,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBP1 - KBP4860 Islamic law. Shari'ah. Fiqh|KBP42 - KBP43 Legal education. Study and teaching",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBP1 - KBP4860 Islamic law. Shari'ah. Fiqh|KBP50 - KBP69 History, development and application of Islamic law",60,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBP1 - KBP4860 Islamic law. Shari'ah. Fiqh|KBP70 - KBP75.4 Biography",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBR2 - KBR4090 History of canon law",324,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBR2 - KBR4090 History of canon law|KBR190 - KBR2154.5 Sources",70,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBR2 - KBR4090 History of canon law|KBR2155 - KBR2157 Canon law and other disciplines or subjects",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBR2 - KBR4090 History of canon law|KBR2160 - KBR2204.5 Canonical jurisprudence. Canonical science",13,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBR2 - KBR4090 History of canon law|KBR2205 - KBR2206.3 Influence of other legal systems on Canon law",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBR2 - KBR4090 History of canon law|KBR2224 - KBR2295 Ius ecclesiasticum privatum",4,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBR2 - KBR4090 History of canon law|KBR2310 - KBR3026 Constitution of the Church",61,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBR2 - KBR4090 History of canon law|KBR27 - KBR41.7 Official acts of the Holy See",31,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBR2 - KBR4090 History of canon law|KBR3040 - KBR3070 The teaching office of the church. Magisterium. De ecclesiae munere docendi",6,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBR2 - KBR4090 History of canon law|KBR3077 - KBR3165 Sacraments. Administration of sacraments. De sacramentis et administratione",27,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBR2 - KBR4090 History of canon law|KBR3180 - KBR3182 Sacramentals. Sacramentalia",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBR2 - KBR4090 History of canon law|KBR3184 - KBR3256 Other acts of divine worship. De ceteris actibus Cultus Divini",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBR2 - KBR4090 History of canon law|KBR3320 - KBR3460 Church property. Church economics and finance. Administration",7,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBR2 - KBR4090 History of canon law|KBR3500 - KBR3774 Penal (Criminal) law. De lege poenali",26,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBR2 - KBR4090 History of canon law|KBR3780 - KBR3983 Judiciary. Ecclesiastical courts and procedure. De processibus",9,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBR2 - KBR4090 History of canon law|KBR4000 - KBR4090 Church and state relationships. De relationibus inter ecclesiam et status. Ius publicum ecclesiae",10,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBR2 - KBR4090 History of canon law|KBR42 - KBR54.5 Decisions of ecclesiastical tribunals and courts, and related materials",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBU2 - KBU4820 Law of the Roman Catholic Church. The Holy See",422,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBU2 - KBU4820 Law of the Roman Catholic Church. The Holy See|KBU2 - KBU19 Bibliography",4,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBU2 - KBU4820 Law of the Roman Catholic Church. The Holy See|KBU2160 - KBU2204 Canonical jurisprudence. Theory and science of canon law",16,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBU2 - KBU4820 Law of the Roman Catholic Church. The Holy See|KBU2210 - KBU2212 The codes of canon law",15,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBU2 - KBU4820 Law of the Roman Catholic Church. The Holy See|KBU2215 - KBU2308 General norms and principles. De normis generalibus",22,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBU2 - KBU4820 Law of the Roman Catholic Church. The Holy See|KBU2310 - KBU3026 Constitution of the Church",77,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBU2 - KBU4820 Law of the Roman Catholic Church. The Holy See|KBU26.8 - KBU41.5 Official acts of the Holy See",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBU2 - KBU4820 Law of the Roman Catholic Church. The Holy See|KBU3040 - KBU3070 The teaching office of the Church. Magisterium. De ecclesiae munere docendi",8,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBU2 - KBU4820 Law of the Roman Catholic Church. The Holy See|KBU3075 - KBU3165 Sacraments. Administration of sacraments. De sacramentis et administratione",98,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBU2 - KBU4820 Law of the Roman Catholic Church. The Holy See|KBU3180 - KBU3182 Sacramentals. Sacramentalia",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBU2 - KBU4820 Law of the Roman Catholic Church. The Holy See|KBU3184 - KBU3256 Other acts of divine worship. De ceteris actibus Cultus Divini",9,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBU2 - KBU4820 Law of the Roman Catholic Church. The Holy See|KBU3264 - KBU3280 Social work of the Church. Public welfare. Caritas",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBU2 - KBU4820 Law of the Roman Catholic Church. The Holy See|KBU3320 - KBU3460 Church property. Church economics and finance",18,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBU2 - KBU4820 Law of the Roman Catholic Church. The Holy See|KBU3500 - KBU3774 Sanctions in the Church. Criminal law. De sanctionibus in Ecclesia. De lege poenali",29,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBU2 - KBU4820 Law of the Roman Catholic Church. The Holy See|KBU3780 - KBU3985 Courts and procedure. De processibus",41,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBU2 - KBU4820 Law of the Roman Catholic Church. The Holy See|KBU4000 - KBU4097 Church and state relationships. De relationibus inter ecclesiam et status. Ius publicum ecclesiae",53,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KBU2 - KBU4820 Law of the Roman Catholic Church. The Holy See|KBU4112 - KBU4820 Local Church government",6,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KD - Law of the United Kingdom and Ireland",14221,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KD - Law of the United Kingdom and Ireland|KD51 - KD9500 England and Wales",14216,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KDZ1 - KDZ4999 Law of America. North America",359,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KDZ1 - KDZ4999 Law of America. North America|KDZ1101 - KDZ1199 Organization of American States (OAS)",41,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KDZ1 - KDZ4999 Law of America. North America|KDZ2001 - KDZ2499.2 Bermuda",4,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KDZ1 - KDZ4999 Law of America. North America|KDZ3001 - KDZ3499 Greenland",3,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KE - Law of Canada",1909,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KE - Law of Canada|KE1 - KE9450 Federal law. Common and collective provincial law",1907,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KF - Law of the United States",260671,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KF - Law of the United States|KF0001 - KF999",198224,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KF - Law of the United States|KF1 - KF9827 Federal law. Common and collective state law",29,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KF - Law of the United States|KF1000 - KF1999",13889,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KF - Law of the United States|KF2000 - KF2999",4486,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KF - Law of the United States|KF3000 - KF3999",10526,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KF - Law of the United States|KF4000 - KF4999",11184,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KF - Law of the United States|KF5000 - KF5999",4467,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KF - Law of the United States|KF6000 - KF6999",7544,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KF - Law of the United States|KF7000 - KF7999",1211,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KF - Law of the United States|KF8000 - KF8999",9435,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KG1 - KG999 Latin America (General)",381,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KH1 - KH999 South America (General)",75,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KJ - Europe",221,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KJ - Europe|KJ2 - KJ1040 History of Law",212,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KL - Asia and Eurasia, Africa, Pacific Area, and Antarctica",311,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KL - Asia and Eurasia, Africa, Pacific Area, and Antarctica|KL2 - KL5915 History of law. The ancient orient",308,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KL - Asia and Eurasia, Africa, Pacific Area, and Antarctica|KL2 - KL5915 History of law. The ancient orient|KL147 - KL177 Ancient legal systems compared",27,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KL - Asia and Eurasia, Africa, Pacific Area, and Antarctica|KL2 - KL5915 History of law. The ancient orient|KL190 - KL420 Sources",9,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KL - Asia and Eurasia, Africa, Pacific Area, and Antarctica|KL2 - KL5915 History of law. The ancient orient|KL2 - KL135 General",8,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KL - Asia and Eurasia, Africa, Pacific Area, and Antarctica|KL2 - KL5915 History of law. The ancient orient|KL2200 - KL2499 Babylonia",10,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KL - Asia and Eurasia, Africa, Pacific Area, and Antarctica|KL2 - KL5915 History of law. The ancient orient|KL2800 - KL3099 Egypt",22,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KL - Asia and Eurasia, Africa, Pacific Area, and Antarctica|KL2 - KL5915 History of law. The ancient orient|KL4110 - KL4399 Greek law",157,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KL - Asia and Eurasia, Africa, Pacific Area, and Antarctica|KL2 - KL5915 History of law. The ancient orient|KL4700 - KL4999 Hittite law",4,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KL - Asia and Eurasia, Africa, Pacific Area, and Antarctica|KL2 - KL5915 History of law. The ancient orient|KL5300 - KL5599 Persia",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KL - Asia and Eurasia, Africa, Pacific Area, and Antarctica|KL2 - KL5915 History of law. The ancient orient|KL700 - KL2215 Mesopotamia. Assyro",41,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KLA1 - KLA9999 Russia. Soviet Union",1423,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KLB1 - KLB6499 Russia (Federation, 1992",1311,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KLD1 - KLD490 Armenia (Republic)",3,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KLE1 - KLE490 Azerbaijan",8,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KLF1 - KLF490 Belarus (Republic)",41,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KLH1 - KLH490 Georgia (Republic)",29,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KLM1 - KLM490 Moldova",49,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KLN1 - KLN489 Russian S.F.S.R. (to 1991)",75,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KLP1 - KLP4989 Ukraine (1919-1991)",26,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KLR1 - KLR490 Kazakhstan",42,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KLS1 - KLS490 Kyrgyzstan",25,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KLT1 - KLT490 Tadjikistan",15,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KLV1 - KLV490 Turkmenistan",17,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KLW1 - KLW490 Uzbekistan",44,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KM - Asia and Eurasia, Africa, Pacific Area, and Antarctica. Asia",165,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KM - Asia and Eurasia, Africa, Pacific Area, and Antarctica. Asia|KM1 - KM999 General",88,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KN - South Asia. Southeast Asia. East Asia",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KQ - Africa",19,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KQ - Africa|KQ2 - KQ197 History of law",4,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KQ - Africa|KQ2010 - KQ9000 Law of indigenous peoples",11,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KU1 - KU4999 Australia",603,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KUQ1 - KUQ4990 New Zealand",473,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KV - Pacific area",16,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KWX - Antarctica",25,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations",7833,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ1165 - KZ1208 Trials",328,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ1165 - KZ1208 Trials|KZ1168 - KZ1208 War crime trials",324,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ1234 - KZ1236 Legal research. Legal bibliography",28,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ1249 - KZ1252 International law and other disciplines",54,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ1255 - KZ1273 Theory and principles",200,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ1255 - KZ1273 Theory and principles|KZ1267 - KZ1273 Domain of the law of nations",76,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ1284 - KZ1285.5 Methodology",16,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ1287 - KZ1296 Codification of the law of nations",88,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ1298 - KZ1304 The law of treaties. System of treaty law",120,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ1319 - KZ1327 International legal regimes",17,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ1329 - KZ3085 Early/Medieval development to ca. 1900. Ius Naturae et Gentium",413,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ1329 - KZ3085 Early/Medieval development to ca. 1900. Ius Naturae et Gentium|KZ1330 - KZ1339 Peace of Westphalia to the French Revolution (1648",4,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ1329 - KZ3085 Early/Medieval development to ca. 1900. Ius Naturae et Gentium|KZ1345 - KZ1369 French Revolution to the American Civil War (1789",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ1329 - KZ3085 Early/Medieval development to ca. 1900. Ius Naturae et Gentium|KZ1373 - KZ1387.2 American Civil War to the First Conference of the Hague (1861-1899)",3,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ1329 - KZ3085 Early/Medieval development to ca. 1900. Ius Naturae et Gentium|KZ2064 - KZ3085 Publicists. Writers on public international law",392,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ2 - KZ5.5 Bibliography",12,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ24 - KZ38 Societies, etc.",38,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ24 - KZ38 Societies, etc.|KZ27 - KZ37 National",21,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ3092 - KZ3405 20th century",371,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ3092 - KZ3405 20th century|KZ3110 - KZ3405 Publicists. Writers on public international law",333,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ3670 - KZ3881 Objects of the law of nations. Territory and its different parts",229,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ3900 - KZ5490 The international legal community and members",1189,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ3900 - KZ5490 The international legal community and members|KZ3910 - KZ5490 Subjects of the law of nations",1169,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ3900 - KZ5490 The international legal community and members|KZ3910 - KZ5490 Subjects of the law of nations|KZ4002 - KZ4080 The state",360,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ3900 - KZ5490 The international legal community and members|KZ3910 - KZ5490 Subjects of the law of nations|KZ4112 - KZ4820 By state",199,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ3900 - KZ5490 The international legal community and members|KZ3910 - KZ5490 Subjects of the law of nations|KZ4850 - KZ5490 Intergovernmental organizations. IGOs",524,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ3900 - KZ5490 The international legal community and members|KZ3910 - KZ5490 Subjects of the law of nations|KZ4850 - KZ5490 Intergovernmental organizations. IGOs|KZ4853 - KZ4934 The League of Nations",85,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ3900 - KZ5490 The international legal community and members|KZ3910 - KZ5490 Subjects of the law of nations|KZ4850 - KZ5490 Intergovernmental organizations. IGOs|KZ4935 - KZ5275 The United Nations",322,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ3900 - KZ5490 The international legal community and members|KZ3910 - KZ5490 Subjects of the law of nations|KZ4850 - KZ5490 Intergovernmental organizations. IGOs|KZ5330 - KZ5490 Regional organizations",5,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ5510 - KZ6299 International law of peace and peace enforcement",1185,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ5510 - KZ6299 International law of peace and peace enforcement|KZ5586 - KZ5893 The system of collective security",518,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ5510 - KZ6299 International law of peace and peace enforcement|KZ5586 - KZ5893 The system of collective security|KZ5615 - KZ5893 Arms control and disarmament regimes",496,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ5510 - KZ6299 International law of peace and peace enforcement|KZ5586 - KZ5893 The system of collective security|KZ5615 - KZ5893 Arms control and disarmament regimes|KZ5637 - KZ5645 Conventional arms control",8,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ5510 - KZ6299 International law of peace and peace enforcement|KZ5586 - KZ5893 The system of collective security|KZ5615 - KZ5893 Arms control and disarmament regimes|KZ5647 - KZ5686 Nuclear (Strategic) arms limitation",207,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ5510 - KZ6299 International law of peace and peace enforcement|KZ5586 - KZ5893 The system of collective security|KZ5615 - KZ5893 Arms control and disarmament regimes|KZ5687 - KZ5788.5 Nuclear weapon free zones and zones of peace",21,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ5510 - KZ6299 International law of peace and peace enforcement|KZ5586 - KZ5893 The system of collective security|KZ5615 - KZ5893 Arms control and disarmament regimes|KZ5834 - KZ5865 Other weapons of mass destruction",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ5510 - KZ6299 International law of peace and peace enforcement|KZ5586 - KZ5893 The system of collective security|KZ5615 - KZ5893 Arms control and disarmament regimes|KZ5870 - KZ5893 Mutual and balanced reduction of armed forces",14,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ60 - KZ62.5 Intergovernmental congresses and conferences",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ63 - KZ1152 Sources. Fontes juris gentium",1335,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ63 - KZ1152 Sources. Fontes juris gentium|KZ118 - KZ194 Treaties and other international agreements",113,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ63 - KZ1152 Sources. Fontes juris gentium|KZ118 - KZ194 Treaties and other international agreements|KZ119 - KZ165 To 1920",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ63 - KZ1152 Sources. Fontes juris gentium|KZ118 - KZ194 Treaties and other international agreements|KZ170 - KZ173 -1920",21,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ63 - KZ1152 Sources. Fontes juris gentium|KZ118 - KZ194 Treaties and other international agreements|KZ176 - KZ182.5 Boundary treaties",4,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ63 - KZ1152 Sources. Fontes juris gentium|KZ118 - KZ194 Treaties and other international agreements|KZ183 - KZ183.5 Treaties of arbitration, investigation, etc.",7,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ63 - KZ1152 Sources. Fontes juris gentium|KZ118 - KZ194 Treaties and other international agreements|KZ184 - KZ194 Peace treaties",58,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ63 - KZ1152 Sources. Fontes juris gentium|KZ199 - KZ218 Judicial decisions and arbitral awards. Law reports",145,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ63 - KZ1152 Sources. Fontes juris gentium|KZ221 - KZ1152 By region or country",936,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ6350 - KZ6785 Enforced settlement of international disputes",1208,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ6350 - KZ6785 Enforced settlement of international disputes|KZ6360 - KZ6373 Non-military coercion",140,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ6350 - KZ6785 Enforced settlement of international disputes|KZ6374 - KZ6377 Threat of force",106,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ6350 - KZ6785 Enforced settlement of international disputes|KZ6378 - KZ6785 Law of war and neutrality. Jus belli",894,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ6350 - KZ6785 Enforced settlement of international disputes|KZ6378 - KZ6785 Law of war and neutrality. Jus belli|KZ6427 - KZ6437 Warfare on land",44,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ6350 - KZ6785 Enforced settlement of international disputes|KZ6378 - KZ6785 Law of war and neutrality. Jus belli|KZ6440 - KZ6530 Humanitarian law",199,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ6350 - KZ6785 Enforced settlement of international disputes|KZ6378 - KZ6785 Law of war and neutrality. Jus belli|KZ6540 - KZ6660 Warfare on sea",169,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ6350 - KZ6785 Enforced settlement of international disputes|KZ6378 - KZ6785 Law of war and neutrality. Jus belli|KZ6665 - KZ6714 Air warfare",18,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZ2 - KZ6785 Law of nations|KZ6350 - KZ6785 Enforced settlement of international disputes|KZ6378 - KZ6785 Law of war and neutrality. Jus belli|KZ6730 - KZ6785 The end of war. Armistice. Surrender. Postliminy",12,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZA1002 - KZA4205 Law of the sea",688,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZA1002 - KZA4205 Law of the sea|KZA1040 - KZA1065 Intergovernmental congresses and conferences",24,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZA1002 - KZA4205 Law of the sea|KZA1118 - KZA1122 Treaties and other international agreements",55,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZA1002 - KZA4205 Law of the sea|KZA1340 - KZA1417 Concepts and principles",72,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZA1002 - KZA4205 Law of the sea|KZA1340 - KZA1417 Concepts and principles|KZA1348 - KZA1405 Mare liberum doctrine",59,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZA1002 - KZA4205 Law of the sea|KZA1430 - KZA1690 Maritime boundaries",175,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZA1002 - KZA4205 Law of the sea|KZA1430 - KZA1690 Maritime boundaries|KZA1630 - KZA1664 Continental shelf",31,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZA1002 - KZA4205 Law of the sea|KZA3481 - KZA3900 Marine resources conservation and development",2,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZA1002 - KZA4205 Law of the sea|KZA4130 - KZA4205 Public order of the oceans",4,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZD1002 - KZD6715 Space law. Law of outer space",186,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZD1002 - KZD6715 Space law. Law of outer space|KZD1118 - KZD1122 Treaties and other international agreements",16,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZD1002 - KZD6715 Space law. Law of outer space|KZD1340 - KZD1400 Concepts and principles. Theory",4,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZD1002 - KZD6715 Space law. Law of outer space|KZD1340 - KZD1400 Concepts and principles. Theory|KZD1390 - KZD1400 Regulated use theory",1,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZD1002 - KZD6715 Space law. Law of outer space|KZD1420 - KZD1455 Boundaries",4,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZD1002 - KZD6715 Space law. Law of outer space|KZD3489 - KZD4406 Peaceful uses of outer space",23,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZD1002 - KZD6715 Space law. Law of outer space|KZD3489 - KZD4406 Peaceful uses of outer space|KZD3489.5 - KZD3608 Space resources",3,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZD1002 - KZD6715 Space law. Law of outer space|KZD3489 - KZD4406 Peaceful uses of outer space|KZD4030 - KZD4326 Public order in space and outer space",9,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZD1002 - KZD6715 Space law. Law of outer space|KZD3489 - KZD4406 Peaceful uses of outer space|KZD4030 - KZD4326 Public order in space and outer space|KZD4080 - KZD4210 Space flight",5,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZD1002 - KZD6715 Space law. Law of outer space|KZD5614 - KZD6715 Un-peaceful uses of outer space",11,
        "K - Law in general. Comparative and uniform law. Jurisprudence|KZD1002 - KZD6715 Space law. Law of outer space|KZD5614 - KZD6715 Un-peaceful uses of outer space|KZD5648 - KZD5680.2 Disarmament and demilitarization regimes in outer space",2,
        "L - Education",124389,
        "L - Education|L7 - L991 Education (General)",2730,
        "L - Education|L7 - L991 Education (General)|L111 - L791 Official documents, reports, etc.",672,
        "L - Education|L7 - L991 Education (General)|L7 - L97 Periodicals. Societies",1432,
        "L - Education|L7 - L991 Education (General)|L797 - L898 Educational exhibitions and museums",12,
        "L - Education|L7 - L991 Education (General)|L900 - L991 Directories of educational institutions",493,
        "L - Education|LA5 - LA2396 History of education",13391,
        "L - Education|LA5 - LA2396 History of education|LA173 - LA186 Higher education",176,
        "L - Education|LA5 - LA2396 History of education|LA201 - LA398 United States",4110,
        "L - Education|LA5 - LA2396 History of education|LA2301 - LA2396 Biography",1015,
        "L - Education|LA5 - LA2396 History of education|LA31 - LA135 By period",480,
        "L - Education|LA5 - LA2396 History of education|LA410 - LA2284 Other regions or countries",7284,
        "L - Education|LA5 - LA2396 History of education|LA5 - LA25 General",260,
        "L - Education|LB5 - LB3640 Theory and practice of education",64760,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB1025 - LB1050.75 Teaching (Principles and practice)",14354,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB1025 - LB1050.75 Teaching (Principles and practice)|LB1049.9 - LB1050.75 Reading (General)",1817,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB1050.9 - LB1091 Educational psychology",3275,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB1101 - LB1139 Child study",1190,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB1139.2 - LB1139.5 Early childhood education",1037,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB1140 - LB1140.5 Preschool education. Nursery schools",630,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB1141 - LB1489 Kindergarten",195,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB1501 - LB1547 Primary education",659,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB1555 - LB1602 Elementary or public school education",6146,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB1603 - LB1696.6 Secondary education. High schools",1943,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB1705 - LB2286 Education and training of teachers and administrators",4668,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB1705 - LB2286 Education and training of teachers and administrators|LB1771 - LB1773 Certification of teachers",76,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB1705 - LB2286 Education and training of teachers and administrators|LB1775 - LB1785 Professional aspects of teaching and school administrators. Vocational guidance",1141,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB1705 - LB2286 Education and training of teachers and administrators|LB1805 - LB2151 State teachers colleges",494,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB1705 - LB2286 Education and training of teachers and administrators|LB1805 - LB2151 State teachers colleges|LB1811 - LB1987 United States",428,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB1705 - LB2286 Education and training of teachers and administrators|LB1805 - LB2151 State teachers colleges|LB1991 - LB2151 Other regions or countries",65,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB1705 - LB2286 Education and training of teachers and administrators|LB2165 - LB2278 Teacher training in universities and colleges",278,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2300 - LB2430 Higher education",10288,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2300 - LB2430 Higher education|LB2326.4 - LB2330 Institutions of higher education",656,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2300 - LB2430 Higher education|LB2331.7 - LB2335.8 Teaching personnel",853,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2300 - LB2430 Higher education|LB2335.86 - LB2335.88 Trade unions",16,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2300 - LB2430 Higher education|LB2335.95 - LB2337 Endowments, trusts, etc.",108,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2300 - LB2430 Higher education|LB2337.2 - LB2340.8 Student financial aid",426,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2300 - LB2430 Higher education|LB2341 - LB2341.95 Supervision and administration. Business management",1102,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2300 - LB2430 Higher education|LB2351 - LB2359 Admissions and entrance requirements",385,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2300 - LB2430 Higher education|LB2361 - LB2365 Curriculum",306,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2300 - LB2430 Higher education|LB2366 - LB2367.75 College examinations",86,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2300 - LB2430 Higher education|LB2371 - LB2372 Graduate education",238,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2300 - LB2430 Higher education|LB2381 - LB2391 Academic degrees",214,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2799 - LB2799.3 Educational consultants and consulting",19,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2801 - LB3095 School administration and organization",13306,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2801 - LB3095 School administration and organization|LB2831.6 - LB2831.99 Administrative personnel",715,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2801 - LB3095 School administration and organization|LB2832 - LB2844.1 Teaching personnel",1014,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2801 - LB3095 School administration and organization|LB2844.52 - LB2844.63 Trade unions",95,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2801 - LB3095 School administration and organization|LB3011 - LB3095 School management and discipline",4054,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2801 - LB3095 School administration and organization|LB3011 - LB3095 School management and discipline|LB3045 - LB3048 Textbooks",130,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB2801 - LB3095 School administration and organization|LB3011 - LB3095 School management and discipline|LB3050 - LB3060.87 Educational tests, measurements, evaluations and examinations",1620,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB3201 - LB3325 School architecture and equipment. School physical facilities. Campus planning",489,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB3497 - LB3499 Hygiene in universities and colleges",23,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB3525 - LB3575 Special days",16,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB3602 - LB3640 School life. Student manners and customs",589,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB5 - LB45 General",2557,
        "L - Education|LB5 - LB3640 Theory and practice of education|LB51 - LB885 Systems of individual educators and writers",1843,
        "L - Education|LC8 - LC6691 Special aspects of education",30114,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1200 - LC1203 Inclusive education",369,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons",11342,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC1401 - LC2572 Women",1002,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC2574 - LC2576 Gays. Lesbians. Bisexuals",55,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC2580 - LC2582 Student",13,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC2601 - LC2611 Education in developing countries",176,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC2630 - LC2638 Asian Americans. Asians in the United States",54,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC2667 - LC2698 Latin Americans. Hispanic Americans",321,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC2667 - LC2698 Latin Americans. Hispanic Americans|LC2680 - LC2688 Mexican Americans. Mexicans in the United States",86,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC2667 - LC2698 Latin Americans. Hispanic Americans|LC2690 - LC2698 Puerto Ricans. Puerto Ricans in the United States",8,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC2699 - LC2913 Blacks. African Americans",1400,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC3001 - LC3501 Asians",145,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC3503 - LC3520 Romanies. Gypsies",23,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC3530 - LC3540 Lapps",4,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC3551 - LC3593 Jews",13,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC3701 - LC3740 Immigrants or ethnic and linguistic minorities. Bilingual schools and bilingual education",1333,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC3745 - LC3747 Children of immigrants (First generation)",78,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC3950 - LC4806.5 Exceptional children and youth. Special education",5371,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC3950 - LC4806.5 Exceptional children and youth. Special education|LC3991 - LC4000 Gifted children and youth",712,
        "L - Education|LC8 - LC6691 Special aspects of education|LC1390 - LC5160.3 Education of special classes of persons|LC3950 - LC4806.5 Exceptional children and youth. Special education|LC4001 - LC4806.5 Children and youth with disabilities. Learning disabled children and youth",3791,
        "L - Education|LC8 - LC6691 Special aspects of education|LC251 - LC951 Moral and religious education",1620,
        "L - Education|LC8 - LC6691 Special aspects of education|LC251 - LC951 Moral and religious education|LC251 - LC318 Moral education. Character building",547,
        "L - Education|LC8 - LC6691 Special aspects of education|LC251 - LC951 Moral and religious education|LC321 - LC951 Religion and education. Education under church control",1073,
        "L - Education|LC8 - LC6691 Special aspects of education|LC251 - LC951 Moral and religious education|LC321 - LC951 Religion and education. Education under church control|LC361 - LC629 Christian education. Church education",773,
        "L - Education|LC8 - LC6691 Special aspects of education|LC251 - LC951 Moral and religious education|LC321 - LC951 Religion and education. Education under church control|LC361 - LC629 Christian education. Church education|LC446 - LC454 Orthodox Eastern Church",1,
        "L - Education|LC8 - LC6691 Special aspects of education|LC251 - LC951 Moral and religious education|LC321 - LC951 Religion and education. Education under church control|LC361 - LC629 Christian education. Church education|LC461 - LC510 Roman Catholic",395,
        "L - Education|LC8 - LC6691 Special aspects of education|LC251 - LC951 Moral and religious education|LC321 - LC951 Religion and education. Education under church control|LC361 - LC629 Christian education. Church education|LC531 - LC629 Protestant",119,
        "L - Education|LC8 - LC6691 Special aspects of education|LC251 - LC951 Moral and religious education|LC321 - LC951 Religion and education. Education under church control|LC701 - LC775 Jewish education",71,
        "L - Education|LC8 - LC6691 Special aspects of education|LC251 - LC951 Moral and religious education|LC321 - LC951 Religion and education. Education under church control|LC901 - LC915 Islamic education",197,
        "L - Education|LC8 - LC6691 Special aspects of education|LC5161 - LC5163 Fundamental education",5,
        "L - Education|LC8 - LC6691 Special aspects of education|LC5201 - LC6660.4 Education extension. Adult education. Continuing education",2520,
        "L - Education|LC8 - LC6691 Special aspects of education|LC5201 - LC6660.4 Education extension. Adult education. Continuing education|LC5451 - LC5493 Aged education",25,
        "L - Education|LC8 - LC6691 Special aspects of education|LC5201 - LC6660.4 Education extension. Adult education. Continuing education|LC5501 - LC5560 Evening schools",20,
        "L - Education|LC8 - LC6691 Special aspects of education|LC5201 - LC6660.4 Education extension. Adult education. Continuing education|LC5701 - LC5771 Vacation schools. Summer schools",40,
        "L - Education|LC8 - LC6691 Special aspects of education|LC5201 - LC6660.4 Education extension. Adult education. Continuing education|LC5800 - LC5808 Distance education",352,
        "L - Education|LC8 - LC6691 Special aspects of education|LC5201 - LC6660.4 Education extension. Adult education. Continuing education|LC5900 - LC6101 Correspondence schools",42,
        "L - Education|LC8 - LC6691 Special aspects of education|LC5201 - LC6660.4 Education extension. Adult education. Continuing education|LC6201 - LC6401 University extension",233,
        "L - Education|LC8 - LC6691 Special aspects of education|LC5201 - LC6660.4 Education extension. Adult education. Continuing education|LC6501 - LC6560.4 Lyceums and lecture courses. Forums",105,
        "L - Education|LC8 - LC6691 Special aspects of education|LC5201 - LC6660.4 Education extension. Adult education. Continuing education|LC6571 - LC6581 Radio and television extension courses. Instruction by radio and television",19,
        "L - Education|LC8 - LC6691 Special aspects of education|LC5201 - LC6660.4 Education extension. Adult education. Continuing education|LC6601 - LC6660.4 Reading circles and correspondence clubs",52,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education",9743,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC129 - LC139 Compulsory education",66,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC142 - LC148.5 Attendance. Dropouts",377,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC149 - LC161 Literacy. Illiteracy",992,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC165 - LC182 Higher education and the state",369,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC189 - LC214.53 Educational sociology",4378,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC189 - LC214.53 Educational sociology|LC212 - LC212.86 Discrimination in education",719,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC189 - LC214.53 Educational sociology|LC212.9 - LC212.93 Sex differences in education",120,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC189 - LC214.53 Educational sociology|LC213 - LC214.53 Educational equalization. Right to education",986,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC215 - LC238.4 Community and the school",918,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC215 - LC238.4 Community and the school|LC225 - LC226.7 Home and school",283,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC215 - LC238.4 Community and the school|LC230 - LC235 Parent-teacher associations. Home and school associations",29,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC215 - LC238.4 Community and the school|LC237 - LC238.4 College-university and the community",137,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC241 - LC245 Foundations, endowments, funds",51,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC65 - LC67.68 Economic aspects of education",525,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC68 - LC70 Demographic aspects of education",20,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC71 - LC120.4 Education and the state",1930,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC71 - LC120.4 Education and the state|LC107 - LC120.4 Public school question. Secularization. Religious instruction in the public schools",213,
        "L - Education|LC8 - LC6691 Special aspects of education|LC65 - LC245 Social aspects of education|LC71 - LC120.4 Education and the state|LC72 - LC72.5 Academic freedom",135,
        "L - Education|LC8 - LC6691 Special aspects of education|LC8 - LC59 Forms of education",592,
        "L - Education|LC8 - LC6691 Special aspects of education|LC8 - LC59 Forms of education|LC25 - LC33 Self-education. Self-culture",60,
        "L - Education|LC8 - LC6691 Special aspects of education|LC8 - LC59 Forms of education|LC37 - LC44.3 Home education",168,
        "L - Education|LC8 - LC6691 Special aspects of education|LC8 - LC59 Forms of education|LC45 - LC45.8 Nonformal education",64,
        "L - Education|LC8 - LC6691 Special aspects of education|LC8 - LC59 Forms of education|LC47 - LC58.7 Private school education",149,
        "L - Education|LC8 - LC6691 Special aspects of education|LC8 - LC59 Forms of education|LC47 - LC58.7 Private school education|LC58 - LC58.7 Preparatory schools. Preparatory school education",14,
        "L - Education|LC8 - LC6691 Special aspects of education|LC980 - LC1099.5 Types of education",3569,
        "L - Education|LC8 - LC6691 Special aspects of education|LC980 - LC1099.5 Types of education|LC1001 - LC1024 Humanistic education. liberal education",399,
        "L - Education|LC8 - LC6691 Special aspects of education|LC980 - LC1099.5 Types of education|LC1001 - LC1024 Humanistic education. liberal education|LC1022 - LC1022.25 Computer-assisted education",2,
        "L - Education|LC8 - LC6691 Special aspects of education|LC980 - LC1099.5 Types of education|LC1025 - LC1027 Collective education",2,
        "L - Education|LC8 - LC6691 Special aspects of education|LC980 - LC1099.5 Types of education|LC1031 - LC1034.5 Competency based education",112,
        "L - Education|LC8 - LC6691 Special aspects of education|LC980 - LC1099.5 Types of education|LC1035 - LC1035.8 Basic education. Basic skills education",33,
        "L - Education|LC8 - LC6691 Special aspects of education|LC980 - LC1099.5 Types of education|LC1036 - LC1036.8 Community education",25,
        "L - Education|LC8 - LC6691 Special aspects of education|LC980 - LC1099.5 Types of education|LC1037 - LC1037.8 Career education",127,
        "L - Education|LC8 - LC6691 Special aspects of education|LC980 - LC1099.5 Types of education|LC1041 - LC1048 Vocational education (General)",693,
        "L - Education|LC8 - LC6691 Special aspects of education|LC980 - LC1099.5 Types of education|LC1049 - LC1049.8 Cooperative education",25,
        "L - Education|LC8 - LC6691 Special aspects of education|LC980 - LC1099.5 Types of education|LC1051 - LC1072 Professional education",113,
        "L - Education|LC8 - LC6691 Special aspects of education|LC980 - LC1099.5 Types of education|LC1081 - LC1087.4 Industrial education (General)",238,
        "L - Education|LC8 - LC6691 Special aspects of education|LC980 - LC1099.5 Types of education|LC1090 - LC1091 Political education",298,
        "L - Education|LC8 - LC6691 Special aspects of education|LC980 - LC1099.5 Types of education|LC1099 - LC1099.5 Multicultural education (General)",887,
        "L - Education|LD13 - LD7501 Individual institutions",3553,
        "L - Education|LD13 - LD7501 Individual institutions|LD13 - LD7501 United States",3553,
        "L - Education|LD13 - LD7501 Individual institutions|LD13 - LD7501 United States|LD13 - LD7251 Universities. Colleges",3419,
        "L - Education|LD13 - LD7501 Individual institutions|LD13 - LD7501 United States|LD13 - LD7251 Universities. Colleges|LD7020 - LD7251 Women's colleges",90,
        "L - Education|LE3 - LE78 Individual institutions",616,
        "L - Education|LE3 - LE78 Individual institutions|LE3 - LE78 America (except United States)",616,
        "L - Education|LE3 - LE78 Individual institutions|LE3 - LE78 America (except United States)|LE11 - LE13 Central America",27,
        "L - Education|LE3 - LE78 Individual institutions|LE3 - LE78 America (except United States)|LE15 - LE17 West Indies",59,
        "L - Education|LE3 - LE78 Individual institutions|LE3 - LE78 America (except United States)|LE21 - LE78 South America",339,
        "L - Education|LE3 - LE78 Individual institutions|LE3 - LE78 America (except United States)|LE21 - LE78 South America|LE21 - LE23 Argentina",100,
        "L - Education|LE3 - LE78 Individual institutions|LE3 - LE78 America (except United States)|LE21 - LE78 South America|LE27 - LE29 Bolivia",2,
        "L - Education|LE3 - LE78 Individual institutions|LE3 - LE78 America (except United States)|LE21 - LE78 South America|LE31 - LE33 Brazil",18,
        "L - Education|LE3 - LE78 Individual institutions|LE3 - LE78 America (except United States)|LE21 - LE78 South America|LE36 - LE38 Chile",34,
        "L - Education|LE3 - LE78 Individual institutions|LE3 - LE78 America (except United States)|LE21 - LE78 South America|LE41 - LE43 Colombia",22,
        "L - Education|LE3 - LE78 Individual institutions|LE3 - LE78 America (except United States)|LE21 - LE78 South America|LE46 - LE48 Ecuador",9,
        "L - Education|LE3 - LE78 Individual institutions|LE3 - LE78 America (except United States)|LE21 - LE78 South America|LE61 - LE63 Paraguay",9,
        "L - Education|LE3 - LE78 Individual institutions|LE3 - LE78 America (except United States)|LE21 - LE78 South America|LE66 - LE68 Peru",36,
        "L - Education|LE3 - LE78 Individual institutions|LE3 - LE78 America (except United States)|LE21 - LE78 South America|LE71 - LE73 Uruguay",17,
        "L - Education|LE3 - LE78 Individual institutions|LE3 - LE78 America (except United States)|LE21 - LE78 South America|LE76 - LE78 Venezuela",87,
        "L - Education|LE3 - LE78 Individual institutions|LE3 - LE78 America (except United States)|LE3 - LE5 Canada",77,
        "L - Education|LE3 - LE78 Individual institutions|LE3 - LE78 America (except United States)|LE7 - LE9 Mexico",104,
        "L - Education|LF14 - LF5627 Individual institutions",2348,
        "L - Education|LF14 - LF5627 Individual institutions|LF1341 - LF1537 Austria",85,
        "L - Education|LF14 - LF5627 Individual institutions|LF14 - LF1257 Great Britain",1025,
        "L - Education|LF14 - LF5627 Individual institutions|LF14 - LF1257 Great Britain|LF1140 - LF1257 Wales",5,
        "L - Education|LF14 - LF5627 Individual institutions|LF14 - LF1257 Great Britain|LF14 - LF797 England",929,
        "L - Education|LF14 - LF5627 Individual institutions|LF14 - LF1257 Great Britain|LF800 - LF957 Ireland",33,
        "L - Education|LF14 - LF5627 Individual institutions|LF14 - LF1257 Great Britain|LF960 - LF1137 Scotland",34,
        "L - Education|LF14 - LF5627 Individual institutions|LF1541 - LF1549 Czech Republic",53,
        "L - Education|LF14 - LF5627 Individual institutions|LF1550 - LF1550.8 Slovakia",3,
        "L - Education|LF14 - LF5627 Individual institutions|LF1561 - LF1697 Hungary",14,
        "L - Education|LF14 - LF5627 Individual institutions|LF1705 - LF1709 Finland",1,
        "L - Education|LF14 - LF5627 Individual institutions|LF1711 - LF2397 France",93,
        "L - Education|LF14 - LF5627 Individual institutions|LF2402 - LF3197 Germany",390,
        "L - Education|LF14 - LF5627 Individual institutions|LF3211 - LF3247 Greece",7,
        "L - Education|LF14 - LF5627 Individual institutions|LF3248 - LF3897 Italy",93,
        "L - Education|LF14 - LF5627 Individual institutions|LF3911 - LF4067 Belgium",17,
        "L - Education|LF14 - LF5627 Individual institutions|LF4071 - LF4197 Netherlands",17,
        "L - Education|LF14 - LF5627 Individual institutions|LF4203 - LF4209 Poland",34,
        "L - Education|LF14 - LF5627 Individual institutions|LF4251 - LF4437 Russia (Federation)",269,
        "L - Education|LF14 - LF5627 Individual institutions|LF4440 - LF4441 Estonia",14,
        "L - Education|LF14 - LF5627 Individual institutions|LF4445 - LF4446 Lithuania",4,
        "L - Education|LF14 - LF5627 Individual institutions|LF4449.2 - LF4449.5 Ukraine",13,
        "L - Education|LF14 - LF5627 Individual institutions|LF4451 - LF4487 Denmark",3,
        "L - Education|LF14 - LF5627 Individual institutions|LF4493 - LF4537 Norway",1,
        "L - Education|LF14 - LF5627 Individual institutions|LF4539 - LF4607 Sweden",15,
        "L - Education|LF14 - LF5627 Individual institutions|LF4610 - LF4827 Spain",85,
        "L - Education|LF14 - LF5627 Individual institutions|LF4831 - LF4887 Portugal",23,
        "L - Education|LF14 - LF5627 Individual institutions|LF4901 - LF5047 Switzerland",21,
        "L - Education|LF14 - LF5627 Individual institutions|LF5051 - LF5627 Turkey and the Baltic states",34,
        "L - Education|LG21 - LG961 Individual institutions",553,
        "L - Education|LG21 - LG961 Individual institutions|LG21 - LG395 Asia",418,
        "L - Education|LG21 - LG961 Individual institutions|LG21 - LG395 Asia|LG171 - LG172 Indochina",3,
        "L - Education|LG21 - LG961 Individual institutions|LG21 - LG395 Asia|LG181 - LG184 Indonesia",2,
        "L - Education|LG21 - LG961 Individual institutions|LG21 - LG395 Asia|LG200 - LG227 Philippines",9,
        "L - Education|LG21 - LG961 Individual institutions|LG21 - LG395 Asia|LG240 - LG277 Japan",21,
        "L - Education|LG21 - LG961 Individual institutions|LG21 - LG395 Asia|LG281 - LG285 Korea",4,
        "L - Education|LG21 - LG961 Individual institutions|LG21 - LG395 Asia|LG302.2 - LG320 Former Soviet republics in Asia",6,
        "L - Education|LG21 - LG961 Individual institutions|LG21 - LG395 Asia|LG341 - LG345 Israel. Palestine",9,
        "L - Education|LG21 - LG961 Individual institutions|LG21 - LG395 Asia|LG351 - LG357 Lebanon",10,
        "L - Education|LG21 - LG961 Individual institutions|LG21 - LG395 Asia|LG361 - LG367 Syria",1,
        "L - Education|LG21 - LG961 Individual institutions|LG21 - LG395 Asia|LG51 - LG53 China",251,
        "L - Education|LG21 - LG961 Individual institutions|LG21 - LG395 Asia|LG55 - LG57 Taiwan",31,
        "L - Education|LG21 - LG961 Individual institutions|LG21 - LG395 Asia|LG60 - LG170.2 India. Pakistan. Bangladesh. Burma. Sri Lanka. Nepal",30,
        "L - Education|LG21 - LG961 Individual institutions|LG401 - LG681 Africa",97,
        "L - Education|LG21 - LG961 Individual institutions|LG401 - LG681 Africa|LG405 - LG411 South Africa",4,
        "L - Education|LG21 - LG961 Individual institutions|LG401 - LG681 Africa|LG421 - LG423 Uganda",7,
        "L - Education|LG21 - LG961 Individual institutions|LG401 - LG681 Africa|LG431 - LG438 Natal",2,
        "L - Education|LG21 - LG961 Individual institutions|LG401 - LG681 Africa|LG461 - LG462 Zimbabwe",1,
        "L - Education|LG21 - LG961 Individual institutions|LG401 - LG681 Africa|LG471 - LG475 Transvaal",5,
        "L - Education|LG21 - LG961 Individual institutions|LG401 - LG681 Africa|LG481 - LG505 West Africa",17,
        "L - Education|LG21 - LG961 Individual institutions|LG401 - LG681 Africa|LG481 - LG505 West Africa|LG481 - LG483 Nigeria",10,
        "L - Education|LG21 - LG961 Individual institutions|LG401 - LG681 Africa|LG541 - LG543 Madagascar",1,
        "L - Education|LG21 - LG961 Individual institutions|LG401 - LG681 Africa|LG545 - LG547 Rwanda",1,
        "L - Education|LG21 - LG961 Individual institutions|LG401 - LG681 Africa|LG551 - LG552 Senegal",5,
        "L - Education|LG21 - LG961 Individual institutions|LG401 - LG681 Africa|LG553 - LG554 Benin",5,
        "L - Education|LG21 - LG961 Individual institutions|LG401 - LG681 Africa|LG559 - LG560 Ivory Coast",1,
        "L - Education|LG21 - LG961 Individual institutions|LG401 - LG681 Africa|LG581 - LG593 German Africa (Former)",4,
        "L - Education|LG21 - LG961 Individual institutions|LG401 - LG681 Africa|LG631 - LG632 Morocco",1,
        "L - Education|LG21 - LG961 Individual institutions|LG715 - LG720 Australia",17,
        "L - Education|LG21 - LG961 Individual institutions|LG741 - LG745 New Zealand",4,
        "L - Education|LH1 - LH9 College and school magazines and papers",239,
        "L - Education|LJ3 - LJ165 Student fraternities and societies, United States",174,
        "L - Education|LT6 - LT501 Textbooks",50,
        "M - Music",205469,
        "M - Music|M1 - M5000 Music",124297,
        "M - Music|M1 - M5000 Music|M1 - M2.3 Collections",5140,
        "M - Music|M1 - M5000 Music|M1 - M2.3 Collections|M2 - M2.3 Collections of musical sources",4681,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music",52729,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1497 - M1998 Secular vocal music",36613,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1497 - M1998 Secular vocal music|M1500 - M1527.8 Dramatic music",7845,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1497 - M1998 Secular vocal music|M1528 - M1529.5 Duets, trios, etc., for solo voices",654,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1497 - M1998 Secular vocal music|M1530 - M1546.5 Choruses with orchestra or other ensemble",1148,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1497 - M1998 Secular vocal music|M1547 - M1600 Choruses, part-songs, etc., with accompaniment of keyboard or other solo instrument, or unaccompanied",3475,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1497 - M1998 Secular vocal music|M1611 - M1624.8 Songs",7673,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1497 - M1998 Secular vocal music|M1625 - M1626 Recitations with music",202,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1497 - M1998 Secular vocal music|M1627 - M1853 National music",13774,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1497 - M1998 Secular vocal music|M1900 - M1978 Songs (part and solo) of special character",627,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1497 - M1998 Secular vocal music|M1990 - M1998 Secular music for children",380,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1999 - M2199 Sacred vocal music",15921,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1999 - M2199 Sacred vocal music|M2000 - M2007 Oratorios",718,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1999 - M2199 Sacred vocal music|M2010 - M2017.6 Services",2111,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1999 - M2199 Sacred vocal music|M2018 - M2019.5 Duets, trios, etc. for solo voices",331,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1999 - M2199 Sacred vocal music|M2020 - M2036 Choruses, cantatas, etc.",2721,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1999 - M2199 Sacred vocal music|M2060 - M2101.5 Choruses, part-songs, etc., with accompaniment of keyboard or other solo instrument, or unaccompanied",6500,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1999 - M2199 Sacred vocal music|M2102 - M2114.8 Songs",1024,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1999 - M2199 Sacred vocal music|M2115 - M2146 Hymnals. Hymn collections",770,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1999 - M2199 Sacred vocal music|M2147 - M2188 Liturgy and ritual",361,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1999 - M2199 Sacred vocal music|M2147 - M2188 Liturgy and ritual|M2147 - M2155.6 Roman Catholic Church",274,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1999 - M2199 Sacred vocal music|M2147 - M2188 Liturgy and ritual|M2156 - M2160.87 Orthodox churches",28,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1999 - M2199 Sacred vocal music|M2147 - M2188 Liturgy and ritual|M2161 - M2183 Protestant churches",24,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1999 - M2199 Sacred vocal music|M2147 - M2188 Liturgy and ritual|M2186 - M2187 Jewish",20,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1999 - M2199 Sacred vocal music|M2190 - M2196 Sacred vocal music for children",102,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1999 - M2199 Sacred vocal music|M2198 - M2199 Gospel, revival, temperance, etc. songs M5000 Unidentified compositions",784,
        "M - Music|M1 - M5000 Music|M3 - M3.3 Collected works of individual composers",3591,
        "M - Music|M1 - M5000 Music|M5 - M1490 Instrumental music",64307,
        "M - Music|M1 - M5000 Music|M5 - M1490 Instrumental music|M1000 - M1075 Orchestra",13153,
        "M - Music|M1 - M5000 Music|M5 - M1490 Instrumental music|M1100 - M1160 String orchestra",2735,
        "M - Music|M1 - M5000 Music|M5 - M1490 Instrumental music|M1200 - M1269 Band",611,
        "M - Music|M1 - M5000 Music|M5 - M1490 Instrumental music|M1350 - M1353 Reduced orchestra",19,
        "M - Music|M1 - M5000 Music|M5 - M1490 Instrumental music|M1356 - M1356.2 Dance orchestra and instrumental ensembles",299,
        "M - Music|M1 - M5000 Music|M5 - M1490 Instrumental music|M1375 - M1420 Instrumental music for children",251,
        "M - Music|M1 - M5000 Music|M5 - M1490 Instrumental music|M6 - M175.5 Solo instruments",17547,
        "M - Music|ML1 - ML3930 Literature on music",66340,
        "M - Music|ML1 - ML3930 Literature on music|ML100 - ML109 Dictionaries. Encyclopedias",1311,
        "M - Music|ML1 - ML3930 Literature on music|ML110 - ML111.5 Music librarianship",194,
        "M - Music|ML1 - ML3930 Literature on music|ML112 - ML112.5 Music printing and publishing",121,
        "M - Music|ML1 - ML3930 Literature on music|ML112.8 - ML158.8 Bibliography",5125,
        "M - Music|ML1 - ML3930 Literature on music|ML112.8 - ML158.8 Bibliography|ML113 - ML118 International",234,
        "M - Music|ML1 - ML3930 Literature on music|ML112.8 - ML158.8 Bibliography|ML136 - ML158 Catalogs. Discography",2109,
        "M - Music|ML1 - ML3930 Literature on music|ML112.8 - ML158.8 Bibliography|ML158.4 - ML158.6 Video recordings",4,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism",44209,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML1400 - ML3275 Vocal music",4439,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML1400 - ML3275 Vocal music|ML1499 - ML1554 Choral music",103,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML1400 - ML3275 Vocal music|ML1600 - ML2881 Secular vocal music",2588,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML1400 - ML3275 Vocal music|ML2900 - ML3275 Sacred vocal music",1557,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML162 - ML197 Special periods",1412,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML162 - ML197 Special periods|ML162 - ML169 Ancient",134,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML162 - ML197 Special periods|ML169.8 - ML190 Medieval. Renaissance",849,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML162 - ML197 Special periods|ML193 - ML197 -1601",314,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML198 - ML360 By region or country",3835,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML198 - ML360 By region or country|ML198 - ML239 America",752,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML198 - ML360 By region or country|ML240 - ML325 Europe",2177,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML198 - ML360 By region or country|ML330 - ML345 Asia",644,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML3300 - ML3354 Program music",15,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML3400 - ML3465 Dance music",75,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML3469 - ML3541 Popular music",4174,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML3544 - ML3775 National music",2960,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML385 - ML429 Biography",22127,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML430 - ML455 Composition",353,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML459 - ML1380 Instruments and instrumental music",3314,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML459 - ML1380 Instruments and instrumental music|ML1100 - ML1165 Chamber music",127,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML459 - ML1380 Instruments and instrumental music|ML1200 - ML1270 Orchestra",287,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML459 - ML1380 Instruments and instrumental music|ML1299 - ML1354 Band",123,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML459 - ML1380 Instruments and instrumental music|ML465 - ML471 By period",40,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML459 - ML1380 Instruments and instrumental music|ML475 - ML547 By region or country",228,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML459 - ML1380 Instruments and instrumental music|ML475 - ML547 By region or country|ML475 - ML486 America",31,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML459 - ML1380 Instruments and instrumental music|ML475 - ML547 By region or country|ML489 - ML522 Europe",75,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML459 - ML1380 Instruments and instrumental music|ML475 - ML547 By region or country|ML525 - ML541 Asia",70,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML459 - ML1380 Instruments and instrumental music|ML549 - ML1093 Instruments",2182,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML459 - ML1380 Instruments and instrumental music|ML549 - ML1093 Instruments|ML1030 - ML1049 Percussion instruments",159,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML459 - ML1380 Instruments and instrumental music|ML549 - ML1093 Instruments|ML1049.8 - ML1091 Mechanical and other instruments",135,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML459 - ML1380 Instruments and instrumental music|ML549 - ML1093 Instruments|ML1091.8 - ML1093 Electronic instruments",80,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML459 - ML1380 Instruments and instrumental music|ML549 - ML1093 Instruments|ML549.8 - ML649 Organ",404,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML459 - ML1380 Instruments and instrumental music|ML549 - ML1093 Instruments|ML649.8 - ML747 Piano, clavichord, harpsichord, etc.",371,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML459 - ML1380 Instruments and instrumental music|ML549 - ML1093 Instruments|ML749.5 - ML927 Bowed string instruments",250,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML459 - ML1380 Instruments and instrumental music|ML549 - ML1093 Instruments|ML929 - ML990 Wind instruments",307,
        "M - Music|ML1 - ML3930 Literature on music|ML159 - ML3775 History and criticism|ML459 - ML1380 Instruments and instrumental music|ML549 - ML1093 Instruments|ML999 - ML1015 Plucked instruments",81,
        "M - Music|ML1 - ML3930 Literature on music|ML25 - ML28 Societies and organizations",190,
        "M - Music|ML1 - ML3930 Literature on music|ML32 - ML33 Institutions",11,
        "M - Music|ML1 - ML3930 Literature on music|ML35 - ML38 Festivals. Congresses",164,
        "M - Music|ML1 - ML3930 Literature on music|ML3800 - ML3923 Philosophy and physics of music",4335,
        "M - Music|ML1 - ML3930 Literature on music|ML3800 - ML3923 Philosophy and physics of music|ML3845 - ML3877 Aesthetics",1005,
        "M - Music|ML1 - ML3930 Literature on music|ML3800 - ML3923 Philosophy and physics of music|ML3880 - ML3915 Criticism",65,
        "M - Music|ML1 - ML3930 Literature on music|ML3928 - ML3930 Literature for children",24,
        "M - Music|ML1 - ML3930 Literature on music|ML40 - ML44 Programs",52,
        "M - Music|ML1 - ML3930 Literature on music|ML47 - ML54.8 Librettos. Scenarios",4322,
        "M - Music|ML1 - ML3930 Literature on music|ML62 - ML90 Special aspects. Including writings of musicians",1212,
        "M - Music|ML1 - ML3930 Literature on music|ML93 - ML96.5 Manuscripts, autographs, etc.",306,
        "M - Music|MT1 - MT960 Musical instruction and study",9475,
        "M - Music|MT1 - MT960 Musical instruction and study|MT1 - MT5 History and criticism",961,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques",2776,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT180 - MT198 Organ",92,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT200 - MT208 Reed organ",3,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT220 - MT255 Piano",594,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT259 - MT338 String instruments",397,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT259 - MT338 String instruments|MT260 - MT279.7 Violin",190,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT259 - MT338 String instruments|MT280 - MT298 Viola",40,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT259 - MT338 String instruments|MT300 - MT318 Violoncello",84,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT259 - MT338 String instruments|MT320 - MT334 Double bass",45,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT339 - MT533 Wind instruments",679,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT339 - MT533 Wind instruments|MT340 - MT359 Flute",241,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT339 - MT533 Wind instruments|MT360 - MT379 Oboe",34,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT339 - MT533 Wind instruments|MT380 - MT392 Clarinet (A, Bb, C, Eb, etc.)",59,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT339 - MT533 Wind instruments|MT400 - MT415 Bassoon",29,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT539 - MT654 Plucked instruments",517,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT539 - MT654 Plucked instruments|MT540 - MT557 Harp",16,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT539 - MT654 Plucked instruments|MT560 - MT570 Banjo",59,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT539 - MT654 Plucked instruments|MT580 - MT599 Guitar",351,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT539 - MT654 Plucked instruments|MT600 - MT612 Mandolin",14,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT539 - MT654 Plucked instruments|MT620 - MT634 Zither",4,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT539 - MT654 Plucked instruments|MT640 - MT654 Lute, balalaika, etc.",45,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT655 - MT725 Percussion and other instruments",253,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT728 - MT728.3 Chamber music",14,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT733 - MT733.6 Band",59,
        "M - Music|MT1 - MT960 Musical instruction and study|MT170 - MT810 Instrumental techniques|MT740 - MT810 Instrumental techniques for children",58,
        "M - Music|MT1 - MT960 Musical instruction and study|MT20 - MT32 Special methods",21,
        "M - Music|MT1 - MT960 Musical instruction and study|MT40 - MT67 Composition. Elements and techniques of music",906,
        "M - Music|MT1 - MT960 Musical instruction and study|MT40 - MT67 Composition. Elements and techniques of music|MT58 - MT67 Forms",151,
        "M - Music|MT1 - MT960 Musical instruction and study|MT5.5 - MT7 Music theory",900,
        "M - Music|MT1 - MT960 Musical instruction and study|MT70 - MT74 Instrumentation and orchestration",106,
        "M - Music|MT1 - MT960 Musical instruction and study|MT820 - MT915 Singing and vocal technique",659,
        "M - Music|MT1 - MT960 Musical instruction and study|MT820 - MT915 Singing and vocal technique|MT825 - MT850 Systems and methods",67,
        "M - Music|MT1 - MT960 Musical instruction and study|MT820 - MT915 Singing and vocal technique|MT855 - MT883 Special techniques",200,
        "M - Music|MT1 - MT960 Musical instruction and study|MT820 - MT915 Singing and vocal technique|MT898 - MT915 Techniques for children",9,
        "M - Music|MT1 - MT960 Musical instruction and study|MT90 - MT146 Analysis and appreciation of musical works",1542,
        "M - Music|MT1 - MT960 Musical instruction and study|MT90 - MT146 Analysis and appreciation of musical works|MT110 - MT115 Oratorios, cantatas, etc.",20,
        "M - Music|MT1 - MT960 Musical instruction and study|MT90 - MT146 Analysis and appreciation of musical works|MT125 - MT130 Orchestral music",72,
        "M - Music|MT1 - MT960 Musical instruction and study|MT90 - MT146 Analysis and appreciation of musical works|MT140 - MT145 Chamber and solo instrumental music",55,
        "M - Music|MT1 - MT960 Musical instruction and study|MT90 - MT146 Analysis and appreciation of musical works|MT95 - MT100 Opera, ballet, etc.",124,
        "M - Music|MT1 - MT960 Musical instruction and study|MT918 - MT948 School music",95,
        "M - Music|MT1 - MT960 Musical instruction and study|MT955 - MT956 Musical theater",77,
        "N - Fine Arts",158659,
        "N - Fine Arts|N1 - N9211 Visual arts",55095,
        "N - Fine Arts|N1 - N9211 Visual arts|N1 - N58 General",1723,
        "N - Fine Arts|N1 - N9211 Visual arts|N400 - N3990 Art museums, galleries, etc.",3969,
        "N - Fine Arts|N1 - N9211 Visual arts|N4390 - N5098 Exhibitions",702,
        "N - Fine Arts|N1 - N9211 Visual arts|N5198 - N5299 Private collections and collectors",923,
        "N - Fine Arts|N1 - N9211 Visual arts|N5300 - N7418 History",32735,
        "N - Fine Arts|N1 - N9211 Visual arts|N61 - N72 Theory. Philosophy. Aesthetics of the visual arts",1049,
        "N - Fine Arts|N1 - N9211 Visual arts|N7420 - N7525.8 General works",4206,
        "N - Fine Arts|N1 - N9211 Visual arts|N7560 - N8266 Special subjects of art",5562,
        "N - Fine Arts|N1 - N9211 Visual arts|N81 - N390 Study and teaching. Research",941,
        "N - Fine Arts|N1 - N9211 Visual arts|N8350 - N8356 Art as a profession. Artists",205,
        "N - Fine Arts|N1 - N9211 Visual arts|N8510 - N8553 Art studios, materials, etc.",102,
        "N - Fine Arts|N1 - N9211 Visual arts|N8554 - N8585 Examination and conservation of works of art",185,
        "N - Fine Arts|N1 - N9211 Visual arts|N8600 - N8675 Economics of art",690,
        "N - Fine Arts|N1 - N9211 Visual arts|N8700 - N9165 Art and the state. Public art",486,
        "N - Fine Arts|NA1 - NA9428 Architecture",25769,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA1 - NA60 General",418,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA100 - NA130 Architecture and the state",276,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA190 - NA1555.5 History",9838,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA2000 - NA2320 Study and teaching. Research",126,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA2335 - NA2360 Competitions",37,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA2400 - NA2460 Museums. Exhibitions",26,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA2500 - NA2599 General works",1778,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA2599.5 - NA2599.9 Architectural criticism",53,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA2695 - NA2793 Architectural drawing and design",815,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA2835 - NA4050 Details and decoration",866,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA4100 - NA8480 Special classes of buildings",8166,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA4100 - NA8480 Special classes of buildings|NA4100 - NA4145 Classed by material",75,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA4100 - NA8480 Special classes of buildings|NA4150 - NA4160 Classed by form",11,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA4100 - NA8480 Special classes of buildings|NA4170 - NA8480 Classed by use",8067,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA4100 - NA8480 Special classes of buildings|NA4170 - NA8480 Classed by use|NA4170 - NA7020 Public buildings",5026,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA4100 - NA8480 Special classes of buildings|NA4170 - NA8480 Classed by use|NA4170 - NA7020 Public buildings|NA4590 - NA5621 Religious architecture",2412,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA4100 - NA8480 Special classes of buildings|NA4170 - NA8480 Classed by use|NA7100 - NA7884 Domestic architecture. Houses. Dwellings",2802,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA4100 - NA8480 Special classes of buildings|NA4170 - NA8480 Classed by use|NA7910 - NA8125 Clubhouses, guild houses, etc.",9,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA4100 - NA8480 Special classes of buildings|NA4170 - NA8480 Classed by use|NA8200 - NA8260 Farm architecture",126,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA4100 - NA8480 Special classes of buildings|NA4170 - NA8480 Classed by use|NA8300 - NA8480 Outbuildings, gates, fences, etc.",104,
        "N - Fine Arts|NA1 - NA9428 Architecture|NA9000 - NA9428 Aesthetics of cities. City planning and beautifying",2943,
        "N - Fine Arts|NB1 - NB1952 Sculpture",8673,
        "N - Fine Arts|NB1 - NB1952 Sculpture|NB1 - NB50 General",129,
        "N - Fine Arts|NB1 - NB1952 Sculpture|NB1120 - NB1133 Study and teaching",1,
        "N - Fine Arts|NB1 - NB1952 Sculpture|NB1134 - NB1134.4 Competitions",1,
        "N - Fine Arts|NB1 - NB1952 Sculpture|NB1135 - NB1150 General works",63,
        "N - Fine Arts|NB1 - NB1952 Sculpture|NB1160 - NB1195 Designs and technique",54,
        "N - Fine Arts|NB1 - NB1952 Sculpture|NB1199 - NB1200 Restoration of sculptures",11,
        "N - Fine Arts|NB1 - NB1952 Sculpture|NB1203 - NB1270 Special materials",282,
        "N - Fine Arts|NB1 - NB1952 Sculpture|NB1272 - NB1291 Mobiles, color, sculpture gardens, etc.",149,
        "N - Fine Arts|NB1 - NB1952 Sculpture|NB1293 - NB1895 Special forms",548,
        "N - Fine Arts|NB1 - NB1952 Sculpture|NB1293 - NB1895 Special forms|NB1293 - NB1310 Portrait sculpture",122,
        "N - Fine Arts|NB1 - NB1952 Sculpture|NB1293 - NB1895 Special forms|NB1312 - NB1313 Equestrian statues",4,
        "N - Fine Arts|NB1 - NB1952 Sculpture|NB1293 - NB1895 Special forms|NB1330 - NB1685 Sculptural monuments",95,
        "N - Fine Arts|NB1 - NB1952 Sculpture|NB1293 - NB1895 Special forms|NB1750 - NB1793 Religious monuments and shrines",2,
        "N - Fine Arts|NB1 - NB1952 Sculpture|NB1293 - NB1895 Special forms|NB1800 - NB1880 Sepulchral monuments",267,
        "N - Fine Arts|NB1 - NB1952 Sculpture|NB1910 - NB1952 Special subjects",313,
        "N - Fine Arts|NB1 - NB1952 Sculpture|NB60 - NB1115 History. Including collective biography",7105,
        "N - Fine Arts|NC1 - NC1940 Drawing. Design. Illustration",9046,
        "N - Fine Arts|NC1 - NC1940 Drawing. Design. Illustration|NC1 - NC45 General. Including collective biography",358,
        "N - Fine Arts|NC1 - NC1940 Drawing. Design. Illustration|NC1280 - NC1284 Printed ephemera. Imagerie populaire",15,
        "N - Fine Arts|NC1 - NC1940 Drawing. Design. Illustration|NC1300 - NC1766 Pictorial humor, caricature, etc.",1717,
        "N - Fine Arts|NC1 - NC1940 Drawing. Design. Illustration|NC1800 - NC1850 Posters",233,
        "N - Fine Arts|NC1 - NC1940 Drawing. Design. Illustration|NC1860 - NC1896 Greeting cards, postcards, invitations, book jackets, etc.",160,
        "N - Fine Arts|NC1 - NC1940 Drawing. Design. Illustration|NC390 - NC670 Study and teaching",48,
        "N - Fine Arts|NC1 - NC1940 Drawing. Design. Illustration|NC50 - NC266 History of drawing",3077,
        "N - Fine Arts|NC1 - NC1940 Drawing. Design. Illustration|NC673 - NC677 Competitions",1,
        "N - Fine Arts|NC1 - NC1940 Drawing. Design. Illustration|NC703 - NC725 General works",97,
        "N - Fine Arts|NC1 - NC1940 Drawing. Design. Illustration|NC730 - NC758 Technique",213,
        "N - Fine Arts|NC1 - NC1940 Drawing. Design. Illustration|NC760 - NC825 Special subjects",186,
        "N - Fine Arts|NC1 - NC1940 Drawing. Design. Illustration|NC845 - NC915 Graphic art materials",120,
        "N - Fine Arts|NC1 - NC1940 Drawing. Design. Illustration|NC950 - NC996 Illustration",855,
        "N - Fine Arts|NC1 - NC1940 Drawing. Design. Illustration|NC997 - NC1003 Commercial art. Advertising art",590,
        "N - Fine Arts|ND25 - ND3416 Painting",32949,
        "N - Fine Arts|ND25 - ND3416 Painting|ND1115 - ND1120 Study and teaching",3,
        "N - Fine Arts|ND25 - ND3416 Painting|ND1130 - ND1156 General works",335,
        "N - Fine Arts|ND25 - ND3416 Painting|ND1288 - ND1460 Special subjects",1917,
        "N - Fine Arts|ND25 - ND3416 Painting|ND1288 - ND1460 Special subjects|ND1290 - ND1293 Human figure",21,
        "N - Fine Arts|ND25 - ND3416 Painting|ND1288 - ND1460 Special subjects|ND1300 - ND1337 Portraits",636,
        "N - Fine Arts|ND25 - ND3416 Painting|ND1288 - ND1460 Special subjects|ND1340 - ND1367 Landscape painting",479,
        "N - Fine Arts|ND25 - ND3416 Painting|ND1288 - ND1460 Special subjects|ND1370 - ND1375 Marine painting",37,
        "N - Fine Arts|ND25 - ND3416 Painting|ND1288 - ND1460 Special subjects|ND1380 - ND1383 Animals. Birds",9,
        "N - Fine Arts|ND25 - ND3416 Painting|ND1288 - ND1460 Special subjects|ND1385 - ND1388 Sports. Hunting, fishing, etc.",1,
        "N - Fine Arts|ND25 - ND3416 Painting|ND1288 - ND1460 Special subjects|ND1390 - ND1393 Still life",53,
        "N - Fine Arts|ND25 - ND3416 Painting|ND1288 - ND1460 Special subjects|ND1400 - ND1403 Flowers. Fruit. Trees",18,
        "N - Fine Arts|ND25 - ND3416 Painting|ND1288 - ND1460 Special subjects|ND1410 - ND1460 Other subjects",367,
        "N - Fine Arts|ND25 - ND3416 Painting|ND1470 - ND1625 Technique and materials",246,
        "N - Fine Arts|ND25 - ND3416 Painting|ND1630 - ND1662 Examination and conservation of paintings",78,
        "N - Fine Arts|ND25 - ND3416 Painting|ND1700 - ND2495 Watercolor painting",1018,
        "N - Fine Arts|ND25 - ND3416 Painting|ND25 - ND48 General",102,
        "N - Fine Arts|ND25 - ND3416 Painting|ND2550 - ND2733 Mural painting",382,
        "N - Fine Arts|ND25 - ND3416 Painting|ND2889 - ND3416 Illuminating of manuscripts and books",1739,
        "N - Fine Arts|ND25 - ND3416 Painting|ND49 - ND813 History",22083,
        "N - Fine Arts|NE1 - NE3002 Print media",5217,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1 - NE978 Printmaking and engraving",3004,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1 - NE978 Printmaking and engraving|NE1 - NE90 General",251,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1 - NE978 Printmaking and engraving|NE218 - NE330 Engraved portraits. Self",30,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1 - NE978 Printmaking and engraving|NE390 - NE395 Collected works",2,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1 - NE978 Printmaking and engraving|NE400 - NE773 History of printmaking",2305,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1 - NE978 Printmaking and engraving|NE830 - NE898 General works",151,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1 - NE978 Printmaking and engraving|NE951 - NE962 Special subjects",73,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1 - NE978 Printmaking and engraving|NE965 - NE965.3 Tradesmen's cards",3,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1 - NE978 Printmaking and engraving|NE975 - NE975.4 Competitions",2,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1000 - NE1352 Wood engraving",1018,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1000 - NE1352 Wood engraving|NE1000 - NE1027 General",12,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1000 - NE1352 Wood engraving|NE1030 - NE1196.3 History",421,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1000 - NE1352 Wood engraving|NE1220 - NE1233 General works",23,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1000 - NE1352 Wood engraving|NE1310 - NE1326.5 Japanese prints",299,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1000 - NE1352 Wood engraving|NE1330 - NE1336 Linoleum block prints",11,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1000 - NE1352 Wood engraving|NE1350 - NE1352 Other materials used in relief printing",2,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1400 - NE1879 Metal engraving",112,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1400 - NE1879 Metal engraving|NE1400 - NE1422 General",2,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1400 - NE1879 Metal engraving|NE1620 - NE1630 General works",5,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1400 - NE1879 Metal engraving|NE1634 - NE1749 History",29,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1400 - NE1879 Metal engraving|NE1750 - NE1775 Copper engraving",6,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1400 - NE1879 Metal engraving|NE1850 - NE1879 Color prints",36,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1940 - NE2232.5 Etching and aquatint",617,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1940 - NE2232.5 Etching and aquatint|NE1940 - NE1975 General",7,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1940 - NE2232.5 Etching and aquatint|NE1980 - NE2055.5 History",346,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1940 - NE2232.5 Etching and aquatint|NE2120 - NE2140 General works",30,
        "N - Fine Arts|NE1 - NE3002 Print media|NE1940 - NE2232.5 Etching and aquatint|NE2141 - NE2149 Special subjects",4,
        "N - Fine Arts|NE1 - NE3002 Print media|NE2236 - NE2240.6 Serigraphy",41,
        "N - Fine Arts|NE1 - NE3002 Print media|NE2242 - NE2246 Monotype (Printmaking)",9,
        "N - Fine Arts|NE1 - NE3002 Print media|NE2250 - NE2570 Lithography",396,
        "N - Fine Arts|NE1 - NE3002 Print media|NE2685 - NE2685.8 Lumiprints",1,
        "N - Fine Arts|NE1 - NE3002 Print media|NE2800 - NE2880 Printing of engravings",9,
        "N - Fine Arts|NE1 - NE3002 Print media|NE3000 - NE3002 Copying art. Copying machine art",3,
        "N - Fine Arts|NK1 - NK9990 Decorative arts",14340,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK1 - NK570 General",316,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK1135 - NK1149.5 Arts and crafts movement",73,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK1160 - NK1590 Decoration and ornament. Design",1182,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK1160 - NK1590 Decoration and ornament. Design|NK1160 - NK1174 General",79,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK1160 - NK1590 Decoration and ornament. Design|NK1175 - NK1498 History",629,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK1160 - NK1590 Decoration and ornament. Design|NK1505 - NK1535 General works",343,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK1160 - NK1590 Decoration and ornament. Design|NK1548 - NK1590 Special subjects for design",71,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK1648 - NK1678 Religious art",110,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK1700 - NK2195 Interior decoration. House decoration",472,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK1700 - NK2195 Interior decoration. House decoration|NK1700 - NK2138 General. History, etc.  Including special rooms",454,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK1700 - NK2195 Interior decoration. House decoration|NK2190 - NK2192 Church decoration",7,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK2200 - NK2750 Furniture",749,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK2775 - NK2898 Rugs and carpets",177,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK2975 - NK3049 Tapestries",92,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK3175 - NK3296.3 Upholstery. Drapery",7,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK3375 - NK3496.3 Wallpapers",31,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK3600 - NK9990 Other arts and art industries",9149,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK3600 - NK9990 Other arts and art industries|NK3700 - NK4695 Ceramics",3289,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK3600 - NK9990 Other arts and art industries|NK4700 - NK4890 Costume",80,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK3600 - NK9990 Other arts and art industries|NK5100 - NK5440 Glass",892,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK3600 - NK9990 Other arts and art industries|NK5500 - NK6060 Glyptic arts",443,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK3600 - NK9990 Other arts and art industries|NK6400 - NK8459 Metalwork",1702,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK3600 - NK9990 Other arts and art industries|NK8800 - NK9505.5 Textiles",1081,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK3600 - NK9990 Other arts and art industries|NK9600 - NK9955 Woodwork",306,
        "N - Fine Arts|NK1 - NK9990 Decorative arts|NK600 - NK806 History",343,
        "N - Fine Arts|NX1 - NX820 Arts in general",7352,
        "N - Fine Arts|NX1 - NX820 Arts in general|NX1 - NX260 General",2217,
        "N - Fine Arts|NX1 - NX820 Arts in general|NX280 - NX410 Study and teaching. Research",237,
        "N - Fine Arts|NX1 - NX820 Arts in general|NX420 - NX430 Exhibitions",24,
        "N - Fine Arts|NX1 - NX820 Arts in general|NX440 - NX632 History of the arts",3512,
        "N - Fine Arts|NX1 - NX820 Arts in general|NX650 - NX694 Special subjects, characters, persons, religious arts, etc.",850,
        "N - Fine Arts|NX1 - NX820 Arts in general|NX700 - NX750 Patronage of the arts",228,
        "N - Fine Arts|NX1 - NX820 Arts in general|NX760 - NX770 Administration of the arts",60,
        "N - Fine Arts|NX1 - NX820 Arts in general|NX798 - NX820 Arts centers and facilities",14,
        "P - Language and literature",1184172,
        "P - Language and literature|P1 - P1091 Philology. Linguistics",42433,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P1 - P85 General",8722,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P101 - P410 Language. Linguistic theory. Comparative grammar",21000,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P101 - P410 Language. Linguistic theory. Comparative grammar|P118 - P118.75 Language acquisition",1516,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P101 - P410 Language. Linguistic theory. Comparative grammar|P121 - P149 Science of language (Linguistics)",3144,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P101 - P410 Language. Linguistic theory. Comparative grammar|P201 - P299 Comparative grammar",4002,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P101 - P410 Language. Linguistic theory. Comparative grammar|P301 - P301.5 Style. Composition. Rhetoric",418,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P101 - P410 Language. Linguistic theory. Comparative grammar|P302 - P302.87 Discourse analysis",1533,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P101 - P410 Language. Linguistic theory. Comparative grammar|P306 - P310 Translating and interpreting",1538,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P101 - P410 Language. Linguistic theory. Comparative grammar|P321 - P324.5 Etymology",190,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P101 - P410 Language. Linguistic theory. Comparative grammar|P325 - P325.5 Semantics",736,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P101 - P410 Language. Linguistic theory. Comparative grammar|P326 - P326.5 Lexicology",110,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P101 - P410 Language. Linguistic theory. Comparative grammar|P327 - P327.5 Lexicography",174,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P101 - P410 Language. Linguistic theory. Comparative grammar|P375 - P381 Linguistic geography",172,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P501 - P769 Indo-European (Indo-Germanic) philology",549,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P87 - P96 Communication. Mass media",6850,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P87 - P96 Communication. Mass media|P95 - P95.6 Oral communication. Speech",723,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P901 - P1091 Extinct ancient or medieval languages",629,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P98 - P98.5 Computational linguistics. Natural language processing",487,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P99 - P99.4 Semiotics. Signs and symbols",694,
        "P - Language and literature|P1 - P1091 Philology. Linguistics|P99.5 - P99.6 Nonverbal communication",72,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature",33470,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA1 - PA199 Classical philology",2287,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA1000 - PA1179 Medieval and modern Greek language",265,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA2001 - PA2915 Latin philology and language",2114,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA201 - PA899 Greek philology and language",1263,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA3000 - PA3049 Classical literature",1349,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA3050 - PA4505 Greek literature",11786,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA3050 - PA4505 Greek literature|PA3051 - PA3285 Literary history",1695,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA3050 - PA4505 Greek literature|PA3300 - PA3516 Collections",868,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA3050 - PA4505 Greek literature|PA3520 - PA3564 Criticism, interpretation, etc.",98,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA3050 - PA4505 Greek literature|PA3601 - PA3681 Translations",623,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA3050 - PA4505 Greek literature|PA3818 - PA4505 Individual authors",8617,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA5000 - PA5660 Byzantine and modern Greek literature",984,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA5000 - PA5660 Byzantine and modern Greek literature|PA5301 - PA5637 Individual authors",694,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA6001 - PA6971 Roman literature",10982,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA6001 - PA6971 Roman literature|PA6001 - PA6095.5 Literary history",1080,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA6001 - PA6971 Roman literature|PA6101 - PA6140 Collections",446,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA6001 - PA6971 Roman literature|PA6141 - PA6144 Criticism, interpretation, etc.",52,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA6001 - PA6971 Roman literature|PA6155 - PA6191 Translations",342,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA6001 - PA6971 Roman literature|PA6202 - PA6971 Individual authors",9097,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA8001 - PA8595 Medieval and modern Latin literature",2639,
        "P - Language and literature|PA1 - PA8595 Greek language and literature. Latin language and literature|PA8001 - PA8595 Medieval and modern Latin literature|PA8200 - PA8595 Individual authors",1963,
        "P - Language and literature|PB1 - PB3029 Modern languages. Celtic languages",2979,
        "P - Language and literature|PB1 - PB3029 Modern languages. Celtic languages|PB1 - PB431 Modern languages",1218,
        "P - Language and literature|PB1 - PB3029 Modern languages. Celtic languages|PB1001 - PB3029 Celtic languages and literature",1760,
        "P - Language and literature|PB1 - PB3029 Modern languages. Celtic languages|PB1001 - PB3029 Celtic languages and literature|PB1101 - PB1200 Goidelic. Gaelic",4,
        "P - Language and literature|PB1 - PB3029 Modern languages. Celtic languages|PB1001 - PB3029 Celtic languages and literature|PB1201 - PB1449 Irish",864,
        "P - Language and literature|PB1 - PB3029 Modern languages. Celtic languages|PB1001 - PB3029 Celtic languages and literature|PB1501 - PB1709 Gaelic (Scottish Gaelic, Erse)",176,
        "P - Language and literature|PB1 - PB3029 Modern languages. Celtic languages|PB1001 - PB3029 Celtic languages and literature|PB1801 - PB1867 Manx",13,
        "P - Language and literature|PB1 - PB3029 Modern languages. Celtic languages|PB1001 - PB3029 Celtic languages and literature|PB2001 - PB3029 Brittanic group",541,
        "P - Language and literature|PB1 - PB3029 Modern languages. Celtic languages|PB1001 - PB3029 Celtic languages and literature|PB2001 - PB3029 Brittanic group|PB2101 - PB2499 Welsh. Cymric",412,
        "P - Language and literature|PB1 - PB3029 Modern languages. Celtic languages|PB1001 - PB3029 Celtic languages and literature|PB2001 - PB3029 Brittanic group|PB2501 - PB2621 Cornish",23,
        "P - Language and literature|PB1 - PB3029 Modern languages. Celtic languages|PB1001 - PB3029 Celtic languages and literature|PB2001 - PB3029 Brittanic group|PB2801 - PB2932 Breton. Armorican",82,
        "P - Language and literature|PB1 - PB3029 Modern languages. Celtic languages|PB1001 - PB3029 Celtic languages and literature|PB2001 - PB3029 Brittanic group|PB3001 - PB3029 Gaulish",11,
        "P - Language and literature|PC1 - PC5498 Romanic languages",18191,
        "P - Language and literature|PC1 - PC5498 Romanic languages|PC1 - PC400 General",1406,
        "P - Language and literature|PC1 - PC5498 Romanic languages|PC1001 - PC1977 Italian",1611,
        "P - Language and literature|PC1 - PC5498 Romanic languages|PC1981 - PC1984 Sardinian",24,
        "P - Language and literature|PC1 - PC5498 Romanic languages|PC2001 - PC3761 French",4607,
        "P - Language and literature|PC1 - PC5498 Romanic languages|PC2001 - PC3761 French|PC2700 - PC3708 Dialects. Provincialisms",1650,
        "P - Language and literature|PC1 - PC5498 Romanic languages|PC2001 - PC3761 French|PC2700 - PC3708 Dialects. Provincialisms|PC2813 - PC2898 Old French",206,
        "P - Language and literature|PC1 - PC5498 Romanic languages|PC2001 - PC3761 French|PC2700 - PC3708 Dialects. Provincialisms|PC3201 - PC3366 Provencal (Old)",504,
        "P - Language and literature|PC1 - PC5498 Romanic languages|PC2001 - PC3761 French|PC2700 - PC3708 Dialects. Provincialisms|PC3371 - PC3420.5 Modern patois of South France",210,
        "P - Language and literature|PC1 - PC5498 Romanic languages|PC2001 - PC3761 French|PC2700 - PC3708 Dialects. Provincialisms|PC3420.8 - PC3495 Langue d'oc dialects",76,
        "P - Language and literature|PC1 - PC5498 Romanic languages|PC2001 - PC3761 French|PC3721 - PC3761 Slang. Argot",139,
        "P - Language and literature|PC1 - PC5498 Romanic languages|PC3801 - PC3976 Catalan",4045,
        "P - Language and literature|PC1 - PC5498 Romanic languages|PC4001 - PC4977 Spanish",4091,
        "P - Language and literature|PC1 - PC5498 Romanic languages|PC5001 - PC5498 Portuguese",1173,
        "P - Language and literature|PC1 - PC5498 Romanic languages|PC601 - PC872 Romanian",1089,
        "P - Language and literature|PC1 - PC5498 Romanic languages|PC901 - PC986 Raeto-Romance. Including Romansh",137,
        "P - Language and literature|PD1 - PD7159 Germanic languages. Scandinavian languages",2561,
        "P - Language and literature|PD1 - PD7159 Germanic languages. Scandinavian languages|PD1 - PD780 General",1499,
        "P - Language and literature|PD1 - PD7159 Germanic languages. Scandinavian languages|PD1001 - PD1350 Old Germanic dialects",91,
        "P - Language and literature|PD1 - PD7159 Germanic languages. Scandinavian languages|PD1001 - PD1350 Old Germanic dialects|PD1101 - PD1211 Gothic",82,
        "P - Language and literature|PD1 - PD7159 Germanic languages. Scandinavian languages|PD1501 - PD7159 North Germanic. Scandinavian",974,
        "P - Language and literature|PD1 - PD7159 Germanic languages. Scandinavian languages|PD1501 - PD7159 North Germanic. Scandinavian|PD2201 - PD2393 Old Norse. Old Icelandic and Old Norwegian",145,
        "P - Language and literature|PD1 - PD7159 Germanic languages. Scandinavian languages|PD1501 - PD7159 North Germanic. Scandinavian|PD2401 - PD2446 Modern Icelandic",74,
        "P - Language and literature|PD1 - PD7159 Germanic languages. Scandinavian languages|PD1501 - PD7159 North Germanic. Scandinavian|PD2501 - PD2999 Norwegian",176,
        "P - Language and literature|PD1 - PD7159 Germanic languages. Scandinavian languages|PD1501 - PD7159 North Germanic. Scandinavian|PD3001 - PD3929 Danish",83,
        "P - Language and literature|PD1 - PD7159 Germanic languages. Scandinavian languages|PD1501 - PD7159 North Germanic. Scandinavian|PD5001 - PD5929 Swedish",225,
        "P - Language and literature|PE1 - PE3729 English language",14601,
        "P - Language and literature|PE1 - PE3729 English language|PE1001 - PE1693 Modern English",10859,
        "P - Language and literature|PE1 - PE3729 English language|PE101 - PE458 Anglo-Saxon. Old English",443,
        "P - Language and literature|PE1 - PE3729 English language|PE1700 - PE3602 Dialects. Provincialisms, etc.",1643,
        "P - Language and literature|PE1 - PE3729 English language|PE3701 - PE3729 Slang. Argot, etc.",223,
        "P - Language and literature|PE1 - PE3729 English language|PE501 - PE693 Middle English",190,
        "P - Language and literature|PE1 - PE3729 English language|PE814 - PE896 Early Modern English",31,
        "P - Language and literature|PF1 - PF5999 West Germanic languages",5088,
        "P - Language and literature|PF1 - PF5999 West Germanic languages|PF1 - PF979 Dutch",430,
        "P - Language and literature|PF1 - PF5999 West Germanic languages|PF1001 - PF1184 Flemish",6,
        "P - Language and literature|PF1 - PF5999 West Germanic languages|PF1401 - PF1541 Friesian",73,
        "P - Language and literature|PF1 - PF5999 West Germanic languages|PF3001 - PF5999 German",4581,
        "P - Language and literature|PF1 - PF5999 West Germanic languages|PF3001 - PF5999 German|PF3801 - PF3991 Old High German",291,
        "P - Language and literature|PF1 - PF5999 West Germanic languages|PF3001 - PF5999 German|PF3992 - PF4010 Old Saxon",60,
        "P - Language and literature|PF1 - PF5999 West Germanic languages|PF3001 - PF5999 German|PF4043 - PF4350 Middle High German",142,
        "P - Language and literature|PF1 - PF5999 West Germanic languages|PF3001 - PF5999 German|PF4501 - PF4596 Early Modern German",51,
        "P - Language and literature|PF1 - PF5999 West Germanic languages|PF3001 - PF5999 German|PF5000 - PF5951 Dialects. Provincialism, etc.",800,
        "P - Language and literature|PF1 - PF5999 West Germanic languages|PF3001 - PF5999 German|PF5971 - PF5999 Slang. Argot, etc.",48,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language",92710,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic",91159,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG1 - PG499 Slavic philology and languages (General)",1640,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG1151 - PG1199 Macedonian",391,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG1201 - PG1749 Serbo-Croatian",6237,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG1801 - PG1962 Slovenian",508,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2001 - PG2826 Russian language",4702,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2830 - PG2847 Belarusian",781,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature",51225,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG2900 - PG3190 History and criticism",7830,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG2900 - PG3190 History and criticism|PG2900 - PG2998 General",2682,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG2900 - PG3190 History and criticism|PG3001 - PG3026 Special periods",2554,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG2900 - PG3190 History and criticism|PG3041 - PG3065 Poetry",702,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG2900 - PG3190 History and criticism|PG3071 - PG3089 Drama",137,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG2900 - PG3190 History and criticism|PG3091 - PG3099 Prose",633,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG3199 - PG3299 Collections",2520,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG3199 - PG3299 Collections|PG3199 - PG3205 General",417,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG3199 - PG3299 Collections|PG3211 - PG3219 Translations",86,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG3199 - PG3299 Collections|PG3223 - PG3229.2 Special periods",486,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG3199 - PG3299 Collections|PG3230 - PG3238 Poetry",923,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG3199 - PG3299 Collections|PG3240 - PG3255 Drama",110,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG3199 - PG3299 Collections|PG3260 - PG3299 Prose",531,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG3300 - PG3493.96 Individual authors and works",39700,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG3300 - PG3493.96 Individual authors and works|PG3300 - PG3308 Early to 1700",274,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG3300 - PG3493.96 Individual authors and works|PG3310 - PG3319 18th century",388,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG3300 - PG3493.96 Individual authors and works|PG3320 - PG3447 1800-1870",7516,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG3300 - PG3493.96 Individual authors and works|PG3450 - PG3470 1870-1917",3317,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG3300 - PG3493.96 Individual authors and works|PG3475 - PG3476 1917-1960",5,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG3300 - PG3493.96 Individual authors and works|PG3477 - PG3490 1961-2000",14461,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG3300 - PG3493.96 Individual authors and works|PG3491.2 - PG3493.96 -2001",3121,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG3500 - PG3505 Provincial, local, etc.",277,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG2900 - PG3698 Russian literature|PG3515 - PG3550 Outside the Russian Federation",1013,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG3801 - PG3987 Ukrainian",2385,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG4001 - PG5146 Czech",10122,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG500 - PG585 Slavic literature (General)",483,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG5201 - PG5546 Slovak",2580,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG5631 - PG5689 Sorbian (Wendic)",76,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG6001 - PG7446 Polish",7772,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG601 - PG716 Church Slavic",453,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG7900 - PG7925 Lechitic dialects",48,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG1 - PG7925 Slavic|PG801 - PG1146 Bulgarian",1990,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG8001 - PG9146 Baltic",1269,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG8001 - PG9146 Baltic|PG8201 - PG8208 Old Prussian",13,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG8001 - PG9146 Baltic|PG8501 - PG8772 Lithuanian",320,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG8001 - PG9146 Baltic|PG8801 - PG9146 Latvian",876,
        "P - Language and literature|PG1 - PG9665 Slavic languages. Baltic languages. Albanian language|PG9501 - PG9665 Albanian",287,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language",4942,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH1 - PH87 General",206,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH101 - PH405 Finnish",361,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH1201 - PH1409 Ugric languages",35,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH2001 - PH3445 Hungarian",3543,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH3801 - PH3820 Samoyedic languages",11,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH5001 - PH5490 Basque",284,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH501 - PH1109 Other Finnic languages and dialects",511,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH501 - PH1109 Other Finnic languages and dialects|PH1001 - PH1079 Permic",48,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH501 - PH1109 Other Finnic languages and dialects|PH1101 - PH1109 Udmurt",35,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH501 - PH1109 Other Finnic languages and dialects|PH501 - PH509 Karelian",21,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH501 - PH1109 Other Finnic languages and dialects|PH531 - PH539 Ludic",1,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH501 - PH1109 Other Finnic languages and dialects|PH541 - PH549 Veps",2,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH501 - PH1109 Other Finnic languages and dialects|PH551 - PH559 Ingrian",3,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH501 - PH1109 Other Finnic languages and dialects|PH561 - PH569 Votic",2,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH501 - PH1109 Other Finnic languages and dialects|PH581 - PH589 Livonian",2,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH501 - PH1109 Other Finnic languages and dialects|PH601 - PH671 Estonian",308,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH501 - PH1109 Other Finnic languages and dialects|PH701 - PH735 Sami",22,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH501 - PH1109 Other Finnic languages and dialects|PH751 - PH785 Mordvin",24,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH501 - PH1109 Other Finnic languages and dialects|PH801 - PH836 Mari",31,
        "P - Language and literature|PH1 - PH5490 Uralic languages. Basque language|PH91 - PH98.5 Finnic. Baltic-Finnic",18,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature",17023,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ1 - PJ489 General",725,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ1 - PJ489 General|PJ1 - PJ195 Languages",561,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ1 - PJ489 General|PJ306 - PJ489 Literature",163,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ1001 - PJ1989 Egyptology",615,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ1001 - PJ1989 Egyptology|PJ1091 - PJ1109 Egyptian writing and its decipherment",57,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ1001 - PJ1989 Egyptology|PJ1111 - PJ1446 Language",117,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ1001 - PJ1989 Egyptology|PJ1481 - PJ1989 Literature. Inscriptions",332,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ2001 - PJ2199 Coptic",54,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ2340 - PJ2399 Libyco-Berber languages. Berber languages",103,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ2340 - PJ2399 Libyco-Berber languages. Berber languages|PJ2353 - PJ2367 Libyan group",3,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ2340 - PJ2399 Libyco-Berber languages. Berber languages|PJ2369 - PJ2399 Berber languages",78,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ2401 - PJ2594 Cushitic languages",118,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ3001 - PJ3097 Semitic philology and literature",193,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ4001 - PJ4091 Sumerian",219,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ4101 - PJ4197 West and North Semitic languages",105,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ4101 - PJ4197 West and North Semitic languages|PJ4171 - PJ4197 Phoenician-Punic",20,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ4501 - PJ5192 Hebrew",3667,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ4501 - PJ5192 Hebrew|PJ4543 - PJ4937 Language (Biblical and modern)",655,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ4501 - PJ5192 Hebrew|PJ4951 - PJ4996 Medieval Hebrew",8,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ4501 - PJ5192 Hebrew|PJ5001 - PJ5060 Literature",1983,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ4501 - PJ5192 Hebrew|PJ5001 - PJ5060 Literature|PJ5050 - PJ5055.51 Individual authors and works",1472,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ4501 - PJ5192 Hebrew|PJ5061 - PJ5192 Other languages used by Jews",976,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ4501 - PJ5192 Hebrew|PJ5061 - PJ5192 Other languages used by Jews|PJ5111 - PJ5192 Yiddish",923,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ5201 - PJ5329.5 Aramaic",152,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ5201 - PJ5329.5 Aramaic|PJ5211 - PJ5289 West Aramaic",52,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ5201 - PJ5329.5 Aramaic|PJ5211 - PJ5289 West Aramaic|PJ5211 - PJ5219.5 Biblical (Chaldaic)",13,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ5201 - PJ5329.5 Aramaic|PJ5211 - PJ5289 West Aramaic|PJ5241 - PJ5249 Christian Palestinian",2,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ5201 - PJ5329.5 Aramaic|PJ5211 - PJ5289 West Aramaic|PJ5251 - PJ5259 Jewish Palestinian",9,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ5201 - PJ5329.5 Aramaic|PJ5211 - PJ5289 West Aramaic|PJ5271 - PJ5279 Samaritan",6,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ5201 - PJ5329.5 Aramaic|PJ5211 - PJ5289 West Aramaic|PJ5281 - PJ5289 Neo-Aramaic",13,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ5201 - PJ5329.5 Aramaic|PJ5301 - PJ5329.5 East Aramaic",13,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ5201 - PJ5329.5 Aramaic|PJ5301 - PJ5329.5 East Aramaic|PJ5321 - PJ5329.5 Mandaean",7,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ601 - PJ989 Special groups",57,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ601 - PJ989 Special groups|PJ601 - PJ621 Christian Oriental",4,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ601 - PJ989 Special groups|PJ701 - PJ989 Islamic",53,
        "P - Language and literature|PJ1 - PJ9500 Oriental languages and literature|PJ991 - PJ995 Afroasiatic languages",27,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature",17976,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK1 - PK85 General",46,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages",10712,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1001 - PK1095 Pali",35,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK101 - PK185 General",171,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1201 - PK1409.5 Prakrit",23,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1421 - PK1429.5 Apabhrams'a",22,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1471 - PK1490 Middle Indo-Aryan dialects",4,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages",9835,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects",9749,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK1550 - PK1569 Assamese",33,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK1651 - PK1799 Bengali",958,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK1801 - PK1831.95 Bihari",109,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK1841 - PK1870.95 Gujarati",133,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK1931 - PK2212 Hindi, Urdu, Hindustani languages and literatures",7291,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK1931 - PK2212 Hindi, Urdu, Hindustani languages and literatures|PK1931 - PK1970 Hindi language",558,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK1931 - PK2212 Hindi, Urdu, Hindustani languages and literatures|PK1971 - PK1979.5 Urdu language",113,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK1931 - PK2212 Hindi, Urdu, Hindustani languages and literatures|PK1981 - PK2000 Hindustani language",21,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK1931 - PK2212 Hindi, Urdu, Hindustani languages and literatures|PK2030 - PK2142 Hindi, Hindustani literatures",4124,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK1931 - PK2212 Hindi, Urdu, Hindustani languages and literatures|PK2151 - PK2212 Urdu literature",2475,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK2261 - PK2270.9 Lahnda",13,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK2351 - PK2418 Marathi",45,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK2461 - PK2479 Marwari",7,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK2561 - PK2579.5 Oriya",221,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK2591 - PK2610 Pahari",107,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK2631 - PK2659 Panjabi",86,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK2701 - PK2708.9 Rajasthani",38,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK2781 - PK2790 Sindhi",42,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK2801 - PK2891 Sinhalese (Singhalese)",44,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK2892 - PK2892.95 Siraiki",5,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK1501 - PK2899 Modern Indo-Aryan languages|PK1550 - PK2899 Particular languages and dialects|PK2896 - PK2899 Romani",32,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK201 - PK379 Vedic",82,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK101 - PK2899 Indo-Aryan languages|PK401 - PK976 Sanskrit",534,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK2901 - PK5471 Indo-Aryan literature",1598,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK2901 - PK5471 Indo-Aryan literature|PK2901 - PK2979 General",629,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK2901 - PK5471 Indo-Aryan literature|PK3591 - PK4485 Sanskrit",596,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK2901 - PK5471 Indo-Aryan literature|PK3591 - PK4485 Sanskrit|PK3791 - PK3799 Individual authors and works",370,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK2901 - PK5471 Indo-Aryan literature|PK3591 - PK4485 Sanskrit|PK3801 - PK4251 Special subjects",7,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK2901 - PK5471 Indo-Aryan literature|PK3591 - PK4485 Sanskrit|PK4471 - PK4485 Translations",28,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK2901 - PK5471 Indo-Aryan literature|PK4501 - PK4681 Pali literature",22,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK2901 - PK5471 Indo-Aryan literature|PK4990 - PK5046 Prakrit literature",34,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK2901 - PK5471 Indo-Aryan literature|PK5401 - PK5471 Modern Indo-Aryan literature",288,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK6001 - PK6996 Iranian philology and literature",4675,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK6001 - PK6996 Iranian philology and literature|PK6001 - PK6099 General",80,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK6001 - PK6996 Iranian philology and literature|PK6101 - PK6119 Avestan",51,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK6001 - PK6996 Iranian philology and literature|PK6121 - PK6129 Old Persian",13,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK6001 - PK6996 Iranian philology and literature|PK6135 - PK6199.9 Middle Iranian languages",51,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK6001 - PK6996 Iranian philology and literature|PK6135 - PK6199.9 Middle Iranian languages|PK6141 - PK6199.5 Pahlavi",35,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK6001 - PK6996 Iranian philology and literature|PK6201 - PK6599.7 New Persian",4183,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK6001 - PK6996 Iranian philology and literature|PK6201 - PK6599.7 New Persian|PK6201 - PK6399 Language",333,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK6001 - PK6996 Iranian philology and literature|PK6201 - PK6599.7 New Persian|PK6400 - PK6599.7 Literature",3855,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK6001 - PK6996 Iranian philology and literature|PK6201 - PK6599.7 New Persian|PK6400 - PK6599.7 Literature|PK6450.9 - PK6562.35 Individual authors or works",3064,
        "P - Language and literature|PK1 - PK9601 Indo-Iranian languages and literature|PK6001 - PK6996 Iranian philology and literature|PK6701 - PK6821 Afghan (Pashto, Pushto, Pushtu, etc.)",102,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania",60110,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL1 - PL481 Ural-Altaic languages",2278,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL1 - PL481 Ural-Altaic languages|PL21 - PL396 Turkic languages",1885,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL1 - PL481 Ural-Altaic languages|PL400 - PL431 Mongolian languages",252,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL1 - PL481 Ural-Altaic languages|PL450 - PL481 Tungus Manchu languages",60,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL1001 - PL3208 Chinese language and literature",40812,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL1001 - PL3208 Chinese language and literature|PL1001 - PL1960 Chinese language",3927,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL1001 - PL3208 Chinese language and literature|PL2250 - PL3208 Chinese literature",36874,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL1001 - PL3208 Chinese language and literature|PL2250 - PL3208 Chinese literature|PL2250 - PL2443 History and criticism",6158,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL1001 - PL3208 Chinese language and literature|PL2250 - PL3208 Chinese literature|PL2450 - PL2659 Collections",4905,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL1001 - PL3208 Chinese language and literature|PL2250 - PL3208 Chinese literature|PL2661 - PL2979 Individual authors and works",24016,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL1001 - PL3208 Chinese language and literature|PL2250 - PL3208 Chinese literature|PL3030 - PL3208 Provincial, local, colonial, etc.",1225,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL3301 - PL3311 Non-Chinese languages of China",14,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL3501 - PL3509 Non-Aryan languages of India and Southeastern Asia in general",39,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL3521 - PL4001 Sino-Tibetan languages",328,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL3521 - PL4001 Sino-Tibetan languages|PL3551 - PL4001 Tibeto-Burman languages",309,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL3521 - PL4001 Sino-Tibetan languages|PL3551 - PL4001 Tibeto-Burman languages|PL3561 - PL3801 Tibeto-Himalayan languages",188,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL3521 - PL4001 Sino-Tibetan languages|PL3551 - PL4001 Tibeto-Burman languages|PL3561 - PL3801 Tibeto-Himalayan languages|PL3601 - PL3775 Tibetan",175,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL3521 - PL4001 Sino-Tibetan languages|PL3551 - PL4001 Tibeto-Burman languages|PL3561 - PL3801 Tibeto-Himalayan languages|PL3781 - PL3801 Himalayan languages",7,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL3521 - PL4001 Sino-Tibetan languages|PL3551 - PL4001 Tibeto-Burman languages|PL3851 - PL4001 Assam and Burma",50,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL4051 - PL4054 Karen languages",3,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL4070 - PL4074 Miao-Yao languages",14,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL4281 - PL4587 Austroasiatic languages",341,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL4281 - PL4587 Austroasiatic languages|PL4301 - PL4470 Mon-Khmer (Mon-Anam) languages",291,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL4281 - PL4587 Austroasiatic languages|PL4301 - PL4470 Mon-Khmer (Mon-Anam) languages|PL4371 - PL4379 Vietnamese. Annamese",197,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL4281 - PL4587 Austroasiatic languages|PL4301 - PL4470 Mon-Khmer (Mon-Anam) languages|PL4423 - PL4470 Bru, Chrau, Khasi, Muong, etc.",20,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL4281 - PL4587 Austroasiatic languages|PL4471 - PL4471.5 Nicobarese",2,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL4281 - PL4587 Austroasiatic languages|PL4490 - PL4498 Chamic languages",3,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL4281 - PL4587 Austroasiatic languages|PL4501 - PL4587 Munda languages (Kolarian languages)",29,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL4601 - PL4890 Dravidian languages",2786,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL490 - PL495 Far Eastern languages and literature",51,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL5001 - PL7511 Languages of Oceania",1812,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL5001 - PL7511 Languages of Oceania|PL5001 - PL7101 Austronesian, Papuan, and Australian languages",1652,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL5001 - PL7511 Languages of Oceania|PL5001 - PL7101 Austronesian, Papuan, and Australian languages|PL5051 - PL5497 Malayan (Indonesian) languages",662,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL5001 - PL7511 Languages of Oceania|PL5001 - PL7101 Austronesian, Papuan, and Australian languages|PL5501 - PL6135 Philippine languages",290,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL5001 - PL7511 Languages of Oceania|PL5001 - PL7101 Austronesian, Papuan, and Australian languages|PL6145 - PL6167 Taiwan languages",11,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL5001 - PL7511 Languages of Oceania|PL5001 - PL7101 Austronesian, Papuan, and Australian languages|PL6191 - PL6341 Micronesian and Melanesian languages",188,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL5001 - PL7511 Languages of Oceania|PL5001 - PL7101 Austronesian, Papuan, and Australian languages|PL6401 - PL6551 Polynesian languages",153,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL5001 - PL7511 Languages of Oceania|PL5001 - PL7101 Austronesian, Papuan, and Australian languages|PL6601 - PL6621 Papuan languages",50,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL5001 - PL7511 Languages of Oceania|PL5001 - PL7101 Austronesian, Papuan, and Australian languages|PL7001 - PL7101 Australian languages",94,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL501 - PL889 Japanese language and literature",5784,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL501 - PL889 Japanese language and literature|PL501 - PL699 Japanese language",1110,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL501 - PL889 Japanese language and literature|PL700 - PL889 Japanese literature",4676,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL501 - PL889 Japanese language and literature|PL700 - PL889 Japanese literature|PL700 - PL751.5 History and criticism",557,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL501 - PL889 Japanese language and literature|PL700 - PL889 Japanese literature|PL752 - PL783 Collections",438,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL501 - PL889 Japanese language and literature|PL700 - PL889 Japanese literature|PL784 - PL866 Individual authors and works",3320,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL501 - PL889 Japanese language and literature|PL700 - PL889 Japanese literature|PL885 - PL889 Local literature",32,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL8000 - PL8844 African languages and literature",3467,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL8000 - PL8844 African languages and literature|PL8000 - PL8009 Languages",216,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL8000 - PL8844 African languages and literature|PL8009.5 - PL8014 Literature",527,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL8000 - PL8844 African languages and literature|PL8015 - PL8021 Languages. By region or country",38,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL8000 - PL8844 African languages and literature|PL8024 - PL8027 Special families of languages",142,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL8000 - PL8844 African languages and literature|PL8035 - PL8844 Special languages (alphabetically)",2328,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL901 - PL998 Korean language and literature",1829,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL901 - PL998 Korean language and literature|PL901 - PL949 Korean language",584,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL901 - PL998 Korean language and literature|PL950 - PL998 Korean literature",1242,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL901 - PL998 Korean language and literature|PL950 - PL998 Korean literature|PL950.2 - PL969.5 History and criticism",153,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL901 - PL998 Korean language and literature|PL950 - PL998 Korean literature|PL969.8 - PL985 Collections",182,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL901 - PL998 Korean language and literature|PL950 - PL998 Korean literature|PL986 - PL993 Individual authors and works",660,
        "P - Language and literature|PL1 - PL8844 Languages and literatures of Eastern Asia, Africa, Oceania|PL901 - PL998 Korean language and literature|PL950 - PL998 Korean literature|PL997 - PL998 Local literature",2,
        "P - Language and literature|PM1 - PM9021 Hyperborean, Indian, and artificial languages",4453,
        "P - Language and literature|PM1 - PM9021 Hyperborean, Indian, and artificial languages|PM1 - PM94 Hyperborean languages of Arctic Asia and America",148,
        "P - Language and literature|PM1 - PM9021 Hyperborean, Indian, and artificial languages|PM101 - PM2711 American languages (Aboriginal)",923,
        "P - Language and literature|PM1 - PM9021 Hyperborean, Indian, and artificial languages|PM101 - PM2711 American languages (Aboriginal)|PM231 - PM355 American languages of British North America",19,
        "P - Language and literature|PM1 - PM9021 Hyperborean, Indian, and artificial languages|PM101 - PM2711 American languages (Aboriginal)|PM401 - PM501 American languages of the United States (and Mexico)",14,
        "P - Language and literature|PM1 - PM9021 Hyperborean, Indian, and artificial languages|PM101 - PM2711 American languages (Aboriginal)|PM549 - PM2711 Special languages of the United States and Canada (alphabetically)",604,
        "P - Language and literature|PM1 - PM9021 Hyperborean, Indian, and artificial languages|PM3001 - PM4566 Languages of Mexico and Central America",1436,
        "P - Language and literature|PM1 - PM9021 Hyperborean, Indian, and artificial languages|PM5001 - PM7356 Languages of South America and the West Indies",981,
        "P - Language and literature|PM1 - PM9021 Hyperborean, Indian, and artificial languages|PM7801 - PM7895 Mixed languages",678,
        "P - Language and literature|PM1 - PM9021 Hyperborean, Indian, and artificial languages|PM7801 - PM7895 Mixed languages|PM7831 - PM7875 Creole languages",509,
        "P - Language and literature|PM1 - PM9021 Hyperborean, Indian, and artificial languages|PM8001 - PM8995 Artificial languages",233,
        "P - Language and literature|PM1 - PM9021 Hyperborean, Indian, and artificial languages|PM8001 - PM8995 Artificial languages|PM8201 - PM8298 Esperanto",81,
        "P - Language and literature|PM1 - PM9021 Hyperborean, Indian, and artificial languages|PM9001 - PM9021 Secret languages",1,
        "P - Language and literature|PN1 - PN6790 Literature (General)",145161,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1 - PN9 Periodicals",756,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN101 - PN245 Authorship",3935,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN101 - PN245 Authorship|PN172 - PN239 Technique. Literary composition, etc.",1282,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN101 - PN245 Authorship|PN241 - PN241.5 Translating as a literary pursuit",284,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1010 - PN1525 Poetry",3726,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1010 - PN1525 Poetry|PN1031 - PN1049 Theory, philosophy, relations, etc.",1338,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1010 - PN1525 Poetry|PN1065 - PN1085 Relations to, and treatment of, special subjects",291,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1010 - PN1525 Poetry|PN1110 - PN1279 History and criticism",816,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1010 - PN1525 Poetry|PN1301 - PN1333 Epic poetry",88,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1010 - PN1525 Poetry|PN1341 - PN1347 Folk poetry",38,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1010 - PN1525 Poetry|PN1351 - PN1389 Lyric poetry",138,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1560 - PN1590 The performing arts. Show business",395,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1560 - PN1590 The performing arts. Show business|PN1585 - PN1589 Centers for the performing arts",19,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama",71151,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN1635 - PN1650 Relation to, and treatment of, special subjects",103,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN1660 - PN1693 Technique of dramatic composition",328,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN1720 - PN1861 History",465,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN1865 - PN1988 Special types",1311,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN1990 - PN1992.92 Broadcasting",6592,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN1990 - PN1992.92 Broadcasting|PN1991 - PN1991.9 Radio broadcasts",840,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN1990 - PN1992.92 Broadcasting|PN1992 - PN1992.92 Television broadcasts",5542,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN1992.93 - PN1992.95 Nonbroadcast video recordings",101,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN1993 - PN1999 Motion pictures",40138,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN1993 - PN1999 Motion pictures|PN1997 - PN1997.85 Plays, scenarios, etc.",12070,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN2000 - PN3307 Dramatic representation. The theater",20552,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN2000 - PN3307 Dramatic representation. The theater|PN2061 - PN2071 Art of acting",629,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN2000 - PN3307 Dramatic representation. The theater|PN2085 - PN2091 The stage and accessories",98,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN2000 - PN3307 Dramatic representation. The theater|PN2131 - PN2193 By period",226,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN2000 - PN3307 Dramatic representation. The theater|PN2131 - PN2193 By period|PN2131 - PN2145 Ancient",5,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN2000 - PN3307 Dramatic representation. The theater|PN2131 - PN2193 By period|PN2152 - PN2160 Medieval",23,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN2000 - PN3307 Dramatic representation. The theater|PN2131 - PN2193 By period|PN2171 - PN2179 Renaissance",22,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN2000 - PN3307 Dramatic representation. The theater|PN2131 - PN2193 By period|PN2181 - PN2193 Modern",170,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN2000 - PN3307 Dramatic representation. The theater|PN2219.3 - PN3030 Special regions or countries",14831,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN2000 - PN3307 Dramatic representation. The theater|PN3151 - PN3171 Amateur theater",227,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN2000 - PN3307 Dramatic representation. The theater|PN3175 - PN3191 College and school theatricals",40,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN1600 - PN3307 Drama|PN2000 - PN3307 Dramatic representation. The theater|PN3203 - PN3299 Tableaux, pageants, 'Happenings,' etc.",163,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN20 - PN30 Societies",38,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN3311 - PN3503 Prose. Prose fiction",4283,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN3311 - PN3503 Prose. Prose fiction|PN3329 - PN3352 Philosophy, theory, etc.",459,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN3311 - PN3503 Prose. Prose fiction|PN3355 - PN3383 Technique. Authorship",1052,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN3311 - PN3503 Prose. Prose fiction|PN3427 - PN3448 Special kinds of fiction. Fiction genres",861,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN3311 - PN3503 Prose. Prose fiction|PN3451 - PN3503 History",398,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN4001 - PN4355 Oratory. Elocution, etc.",1863,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN4001 - PN4355 Oratory. Elocution, etc.|PN4071 - PN4095 Study and teaching",105,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN4001 - PN4355 Oratory. Elocution, etc.|PN4177 - PN4191 Debating",216,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN4001 - PN4355 Oratory. Elocution, etc.|PN4199 - PN4321 Recitations (in English)",200,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN4001 - PN4355 Oratory. Elocution, etc.|PN4331 - PN4355 Recitations in foreign languages",7,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN441 - PN1009.5 Literary history",10150,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN441 - PN1009.5 Literary history|PN1008.2 - PN1009.5 Juvenile literature",1122,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN441 - PN1009.5 Literary history|PN451 - PN497 Biography",675,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN441 - PN1009.5 Literary history|PN500 - PN519 Collections",1239,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN441 - PN1009.5 Literary history|PN597 - PN605 Special relations, movements, and currents of literature",237,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN441 - PN1009.5 Literary history|PN610 - PN779 By period",4004,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN441 - PN1009.5 Literary history|PN610 - PN779 By period|PN611 - PN649 Ancient",32,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN441 - PN1009.5 Literary history|PN610 - PN779 By period|PN661 - PN694 Medieval (to 1500)",1506,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN441 - PN1009.5 Literary history|PN610 - PN779 By period|PN661 - PN694 Medieval (to 1500)|PN683 - PN687 Legends",367,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN441 - PN1009.5 Literary history|PN610 - PN779 By period|PN661 - PN694 Medieval (to 1500)|PN688 - PN691 Poetry",87,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN441 - PN1009.5 Literary history|PN610 - PN779 By period|PN661 - PN694 Medieval (to 1500)|PN692 - PN693 Prose. Prose fiction",16,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN441 - PN1009.5 Literary history|PN610 - PN779 By period|PN695 - PN779 Modern",2439,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN441 - PN1009.5 Literary history|PN610 - PN779 By period|PN695 - PN779 Modern|PN715 - PN749 Renaissance (1500-1700)",257,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN441 - PN1009.5 Literary history|PN801 - PN820 Romance literature",219,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN441 - PN1009.5 Literary history|PN821 - PN840 Germanic literature",41,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN441 - PN1009.5 Literary history|PN851 - PN884 Comparative literature",589,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN441 - PN1009.5 Literary history|PN905 - PN1008 Folk literature",207,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN441 - PN1009.5 Literary history|PN905 - PN1008 Folk literature|PN980 - PN995 Fables",158,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN45 - PN57 Theory. Philosophy. Esthetics",10101,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN4699 - PN5650 Journalism. The periodical press, etc.",16444,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN4699 - PN5650 Journalism. The periodical press, etc.|PN4735 - PN4748 Relation to the state. Government and the press. Liberty of the press",219,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN4699 - PN5650 Journalism. The periodical press, etc.|PN4775 - PN4784 Technique. Practical journalism",870,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN4699 - PN5650 Journalism. The periodical press, etc.|PN4825 - PN4830 Amateur journalism",9,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN4699 - PN5650 Journalism. The periodical press, etc.|PN4832 - PN4836 Magazines and other periodicals",119,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN4699 - PN5650 Journalism. The periodical press, etc.|PN4840 - PN5648 By region or country",11499,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN59 - PN72 Study and teaching",266,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature",15512,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6066 - PN6069 Special classes of authors",36,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6080 - PN6095 Quotations",660,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6080 - PN6095 Quotations|PN6081 - PN6084 English",285,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6080 - PN6095 Quotations|PN6086 - PN6089 French",28,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6080 - PN6095 Quotations|PN6090 - PN6110 German",29,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6099 - PN6110 Poetry",797,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6110.5 - PN6120 Drama",500,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6120.15 - PN6120.95 Fiction",184,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6121 - PN6129 Orations",70,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6130 - PN6140 Letters",45,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6141 - PN6145 Essays",57,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6146.5 - PN6231 Wit and humor",1953,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6146.5 - PN6231 Wit and humor|PN6157 - PN6222 By region or country",1235,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6233 - PN6238 Anacreontic literature",13,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6244 - PN6246 Literary extracts. Commonplace books",29,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6249 - PN6258 Ana",16,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6259 - PN6268 Anecdotes. Table talk",116,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6269 - PN6278 Aphorisms. Apothegms",258,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6279 - PN6288 Epigrams",81,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6288.5 - PN6298 Epitaphs",61,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6299 - PN6308 Maxims",79,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6309 - PN6318 Mottoes",9,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6319 - PN6328 Sayings, bon mots, etc.",13,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6329 - PN6338 Thoughts",63,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6340 - PN6348 Toasts",8,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6348.5 - PN6358 Emblems, devices",87,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6366 - PN6377 Riddles, acrostics, charades, conundrums, etc.",150,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6400 - PN6525 Proverbs",1830,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN6010 - PN6790 Collections of general literature|PN6700 - PN6790 Comic books, strips, etc.",3258,
        "P - Language and literature|PN1 - PN6790 Literature (General)|PN80 - PN99 Criticism",2810,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature",249258,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature",75322,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1 - PQ771 History and criticism",8508,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1 - PQ771 History and criticism|PQ1 - PQ150 General",2279,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1 - PQ771 History and criticism|PQ151 - PQ221 Medieval. Old French",751,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1 - PQ771 History and criticism|PQ226 - PQ310 Modern",2642,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1 - PQ771 History and criticism|PQ400 - PQ491 Poetry",758,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1 - PQ771 History and criticism|PQ500 - PQ591 Drama",593,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1 - PQ771 History and criticism|PQ601 - PQ771 Prose and prose fiction",1397,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1100 - PQ1297 Collections",1740,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1300 - PQ1595 Old French literature (To ca. 1500/1550)",2964,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1300 - PQ1595 Old French literature (To ca. 1500/1550)|PQ1300 - PQ1391 Collections",395,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1600 - PQ2726 Modern literature",54122,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1600 - PQ2726 Modern literature|PQ1600 - PQ1709 16th century",2098,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1600 - PQ2726 Modern literature|PQ1710 - PQ1935 17th century",2985,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1600 - PQ2726 Modern literature|PQ1947 - PQ2147 18th century",3519,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1600 - PQ2726 Modern literature|PQ2149 - PQ2551 19th century",11701,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1600 - PQ2726 Modern literature|PQ2600 - PQ2651 1900-1960",20560,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1600 - PQ2726 Modern literature|PQ2660 - PQ2686 1961-2000",11840,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ1600 - PQ2726 Modern literature|PQ2700 - PQ2726 -2001",1401,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ3800 - PQ3999 Provincial, local, colonial, etc.",8178,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ1 - PQ3999 French literature|PQ781 - PQ841 Folk literature",10,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ4001 - PQ5999 Italian literature",33132,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ4001 - PQ5999 Italian literature|PQ4001 - PQ4199.5 History and criticism",4143,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ4001 - PQ5999 Italian literature|PQ4001 - PQ4199.5 History and criticism|PQ4001 - PQ4063 General",1471,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ4001 - PQ5999 Italian literature|PQ4001 - PQ4199.5 History and criticism|PQ4064 - PQ4075 Early to 1500",123,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ4001 - PQ5999 Italian literature|PQ4001 - PQ4199.5 History and criticism|PQ4077 - PQ4088 Modern",663,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ4001 - PQ5999 Italian literature|PQ4001 - PQ4199.5 History and criticism|PQ4091 - PQ4131 Poetry",615,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ4001 - PQ5999 Italian literature|PQ4001 - PQ4199.5 History and criticism|PQ4133 - PQ4160 Drama",296,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ4001 - PQ5999 Italian literature|PQ4001 - PQ4199.5 History and criticism|PQ4161 - PQ4185 Prose",447,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ4001 - PQ5999 Italian literature|PQ4001 - PQ4199.5 History and criticism|PQ4186 - PQ4199 Folk literature",20,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ4001 - PQ5999 Italian literature|PQ4201 - PQ4263 Collections",1409,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ4001 - PQ5999 Italian literature|PQ4265 - PQ4556 Individual authors and works to 1400",4326,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ4001 - PQ5999 Italian literature|PQ4561 - PQ4664 Individual authors, 1400-1700",2197,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ4001 - PQ5999 Italian literature|PQ4675 - PQ4734 Individual authors, 1701-1900",3269,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ4001 - PQ5999 Italian literature|PQ4800 - PQ4851 Individual authors, 1900-1960",8109,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ4001 - PQ5999 Italian literature|PQ4860 - PQ4886 Individual authors, 1961-2000",7197,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ4001 - PQ5999 Italian literature|PQ4900 - PQ4926 Individual authors, 2001-",1665,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ4001 - PQ5999 Italian literature|PQ5901 - PQ5999 Regional, provincial, local, etc.",299,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ6001 - PQ8929 Spanish literature",121881,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ6001 - PQ8929 Spanish literature|PQ6001 - PQ6168 History and criticism",4910,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ6001 - PQ8929 Spanish literature|PQ6001 - PQ6168 History and criticism|PQ6001 - PQ6056 General",1478,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ6001 - PQ8929 Spanish literature|PQ6001 - PQ6168 History and criticism|PQ6058 - PQ6060 Early to 1500",153,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ6001 - PQ8929 Spanish literature|PQ6001 - PQ6168 History and criticism|PQ6061 - PQ6073 Modern",876,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ6001 - PQ8929 Spanish literature|PQ6001 - PQ6168 History and criticism|PQ6075 - PQ6098 Poetry",603,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ6001 - PQ8929 Spanish literature|PQ6001 - PQ6168 History and criticism|PQ6098.7 - PQ6129 Drama",627,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ6001 - PQ8929 Spanish literature|PQ6001 - PQ6168 History and criticism|PQ6131 - PQ6153 Prose",738,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ6001 - PQ8929 Spanish literature|PQ6001 - PQ6168 History and criticism|PQ6155 - PQ6167 Folk literature",30,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ6001 - PQ8929 Spanish literature|PQ6170 - PQ6269 Collections",20126,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ6001 - PQ8929 Spanish literature|PQ6271 - PQ6498 Individual authors and works to 1700",6045,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ6001 - PQ8929 Spanish literature|PQ6500 - PQ6576 Individual authors, 1700-ca. 1868",2555,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ6001 - PQ8929 Spanish literature|PQ6600 - PQ6647 Individual authors, 1868-1960",9434,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ6001 - PQ8929 Spanish literature|PQ6650 - PQ6676 Individual authors, 1961-2000",6614,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ6001 - PQ8929 Spanish literature|PQ6700 - PQ6726 Individual authors, 2001-",1315,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ6001 - PQ8929 Spanish literature|PQ7000 - PQ8929 Provincial, local, colonial, etc.",72153,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ6001 - PQ8929 Spanish literature|PQ7000 - PQ8929 Provincial, local, colonial, etc.|PQ7081 - PQ8560 Spanish America",71469,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ9000 - PQ9999 Portuguese literature",19076,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ9000 - PQ9999 Portuguese literature|PQ9000 - PQ9129 History and criticism",662,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ9000 - PQ9999 Portuguese literature|PQ9000 - PQ9129 History and criticism|PQ9000 - PQ9034 General",324,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ9000 - PQ9999 Portuguese literature|PQ9000 - PQ9129 History and criticism|PQ9035 - PQ9055 Special periods",150,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ9000 - PQ9999 Portuguese literature|PQ9000 - PQ9129 History and criticism|PQ9061 - PQ9081 Poetry",102,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ9000 - PQ9999 Portuguese literature|PQ9000 - PQ9129 History and criticism|PQ9083 - PQ9095 Drama",18,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ9000 - PQ9999 Portuguese literature|PQ9000 - PQ9129 History and criticism|PQ9097 - PQ9119 Prose",42,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ9000 - PQ9999 Portuguese literature|PQ9000 - PQ9129 History and criticism|PQ9121 - PQ9128 Folk literature",4,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ9000 - PQ9999 Portuguese literature|PQ9131 - PQ9188 Collections",490,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ9000 - PQ9999 Portuguese literature|PQ9191 - PQ9255 Individual authors and works, 1500-1700",579,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ9000 - PQ9999 Portuguese literature|PQ9262 - PQ9288 Individual authors, 1961-2000",1789,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ9000 - PQ9999 Portuguese literature|PQ9300 - PQ9326 Individual authors, 2001-",183,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ9000 - PQ9999 Portuguese literature|PQ9400 - PQ9999 Provincial, local, colonial, etc.",10411,
        "P - Language and literature|PQ1 - PQ9698.43 French literature. Italian literature. Spanish literature. Portuguese literature|PQ9000 - PQ9999 Portuguese literature|PQ9400 - PQ9999 Provincial, local, colonial, etc.|PQ9500 - PQ9698.43 Brazil",9592,
        "P - Language and literature|PR1 - PR9680 English literature",191566,
        "P - Language and literature|PR1 - PR9680 English literature|PR1 - PR56 Literary history and criticism",1309,
        "P - Language and literature|PR1 - PR9680 English literature|PR1098 - PR1369 Collections of English literature",8948,
        "P - Language and literature|PR1 - PR9680 English literature|PR1098 - PR1369 Collections of English literature|PR1119 - PR1151 By period",981,
        "P - Language and literature|PR1 - PR9680 English literature|PR1098 - PR1369 Collections of English literature|PR1170 - PR1228 Poetry",3182,
        "P - Language and literature|PR1 - PR9680 English literature|PR1098 - PR1369 Collections of English literature|PR1241 - PR1273 Drama",3076,
        "P - Language and literature|PR1 - PR9680 English literature|PR1098 - PR1369 Collections of English literature|PR1281 - PR1309 Prose (General)",248,
        "P - Language and literature|PR1 - PR9680 English literature|PR1098 - PR1369 Collections of English literature|PR1321 - PR1329 Oratory",17,
        "P - Language and literature|PR1 - PR9680 English literature|PR1098 - PR1369 Collections of English literature|PR1341 - PR1349 Letters",41,
        "P - Language and literature|PR1 - PR9680 English literature|PR1098 - PR1369 Collections of English literature|PR1361 - PR1369 Essays",254,
        "P - Language and literature|PR1 - PR9680 English literature|PR111 - PR116 Women authors",277,
        "P - Language and literature|PR1 - PR9680 English literature|PR125 - PR138.5 Relations to other literatures and countries",391,
        "P - Language and literature|PR1 - PR9680 English literature|PR1490 - PR1799 Anglo-Saxon literature",821,
        "P - Language and literature|PR1 - PR9680 English literature|PR161 - PR488 By period",6004,
        "P - Language and literature|PR1 - PR9680 English literature|PR161 - PR488 By period|PR171 - PR236 Anglo-Saxon (Beginnings through 1066)",330,
        "P - Language and literature|PR1 - PR9680 English literature|PR161 - PR488 By period|PR251 - PR369 Medieval. Middle English (1066-1500)",826,
        "P - Language and literature|PR1 - PR9680 English literature|PR161 - PR488 By period|PR401 - PR488 Modern",4815,
        "P - Language and literature|PR1 - PR9680 English literature|PR161 - PR488 By period|PR401 - PR488 Modern|PR421 - PR429 Elizabethan era (1550-1640)",735,
        "P - Language and literature|PR1 - PR9680 English literature|PR161 - PR488 By period|PR401 - PR488 Modern|PR431 - PR439 17th century",300,
        "P - Language and literature|PR1 - PR9680 English literature|PR161 - PR488 By period|PR401 - PR488 Modern|PR441 - PR449 18th century",812,
        "P - Language and literature|PR1 - PR9680 English literature|PR161 - PR488 By period|PR401 - PR488 Modern|PR451 - PR469 19th century",1448,
        "P - Language and literature|PR1 - PR9680 English literature|PR161 - PR488 By period|PR401 - PR488 Modern|PR471 - PR479 20th century",773,
        "P - Language and literature|PR1 - PR9680 English literature|PR161 - PR488 By period|PR401 - PR488 Modern|PR481 - PR488 21st century",12,
        "P - Language and literature|PR1 - PR9680 English literature|PR1803 - PR2165 Anglo-Norman period. Early English. Middle English",2444,
        "P - Language and literature|PR1 - PR9680 English literature|PR2199 - PR3195 English renaissance (1500-1640)",14363,
        "P - Language and literature|PR1 - PR9680 English literature|PR3291 - PR3785 17th and 18th centuries (1640-1770)",10671,
        "P - Language and literature|PR1 - PR9680 English literature|PR3991 - PR5990 19th century, 1770/1800-1890/1900",38323,
        "P - Language and literature|PR1 - PR9680 English literature|PR500 - PR614 Poetry",2489,
        "P - Language and literature|PR1 - PR9680 English literature|PR500 - PR614 Poetry|PR521 - PR614 By period",1766,
        "P - Language and literature|PR1 - PR9680 English literature|PR57 - PR78 Criticism",144,
        "P - Language and literature|PR1 - PR9680 English literature|PR6000 - PR6049 1900-1960",34596,
        "P - Language and literature|PR1 - PR9680 English literature|PR6050 - PR6076 1961-2000",27957,
        "P - Language and literature|PR1 - PR9680 English literature|PR6100 - PR6126 -2001",6216,
        "P - Language and literature|PR1 - PR9680 English literature|PR621 - PR744 Drama",1830,
        "P - Language and literature|PR1 - PR9680 English literature|PR621 - PR744 Drama|PR641 - PR744 By period",1589,
        "P - Language and literature|PR1 - PR9680 English literature|PR750 - PR890 Prose",4067,
        "P - Language and literature|PR1 - PR9680 English literature|PR750 - PR890 Prose|PR767 - PR818 By period",269,
        "P - Language and literature|PR1 - PR9680 English literature|PR8309 - PR9680 English literature: Provincial, local, etc.",30549,
        "P - Language and literature|PR1 - PR9680 English literature|PR901 - PR907.2 Oratory",7,
        "P - Language and literature|PR1 - PR9680 English literature|PR911 - PR918 Letters",39,
        "P - Language and literature|PR1 - PR9680 English literature|PR921 - PR928 Essays",44,
        "P - Language and literature|PR1 - PR9680 English literature|PR931 - PR938 Wit and humor",134,
        "P - Language and literature|PR1 - PR9680 English literature|PR951 - PR981 Folk literature",86,
        "P - Language and literature|PS1 - PS3626 American literature. Canadian literature",186064,
        "P - Language and literature|PS1 - PS3626 American literature. Canadian literature|PS1 - PS3626 American literature",186064,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature",59996,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature",48968,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT1 - PT80 Literary history and criticism",777,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT1100 - PT1479 Collections",2044,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT1100 - PT1479 Collections|PT1100 - PT1141 General",826,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT1100 - PT1479 Collections|PT1151 - PT1241 Poetry",418,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT1100 - PT1479 Collections|PT1251 - PT1299 Drama",80,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT1100 - PT1479 Collections|PT1301 - PT1360 Prose",247,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT1100 - PT1479 Collections|PT1371 - PT1374 Early to 1950. Old and Middle High German",35,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT1100 - PT1479 Collections|PT1375 - PT1479 Middle High German",251,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT1501 - PT2688 Individual authors or works",37003,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT1501 - PT2688 Individual authors or works|PT1501 - PT1695 Middle High German, ca. 1050-1450/1500",1630,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT1501 - PT2688 Individual authors or works|PT1701 - PT1797 1500-ca. 1700",671,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT1501 - PT2688 Individual authors or works|PT1799 - PT2592 1700-ca. 1860/70",10144,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT1501 - PT2688 Individual authors or works|PT2600 - PT2653 1860/70-1960",15442,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT1501 - PT2688 Individual authors or works|PT2660 - PT2688 1961-2000",8681,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT3701 - PT3971 Provincial, local, colonial, etc.",1344,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT3701 - PT3971 Provincial, local, colonial, etc.|PT3701 - PT3746 East Germany",302,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT83 - PT873 History of German literature",7000,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT83 - PT873 History of German literature|PT175 - PT230 Medieval",737,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT83 - PT873 History of German literature|PT236 - PT405 Modern",1849,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT83 - PT873 History of German literature|PT500 - PT597 Poetry",486,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT83 - PT873 History of German literature|PT605 - PT709 Drama",535,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT83 - PT873 History of German literature|PT711 - PT871 Prose",939,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT881 - PT951 Folk literature",266,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT1 - PT4897 German literature|PT881 - PT951 Folk literature|PT923 - PT937 Faust legend",14,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT5001 - PT5980 Dutch literature",1705,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT5001 - PT5980 Dutch literature|PT5001 - PT5348 Literary history and criticism",223,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT5001 - PT5980 Dutch literature|PT5001 - PT5348 Literary history and criticism|PT5001 - PT5112 General",79,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT5001 - PT5980 Dutch literature|PT5001 - PT5348 Literary history and criticism|PT5121 - PT5185 Special periods",88,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT5001 - PT5980 Dutch literature|PT5001 - PT5348 Literary history and criticism|PT5201 - PT5243 Poetry",18,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT5001 - PT5980 Dutch literature|PT5001 - PT5348 Literary history and criticism|PT5250 - PT5295 Drama",14,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT5001 - PT5980 Dutch literature|PT5001 - PT5348 Literary history and criticism|PT5300 - PT5348 Prose",18,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT5001 - PT5980 Dutch literature|PT5351 - PT5395 Folk literature",18,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT5001 - PT5980 Dutch literature|PT5400 - PT5547 Collections",165,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT5001 - PT5980 Dutch literature|PT5901 - PT5980 Provincial, local, foreign",31,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT6000 - PT6466.36 Flemish literature since 1830",315,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT6000 - PT6466.36 Flemish literature since 1830|PT6000 - PT6199 Literary history and criticism",23,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT6000 - PT6466.36 Flemish literature since 1830|PT6300 - PT6397 Collections",15,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT6000 - PT6466.36 Flemish literature since 1830|PT6400 - PT6466.36 Individual authors or works",277,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT6500 - PT6592.36 Afrikaans literature",145,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT6500 - PT6592.36 Afrikaans literature|PT6500 - PT6530 Literary history and criticism",29,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT6500 - PT6592.36 Afrikaans literature|PT6550 - PT6575 Collections",16,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT6500 - PT6592.36 Afrikaans literature|PT6590 - PT6592.36 Individual authors or works",100,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7001 - PT7099 Scandinavian literature",184,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7001 - PT7099 Scandinavian literature|PT7001 - PT7099 General",184,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7001 - PT7099 Scandinavian literature|PT7001 - PT7099 General|PT7001 - PT7087 Literary history and criticism",150,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7001 - PT7099 Scandinavian literature|PT7001 - PT7099 General|PT7088 - PT7089 Folk literature",3,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7001 - PT7099 Scandinavian literature|PT7001 - PT7099 General|PT7090 - PT7099 Collections",30,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7101 - PT7338 Old Norse literature: Old Icelandic and Old Norwegian",995,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7101 - PT7338 Old Norse literature: Old Icelandic and Old Norwegian|PT7101 - PT7211 Literary history and criticism",343,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7101 - PT7338 Old Norse literature: Old Icelandic and Old Norwegian|PT7101 - PT7211 Literary history and criticism|PT7170 - PT7176 Poetry",40,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7101 - PT7338 Old Norse literature: Old Icelandic and Old Norwegian|PT7101 - PT7211 Literary history and criticism|PT7177 - PT7211 Prose",109,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7101 - PT7338 Old Norse literature: Old Icelandic and Old Norwegian|PT7101 - PT7211 Literary history and criticism|PT7177 - PT7211 Prose|PT7181 - PT7193 Sagas",97,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7101 - PT7338 Old Norse literature: Old Icelandic and Old Norwegian|PT7220 - PT7262.5 Collections",257,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7101 - PT7338 Old Norse literature: Old Icelandic and Old Norwegian|PT7298 - PT7309 Religious works",15,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7101 - PT7338 Old Norse literature: Old Icelandic and Old Norwegian|PT7312 - PT7318 Scientific and learned literature",26,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7101 - PT7338 Old Norse literature: Old Icelandic and Old Norwegian|PT7326 - PT7338 Individual authors or works before 1540",19,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7351 - PT7550 Modern Icelandic literature",238,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7351 - PT7550 Modern Icelandic literature|PT7351 - PT7418 Literary history and criticism",21,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7351 - PT7550 Modern Icelandic literature|PT7420 - PT7438 Folk literature",1,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7351 - PT7550 Modern Icelandic literature|PT7450 - PT7495 Collections",25,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7351 - PT7550 Modern Icelandic literature|PT7500 - PT7511 Individual authors or works",4,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7351 - PT7550 Modern Icelandic literature|PT7500 - PT7511 Individual authors or works|PT7500 - PT7501 16th-18th centuries",1,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7351 - PT7550 Modern Icelandic literature|PT7500 - PT7511 Individual authors or works|PT7510 - PT7511 19th-20th centuries",1,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7351 - PT7550 Modern Icelandic literature|PT7520 - PT7550 Provincial, local, foreign",2,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7581 - PT7599 Faroese literature",8,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7581 - PT7599 Faroese literature|PT7581 - PT7592 Literary history and criticism",1,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7581 - PT7599 Faroese literature|PT7593 - PT7596.5 Collections",2,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7581 - PT7599 Faroese literature|PT7598 - PT7599 Individual authors or works",3,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7601 - PT8260 Danish literature",2128,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7601 - PT8260 Danish literature|PT7601 - PT7869 Literary history and criticism",182,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7601 - PT8260 Danish literature|PT7900 - PT7930 Folk literature",13,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7601 - PT8260 Danish literature|PT7945 - PT8046 Collections",87,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7601 - PT8260 Danish literature|PT8050 - PT8176.36 Individual authors or works",1786,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7601 - PT8260 Danish literature|PT8050 - PT8176.36 Individual authors or works|PT8060 - PT8098 16th-18th centuries",106,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7601 - PT8260 Danish literature|PT8050 - PT8176.36 Individual authors or works|PT8100 - PT8167 19th century",562,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7601 - PT8260 Danish literature|PT8050 - PT8176.36 Individual authors or works|PT8176 - PT8176.36 1961-2000",303,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT7601 - PT8260 Danish literature|PT8205 - PT8260 Provincial, local, foreign",1,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT8301 - PT9155 Norwegian literature",2357,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT8301 - PT9155 Norwegian literature|PT8301 - PT8574 Literary history and criticism",112,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT8301 - PT9155 Norwegian literature|PT8301 - PT8574 Literary history and criticism|PT8420 - PT8456 Special periods",24,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT8301 - PT9155 Norwegian literature|PT8301 - PT8574 Literary history and criticism|PT8460 - PT8489 Poetry",10,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT8301 - PT9155 Norwegian literature|PT8301 - PT8574 Literary history and criticism|PT8500 - PT8534 Drama",3,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT8301 - PT9155 Norwegian literature|PT8301 - PT8574 Literary history and criticism|PT8540 - PT8574 Prose",12,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT8301 - PT9155 Norwegian literature|PT8600 - PT8637 Folk literature",9,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT8301 - PT9155 Norwegian literature|PT8650 - PT8733 Collections",48,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT8301 - PT9155 Norwegian literature|PT8750 - PT8951.36 Individual authors or works",1915,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT8301 - PT9155 Norwegian literature|PT8750 - PT8951.36 Individual authors or works|PT8750 - PT8775 16th-18th centuries",6,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT8301 - PT9155 Norwegian literature|PT8750 - PT8951.36 Individual authors or works|PT8800 - PT8942 19th century",732,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT8301 - PT9155 Norwegian literature|PT8750 - PT8951.36 Individual authors or works|PT8951 - PT8951.36 1961-2000",388,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT9201 - PT9999 Swedish literature",2948,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT9201 - PT9999 Swedish literature|PT9201 - PT9499 Literary history and criticism",205,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT9201 - PT9999 Swedish literature|PT9201 - PT9499 Literary history and criticism|PT9320 - PT9370 Special periods",53,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT9201 - PT9999 Swedish literature|PT9201 - PT9499 Literary history and criticism|PT9375 - PT9404 Poetry",37,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT9201 - PT9999 Swedish literature|PT9201 - PT9499 Literary history and criticism|PT9415 - PT9449 Drama",2,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT9201 - PT9999 Swedish literature|PT9201 - PT9499 Literary history and criticism|PT9460 - PT9499 Prose",23,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT9201 - PT9999 Swedish literature|PT9509 - PT9542 Folk literature",2,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT9201 - PT9999 Swedish literature|PT9547 - PT9639 Collections",70,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT9201 - PT9999 Swedish literature|PT9547 - PT9639 Collections|PT9565 - PT9570 Translations",2,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT9201 - PT9999 Swedish literature|PT9547 - PT9639 Collections|PT9580 - PT9599 Poetry",37,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT9201 - PT9999 Swedish literature|PT9547 - PT9639 Collections|PT9605 - PT9625 Drama",5,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT9201 - PT9999 Swedish literature|PT9547 - PT9639 Collections|PT9626 - PT9639 Prose",10,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT9201 - PT9999 Swedish literature|PT9650 - PT9876.36 Individual authors or works",2503,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT9201 - PT9999 Swedish literature|PT9650 - PT9876.36 Individual authors or works|PT9650 - PT9651 Medieval",5,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT9201 - PT9999 Swedish literature|PT9650 - PT9876.36 Individual authors or works|PT9674 - PT9715 16th-18th centuries",49,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT9201 - PT9999 Swedish literature|PT9650 - PT9876.36 Individual authors or works|PT9725 - PT9850 19th century",754,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT9201 - PT9999 Swedish literature|PT9650 - PT9876.36 Individual authors or works|PT9870 - PT9875 1900-1960",1,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT9201 - PT9999 Swedish literature|PT9650 - PT9876.36 Individual authors or works|PT9876 - PT9876.36 1961-2000",612,
        "P - Language and literature|PT1 - PT9999 German literature. Dutch literature. Flemish literature. Afrikaans literature. Scandinavian literature. Icelandic literature|PT9201 - PT9999 Swedish literature|PT9950 - PT9999 Provincial, local, foreign",16,
        "P - Language and literature|PZ1 - PZ90 Fiction and juvenile belles lettres",63284,
        "P - Language and literature|PZ1 - PZ90 Fiction and juvenile belles lettres|PZ1 - PZ4 Fiction in English",32770,
        "P - Language and literature|PZ1 - PZ90 Fiction and juvenile belles lettres|PZ5 - PZ90 Juvenile belles lettres",23282,
        "Q - Science",341445,
        "Q - Science|Q1 - Q390 Science (General)",31181,
        "Q - Science|Q1 - Q390 Science (General)|Q1 - Q295 General",25678,
        "Q - Science|Q1 - Q390 Science (General)|Q300 - Q390 Cybernetics",5297,
        "Q - Science|Q1 - Q390 Science (General)|Q300 - Q390 Cybernetics|Q350 - Q390 Information theory",541,
        "Q - Science|QA1 - QA939 Mathematics",104621,
        "Q - Science|QA1 - QA939 Mathematics|QA1 - QA43 General",12944,
        "Q - Science|QA1 - QA939 Mathematics|QA101 - QA141.8 Elementary mathematics. Arithmetic",1293,
        "Q - Science|QA1 - QA939 Mathematics|QA150 - QA272.5 Algebra",11809,
        "Q - Science|QA1 - QA939 Mathematics|QA273 - QA280 Probabilities. Mathematical statistics",9795,
        "Q - Science|QA1 - QA939 Mathematics|QA299.6 - QA433 Analysis",15506,
        "Q - Science|QA1 - QA939 Mathematics|QA299.6 - QA433 Analysis|QA303 - QA316 Calculus",1332,
        "Q - Science|QA1 - QA939 Mathematics|QA440 - QA699 Geometry. Trigonometry. Topology",8251,
        "Q - Science|QA1 - QA939 Mathematics|QA47 - QA59 Tables",172,
        "Q - Science|QA1 - QA939 Mathematics|QA71 - QA90 Instruments and machines",43340,
        "Q - Science|QA1 - QA939 Mathematics|QA71 - QA90 Instruments and machines|QA75 - QA76.95 Calculating machines",43146,
        "Q - Science|QA1 - QA939 Mathematics|QA71 - QA90 Instruments and machines|QA75 - QA76.95 Calculating machines|QA75.5 - QA76.95 Electronic computers. Computer science",43073,
        "Q - Science|QA1 - QA939 Mathematics|QA71 - QA90 Instruments and machines|QA75 - QA76.95 Calculating machines|QA75.5 - QA76.95 Electronic computers. Computer science|QA76.75 - QA76.76 Computer software",1829,
        "Q - Science|QA1 - QA939 Mathematics|QA801 - QA939 Analytic mechanics",2322,
        "Q - Science|QB1 - QB991 Astronomy",10320,
        "Q - Science|QB1 - QB991 Astronomy|QB1 - QB139 General",3331,
        "Q - Science|QB1 - QB991 Astronomy|QB140 - QB237 Practical and spherical astronomy",255,
        "Q - Science|QB1 - QB991 Astronomy|QB275 - QB343 Geodesy",303,
        "Q - Science|QB1 - QB991 Astronomy|QB349 - QB421 Theoretical astronomy and celestial mechanics",292,
        "Q - Science|QB1 - QB991 Astronomy|QB455 - QB456 Astrogelogy",7,
        "Q - Science|QB1 - QB991 Astronomy|QB460 - QB466 Astrophysics",695,
        "Q - Science|QB1 - QB991 Astronomy|QB468 - QB480 Non-optical methods of astronomy",429,
        "Q - Science|QB1 - QB991 Astronomy|QB495 - QB903 Descriptive astronomy",4177,
        "Q - Science|QB1 - QB991 Astronomy|QB495 - QB903 Descriptive astronomy|QB500.5 - QB785 Solar system",2050,
        "Q - Science|QB1 - QB991 Astronomy|QB495 - QB903 Descriptive astronomy|QB799 - QB903 Stars",1584,
        "Q - Science|QB1 - QB991 Astronomy|QB980 - QB991 Cosmogony. Cosmology",729,
        "Q - Science|QC1 - QC999 Physics",37014,
        "Q - Science|QC1 - QC999 Physics|QC1 - QC75 General",6540,
        "Q - Science|QC1 - QC999 Physics|QC120 - QC168.85 Descriptive and experimental mechanics",684,
        "Q - Science|QC1 - QC999 Physics|QC170 - QC197 Atomic physics. Constitution and properties of matter (including molecular physics, relativity, quantum theory, and solid state physics)",7913,
        "Q - Science|QC1 - QC999 Physics|QC221 - QC246 Acoustics. Sound",422,
        "Q - Science|QC1 - QC999 Physics|QC251 - QC338.5 Heat",851,
        "Q - Science|QC1 - QC999 Physics|QC251 - QC338.5 Heat|QC310.15 - QC319 Thermodynamics",404,
        "Q - Science|QC1 - QC999 Physics|QC350 - QC467 Optics. Light",2789,
        "Q - Science|QC1 - QC999 Physics|QC350 - QC467 Optics. Light|QC450 - QC467 Spectroscopy",927,
        "Q - Science|QC1 - QC999 Physics|QC474 - QC496.9 Radiation physics (General)",748,
        "Q - Science|QC1 - QC999 Physics|QC501 - QC766 Electricity and magnetism",4258,
        "Q - Science|QC1 - QC999 Physics|QC501 - QC766 Electricity and magnetism|QC501 - QC718.8 Electricity",3202,
        "Q - Science|QC1 - QC999 Physics|QC501 - QC766 Electricity and magnetism|QC501 - QC718.8 Electricity|QC669 - QC675.8 Electromagnetic theory",163,
        "Q - Science|QC1 - QC999 Physics|QC501 - QC766 Electricity and magnetism|QC501 - QC718.8 Electricity|QC676 - QC678.6 Radio waves (Theory)",15,
        "Q - Science|QC1 - QC999 Physics|QC501 - QC766 Electricity and magnetism|QC501 - QC718.8 Electricity|QC701 - QC715.4 Electric discharge",248,
        "Q - Science|QC1 - QC999 Physics|QC501 - QC766 Electricity and magnetism|QC501 - QC718.8 Electricity|QC717.6 - QC718.8 Plasma physics. Ionized gasses",566,
        "Q - Science|QC1 - QC999 Physics|QC501 - QC766 Electricity and magnetism|QC750 - QC766 Magnetism",841,
        "Q - Science|QC1 - QC999 Physics|QC770 - QC798 Nuclear and particle physics. Atomic energy. Radioactivity",4315,
        "Q - Science|QC1 - QC999 Physics|QC770 - QC798 Nuclear and particle physics. Atomic energy. Radioactivity|QC793 - QC793.5 Elementary particle physics",1230,
        "Q - Science|QC1 - QC999 Physics|QC770 - QC798 Nuclear and particle physics. Atomic energy. Radioactivity|QC794.95 - QC798 Radioactivity and radioactive substances",139,
        "Q - Science|QC1 - QC999 Physics|QC801 - QC809 Geophysics. Cosmic physics",403,
        "Q - Science|QC1 - QC999 Physics|QC81 - QC114 Weights and measures",1528,
        "Q - Science|QC1 - QC999 Physics|QC811 - QC849 Geomagnetism",161,
        "Q - Science|QC1 - QC999 Physics|QC851 - QC999 Meteorology. Climatology (including the earth's atmosphere)",6311,
        "Q - Science|QC1 - QC999 Physics|QC851 - QC999 Meteorology. Climatology (including the earth's atmosphere)|QC974.5 - QC976 Meteorological optics",53,
        "Q - Science|QC1 - QC999 Physics|QC851 - QC999 Meteorology. Climatology (including the earth's atmosphere)|QC980 - QC999 Climatology and weather",2247,
        "Q - Science|QC1 - QC999 Physics|QC851 - QC999 Meteorology. Climatology (including the earth's atmosphere)|QC980 - QC999 Climatology and weather|QC994.95 - QC999 Weather forecasting",121,
        "Q - Science|QD1 - QD999 Chemistry",21658,
        "Q - Science|QD1 - QD999 Chemistry|QD1 - QD65 General (including alchemy)",3864,
        "Q - Science|QD1 - QD999 Chemistry|QD146 - QD197 Inorganic chemistry",1518,
        "Q - Science|QD1 - QD999 Chemistry|QD241 - QD441 Organic chemistry",5889,
        "Q - Science|QD1 - QD999 Chemistry|QD241 - QD441 Organic chemistry|QD415 - QD436 Biochemistry",758,
        "Q - Science|QD1 - QD999 Chemistry|QD450 - QD801 Physical and theoretical chemistry",6612,
        "Q - Science|QD1 - QD999 Chemistry|QD450 - QD801 Physical and theoretical chemistry|QD625 - QD655 Radiation chemistry",39,
        "Q - Science|QD1 - QD999 Chemistry|QD450 - QD801 Physical and theoretical chemistry|QD701 - QD731 Photochemistry",244,
        "Q - Science|QD1 - QD999 Chemistry|QD71 - QD142 Analytical chemistry",2718,
        "Q - Science|QD1 - QD999 Chemistry|QD901 - QD999 Crystallography",1149,
        "Q - Science|QE1 - QE996.5 Geology",28223,
        "Q - Science|QE1 - QE996.5 Geology|QE1 - QE350.62 General (including geographical divisions)",13946,
        "Q - Science|QE1 - QE996.5 Geology|QE351 - QE399.2 Mineralogy",1452,
        "Q - Science|QE1 - QE996.5 Geology|QE420 - QE499 Petrology",2107,
        "Q - Science|QE1 - QE996.5 Geology|QE500 - QE639.5 Dynamic and structural geology",5396,
        "Q - Science|QE1 - QE996.5 Geology|QE500 - QE639.5 Dynamic and structural geology|QE521 - QE545 Volcanoes and earthquakes",1561,
        "Q - Science|QE1 - QE996.5 Geology|QE500 - QE639.5 Dynamic and structural geology|QE601 - QE613.5 Structural geology",734,
        "Q - Science|QE1 - QE996.5 Geology|QE640 - QE699 Stratigraphy",2182,
        "Q - Science|QE1 - QE996.5 Geology|QE701 - QE760 Paleontology",2126,
        "Q - Science|QE1 - QE996.5 Geology|QE760.8 - QE899.2 Paleozoology",2733,
        "Q - Science|QE1 - QE996.5 Geology|QE901 - QE996.5 Paleobotany",637,
        "Q - Science|QH1 - QH278.5 Natural history (General)",11537,
        "Q - Science|QH1 - QH278.5 Natural history (General)|QH1 - QH198 General (including nature conservation, geographical distribution)",10594,
        "Q - Science|QH1 - QH278.5 Natural history (General)|QH201 - QH278.5 Microscopy",855,
        "Q - Science|QH301 - QH705.5 Biology (General)",21828,
        "Q - Science|QH301 - QH705.5 Biology (General)|QH359 - QH425 Evolution",2022,
        "Q - Science|QH301 - QH705.5 Biology (General)|QH426 - QH470 Genetics",3689,
        "Q - Science|QH301 - QH705.5 Biology (General)|QH471 - QH489 Reproduction",106,
        "Q - Science|QH301 - QH705.5 Biology (General)|QH501 - QH531 Life",1550,
        "Q - Science|QH301 - QH705.5 Biology (General)|QH540 - QH549.5 Ecology",5237,
        "Q - Science|QH301 - QH705.5 Biology (General)|QH573 - QH671 Cytology",3112,
        "Q - Science|QH301 - QH705.5 Biology (General)|QH705 - QH705.5 Economic biology",12,
        "Q - Science|QK1 - QK989 Botany",22409,
        "Q - Science|QK1 - QK989 Botany|QK1 - QK474.5 General (including geographical distribution)",10100,
        "Q - Science|QK1 - QK989 Botany|QK474.8 - QK495 Spermatophyta. Phanerogams",919,
        "Q - Science|QK1 - QK989 Botany|QK474.8 - QK495 Spermatophyta. Phanerogams|QK494 - QK494.5 Gymnosperms",62,
        "Q - Science|QK1 - QK989 Botany|QK504 - QK635 Cryptogams",4641,
        "Q - Science|QK1 - QK989 Botany|QK640 - QK673 Plant anatomy",698,
        "Q - Science|QK1 - QK989 Botany|QK710 - QK899 Plant physiology",2555,
        "Q - Science|QK1 - QK989 Botany|QK900 - QK989 Plant ecology",1534,
        "Q - Science|QL1 - QL991 Zoology",25099,
        "Q - Science|QL1 - QL991 Zoology|QL1 - QL355 General (including geographical distribution)",5037,
        "Q - Science|QL1 - QL991 Zoology|QL360 - QL599.82 Invertebrates",6656,
        "Q - Science|QL1 - QL991 Zoology|QL360 - QL599.82 Invertebrates|QL461 - QL599.82 Insects",3503,
        "Q - Science|QL1 - QL991 Zoology|QL605 - QL739.8 Chordates. Vertebrates",10763,
        "Q - Science|QL1 - QL991 Zoology|QL605 - QL739.8 Chordates. Vertebrates|QL614 - QL639.8 Fishes",1650,
        "Q - Science|QL1 - QL991 Zoology|QL605 - QL739.8 Chordates. Vertebrates|QL640 - QL669.3 Reptiles and amphibians",1208,
        "Q - Science|QL1 - QL991 Zoology|QL605 - QL739.8 Chordates. Vertebrates|QL671 - QL699 Birds",3994,
        "Q - Science|QL1 - QL991 Zoology|QL605 - QL739.8 Chordates. Vertebrates|QL700 - QL739.8 Mammals",3720,
        "Q - Science|QL1 - QL991 Zoology|QL750 - QL795 Animal behavior",1935,
        "Q - Science|QL1 - QL991 Zoology|QL750 - QL795 Animal behavior|QL791 - QL795 Stories and anecdotes",72,
        "Q - Science|QL1 - QL991 Zoology|QL799 - QL799.5 Morphology",38,
        "Q - Science|QL1 - QL991 Zoology|QL801 - QL950.9 Anatomy",632,
        "Q - Science|QL1 - QL991 Zoology|QL951 - QL991 Embryology",508,
        "Q - Science|QM1 - QM695 Human anatomy",2645,
        "Q - Science|QM1 - QM695 Human anatomy|QM1 - QM511 General",1576,
        "Q - Science|QM1 - QM695 Human anatomy|QM531 - QM549 Regional anatomy",191,
        "Q - Science|QM1 - QM695 Human anatomy|QM550 - QM577.8 Human and comparative histology",355,
        "Q - Science|QM1 - QM695 Human anatomy|QM601 - QM695 Human embryology",481,
        "Q - Science|QP1 - QP801 Physiology",21344,
        "Q - Science|QP1 - QP801 Physiology|QP1 - QP345 General (including influence of the environment)",7988,
        "Q - Science|QP1 - QP801 Physiology|QP351 - QP495 Neurophysiology and neuropsychology",6248,
        "Q - Science|QP1 - QP801 Physiology|QP501 - QP801 Animal biochemistry",7116,
        "Q - Science|QR1 - QR502 Microbiology",6799,
        "Q - Science|QR1 - QR502 Microbiology|QR1 - QR74.5 General",1612,
        "Q - Science|QR1 - QR502 Microbiology|QR100 - QR130 Microbial ecology",738,
        "Q - Science|QR1 - QR502 Microbiology|QR180 - QR189.5 Immunology",1780,
        "Q - Science|QR1 - QR502 Microbiology|QR355 - QR502 Virology",585,
        "Q - Science|QR1 - QR502 Microbiology|QR75 - QR99.5 Bacteria",801,
        "Q - Science|QR1 - QR502 Microbiology|QR99.6 - QR99.8 Cyanobacteria",37,
        "Q - Science|QS1 - QS681 Human Anatomy",9,
        "Q - Science|QS1 - QS681 Human Anatomy|QS1 - QS132 Anatomy",2,
        "Q - Science|QS1 - QS681 Human Anatomy|QS504 - QS539 Histology",3,
        "Q - Science|QS1 - QS681 Human Anatomy|QS604 - QS681 Embryology",3,
        "Q - Science|QT1 - QT275 Physiology",19,
        "Q - Science|QT1 - QT275 Physiology|QT1 - QT33.1 Reference Works. General Works",2,
        "Q - Science|QT1 - QT275 Physiology|QT104 - QT172 Human Physiology",4,
        "Q - Science|QT1 - QT275 Physiology|QT180 - QT245 Physiology. Hygiene",1,
        "Q - Science|QT1 - QT275 Physiology|QT250 - QT275 Leisure Activities. Sports Medicine",3,
        "Q - Science|QT1 - QT275 Physiology|QT34 - QT37.5 Physics. Mathematics. Engineering",8,
        "Q - Science|QU1 - QU500 Biochemistry",37,
        "Q - Science|QU1 - QU500 Biochemistry|QU1 - QU54 Reference Works. General Works",3,
        "Q - Science|QU1 - QU500 Biochemistry|QU100 - QU133 Biochemistry of the Human Body",4,
        "Q - Science|QU1 - QU500 Biochemistry|QU135 - QU144 Enzymes",2,
        "Q - Science|QU1 - QU500 Biochemistry|QU145 - QU220 Vitamins",5,
        "Q - Science|QU1 - QU500 Biochemistry|QU55 - QU70 Proteins. Amino Acids. Peptides",16,
        "Q - Science|QU1 - QU500 Biochemistry|QU75 - QU99 Carbohydrates. Lipids",7,
        "Q - Science|QV1 - QV835 Pharmacology",43,
        "Q - Science|QV1 - QV835 Pharmacology|QV1 - QV55 Reference Works. General Works",12,
        "Q - Science|QV1 - QV835 Pharmacology|QV150 - QV160 Cardiovascular Agents. Renal Agents",1,
        "Q - Science|QV1 - QV835 Pharmacology|QV180 - QV195 Hematologic Agents",1,
        "Q - Science|QV1 - QV835 Pharmacology|QV220 - QV243 Local Anti-Infective Agents. Dyes. Tars",1,
        "Q - Science|QV1 - QV835 Pharmacology|QV247 - QV269 Anti-Inflammatory Agents. Anti-Infective Agents",1,
        "Q - Science|QV1 - QV835 Pharmacology|QV270 - QV285 Water. Electrolytes",2,
        "Q - Science|QV1 - QV835 Pharmacology|QV350 - QV370 Anti-Bacterial Agents. Tissue Extracts",1,
        "Q - Science|QV1 - QV835 Pharmacology|QV60 - QV75 Dermatologic Agents. Gastrointestinal Agents",1,
        "Q - Science|QV1 - QV835 Pharmacology|QV600 - QV667 Toxicology",1,
        "Q - Science|QV1 - QV835 Pharmacology|QV701 - QV835 Pharmacy and Pharmaceutics",19,
        "Q - Science|QV1 - QV835 Pharmacology|QV701 - QV835 Pharmacy and Pharmaceutics|QV701 - QV737 General Pharmacy and Pharmaceutics",2,
        "Q - Science|QV1 - QV835 Pharmacology|QV701 - QV835 Pharmacy and Pharmaceutics|QV738 - QV772 Drug Standardization. Pharmacognosy. Medicinal Plants",11,
        "Q - Science|QV1 - QV835 Pharmacology|QV701 - QV835 Pharmacy and Pharmaceutics|QV773 - QV835 Pharmaceutical Processes. Packaging. Labeling",4,
        "Q - Science|QW1 - QW949 Microbiology. Immunology",24,
        "Q - Science|QW1 - QW949 Microbiology. Immunology|QW1 - QW300 Microbiology",11,
        "Q - Science|QW1 - QW949 Microbiology. Immunology|QW1 - QW300 Microbiology|QW1 - QW52 Reference Works. General Works",5,
        "Q - Science|QW1 - QW949 Microbiology. Immunology|QW1 - QW300 Microbiology|QW160 - QW170 Viruses",2,
        "Q - Science|QW1 - QW949 Microbiology. Immunology|QW1 - QW300 Microbiology|QW180 - QW190 Fungi. Bacterial Spores",1,
        "Q - Science|QW1 - QW949 Microbiology. Immunology|QW1 - QW300 Microbiology|QW55 - QW85 Environmental Microbiology",2,
        "Q - Science|QW1 - QW949 Microbiology. Immunology|QW501 - QW949 Immunology",13,
        "Q - Science|QW1 - QW949 Microbiology. Immunology|QW501 - QW949 Immunology|QW570 - QW630.5 Antigens and Antibodies. Toxins and Antitoxins",6,
        "Q - Science|QW1 - QW949 Microbiology. Immunology|QW501 - QW949 Immunology|QW640 - QW730 Immune Responses",2,
        "Q - Science|QW1 - QW949 Microbiology. Immunology|QW501 - QW949 Immunology|QW800 - QW949 Immunotherapy and Hypersensitivity",2,
        "Q - Science|QX1 - QX675 Parasitology",1,
        "Q - Science|QX1 - QX675 Parasitology|QX1 - QX45 Reference Works. General Works",1,
        "Q - Science|QY1 - QY490 Clinical Patholgy",6,
        "Q - Science|QY1 - QY490 Clinical Patholgy|QY1 - QY39 Reference Works. General Works",4,
        "Q - Science|QY1 - QY490 Clinical Patholgy|QY50 - QY110 Laboratory Animals. Laboratory Techniques",2,
        "Q - Science|QZ1 - QZ380 Pathology",20,
        "Q - Science|QZ1 - QZ380 Pathology|QZ1 - QZ39 Reference Works. General Works",3,
        "Q - Science|QZ1 - QZ380 Pathology|QZ200 - QZ380 Neoplasms. Cysts",14,
        "Q - Science|QZ1 - QZ380 Pathology|QZ40 - QZ109 Pathogenesis. Etiology",3,
        "R - Medicine",181253,
        "R - Medicine|R5 - R920 Medicine (General)",21824,
        "R - Medicine|R5 - R920 Medicine (General)|R131 - R687 History of medicine. Medical expeditions",4611,
        "R - Medicine|R5 - R920 Medicine (General)|R690 - R697 Medicine as a profession. Physicians",371,
        "R - Medicine|R5 - R920 Medicine (General)|R722 - R722.32 Missionary medicine. Medical missionaries",34,
        "R - Medicine|R5 - R920 Medicine (General)|R723 - R726 Medical philosophy. Medical ethics",1777,
        "R - Medicine|R5 - R920 Medicine (General)|R726.5 - R726.8 Medicine and disease in relation to psychology, terminal care, dying",551,
        "R - Medicine|R5 - R920 Medicine (General)|R728 - R733 Practice of medicine. Medical practice economics",809,
        "R - Medicine|R5 - R920 Medicine (General)|R735 - R854 Medical education. Medical schools. Research",2873,
        "R - Medicine|R5 - R920 Medicine (General)|R856 - R857 Biomedical engineering. Electronics. Instrumentation",715,
        "R - Medicine|R5 - R920 Medicine (General)|R858 - R859.7 Computer applications to medicine",889,
        "R - Medicine|R5 - R920 Medicine (General)|R895 - R920 Medical physics. Medical radiology. Nuclear medicine",469,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine",32217,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA1 - RA418.5 Medicine and the state",8364,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA1 - RA418.5 Medicine and the state|RA407 - RA409.5 Health status indicators. Medical statistics and surveys",1589,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA1 - RA418.5 Medicine and the state|RA410 - RA410.9 Medical economics. Economics of medical care. Employment",1335,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA1 - RA418.5 Medicine and the state|RA411 - RA415 Provisions for personal medical care. Medical care plans",859,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA1 - RA418.5 Medicine and the state|RA418 - RA418.5 Medicine and society. Social medicine. Medical sociology",1034,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA1001 - RA1171 Forensic medicine. Medical jurisprudence. Legal medicine",1110,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA1190 - RA1270 Toxiciology. Poisons",2121,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA421 - RA790.85 Public health. Hygiene. Preventive medicine",16730,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA421 - RA790.85 Public health. Hygiene. Preventive medicine|RA565 - RA600 Environmental health (including sewage disposal, air pollution, nuisances, water supply)",1384,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA421 - RA790.85 Public health. Hygiene. Preventive medicine|RA601 - RA602 Food and food supply in relation to public health",103,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA421 - RA790.85 Public health. Hygiene. Preventive medicine|RA604 - RA618 Parks, public baths, public carriers, buildings, etc.",42,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA421 - RA790.85 Public health. Hygiene. Preventive medicine|RA619 - RA637 Disposal of the dead. Undertaking. Burial. Cremation. Cemeteries",49,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA421 - RA790.85 Public health. Hygiene. Preventive medicine|RA639 - RA642 Transmission of disease",259,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA421 - RA790.85 Public health. Hygiene. Preventive medicine|RA643 - RA645 Disease (Communicable and noninfectious) and public health",3420,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA421 - RA790.85 Public health. Hygiene. Preventive medicine|RA645.3 - RA645.37 Home health care services",181,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA421 - RA790.85 Public health. Hygiene. Preventive medicine|RA645.5 - RA645.9 Emergency medical services",215,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA421 - RA790.85 Public health. Hygiene. Preventive medicine|RA646 - RA648.3 War and public health",59,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA421 - RA790.85 Public health. Hygiene. Preventive medicine|RA648.5 - RA767 Epidemics. Epidemology. Quarantine. Disinfection",1012,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA421 - RA790.85 Public health. Hygiene. Preventive medicine|RA771 - RA771.7 Rural health and hygiene. Rural health services",93,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA421 - RA790.85 Public health. Hygiene. Preventive medicine|RA773 - RA788 Personal health and hygiene",1853,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA421 - RA790.85 Public health. Hygiene. Preventive medicine|RA790 - RA790.95 Mental health. Mental illness prevention",1348,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA791 - RA954 Medical geography. Climatology. Meteorology",446,
        "R - Medicine|RA1 - RA1270 Public aspects of medicine|RA960 - RA1000.5 Medical centers. Hospitals. Dispensaries. Clinics (including ambulance service and nursing homes)",3186,
        "R - Medicine|RB1 - RB214 Pathology",4493,
        "R - Medicine|RB1 - RB214 Pathology|RB127 - RB150 Manifestation of disease",1113,
        "R - Medicine|RB1 - RB214 Pathology|RB151 - RB214 Theories of disease. Etiology. Pathogenesis",1090,
        "R - Medicine|RB1 - RB214 Pathology|RB24 - RB33 Pathology anatomy and histology",139,
        "R - Medicine|RB1 - RB214 Pathology|RB37 - RB56.5 Clinical pathology. Laboratory technique",1125,
        "R - Medicine|RC31 - RC1245 Internal medicine",65784,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC110 - RC216 Infectious and parasitic diseases",2493,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC254 - RC282 Neoplasms. Tumors. Oncology (including cancer and carcinogens)",7165,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC306 - RC320.5 Tuberculosis",472,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC321 - RC571 Neurosciences. Biological psychiatry. Neuropsychiatry",32159,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC321 - RC571 Neurosciences. Biological psychiatry. Neuropsychiatry|RC346 - RC429 Neurology. Diseases of the nervous system",5563,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC321 - RC571 Neurosciences. Biological psychiatry. Neuropsychiatry|RC346 - RC429 Neurology. Diseases of the nervous system|RC423 - RC429 Speech and language disorders",971,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC49 - RC52 Psychosomatic medicine",217,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC581 - RC951 Specialties of internal medicine",15180,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC581 - RC951 Specialties of internal medicine|RC581 - RC607 Immunologic diseases. Allergy",1099,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC581 - RC951 Specialties of internal medicine|RC620 - RC627 Nutritional diseases. Deficiency diseases",149,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC581 - RC951 Specialties of internal medicine|RC627.5 - RC632 Metabolic diseases",526,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC581 - RC951 Specialties of internal medicine|RC633 - RC647.5 Diseases of the blood and blood-forming organs",874,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC581 - RC951 Specialties of internal medicine|RC648 - RC665 Diseases of the endocrine glands",1138,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC581 - RC951 Specialties of internal medicine|RC666 - RC701 Diseases of the circulatory (cardiovascular) system",4091,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC581 - RC951 Specialties of internal medicine|RC705 - RC779 Diseases of the respiratory system",1123,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC581 - RC951 Specialties of internal medicine|RC799 - RC869 Diseases of the digestive system. Gastroenterology",1945,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC581 - RC951 Specialties of internal medicine|RC870 - RC923 Diseases of the genitourinary system. Urology",1734,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC581 - RC951 Specialties of internal medicine|RC924 - RC924.5 Diseases of the connective tissues",37,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC581 - RC951 Specialties of internal medicine|RC925 - RC935 Diseases of the musculoskeletal system",1152,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC71 - RC78.7 Examination. Diagnosis (including radiography)",1011,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC71 - RC78.7 Examination. Diagnosis (including radiography)|RC78 - RC78.5 Radiography. Roentgenography",438,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC86 - RC88.9 Medical emergencies. Critical care. Intensive care. First aid",899,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC91 - RC103 Diseases due to physical and chemical agents",53,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC952 - RC1245 Special situations and conditions",3091,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC952 - RC1245 Special situations and conditions|RC1000 - RC1020 Submarine medicine",22,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC952 - RC1245 Special situations and conditions|RC1030 - RC1160 Transportation medicine (including automotive, aviation, and space medicine)",395,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC952 - RC1245 Special situations and conditions|RC1200 - RC1245 Sports medicine",722,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC952 - RC1245 Special situations and conditions|RC952 - RC954.6 Geriatrics",828,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC952 - RC1245 Special situations and conditions|RC955 - RC962 Arctic medicine. Tropical medicine",202,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC952 - RC1245 Special situations and conditions|RC963 - RC969 Industrial medicine. Industrial hygiene",685,
        "R - Medicine|RC31 - RC1245 Internal medicine|RC952 - RC1245 Special situations and conditions|RC970 - RC986 Military medicine. Naval medicine",133,
        "R - Medicine|RD1 - RD811 Surgery",10556,
        "R - Medicine|RD1 - RD811 Surgery|RD1 - RD31.7 General works",935,
        "R - Medicine|RD1 - RD811 Surgery|RD101 - RD104 Fractures (General)",165,
        "R - Medicine|RD1 - RD811 Surgery|RD118 - RD120.5 Plastic surgery. Reparative surgery",413,
        "R - Medicine|RD1 - RD811 Surgery|RD120.6 - RD129.8 Transplantation of organs, tissues, etc.",460,
        "R - Medicine|RD1 - RD811 Surgery|RD137 - RD145 Surgery in childhood, adolescence, pregnancy, old age",222,
        "R - Medicine|RD1 - RD811 Surgery|RD151 - RD498 Military and naval surgery",99,
        "R - Medicine|RD1 - RD811 Surgery|RD32 - RD33.9 Operative surgery. Technique of surgical operations",355,
        "R - Medicine|RD1 - RD811 Surgery|RD49 - RD52 Surgical therapeutics. Preoperative and postoperative care",102,
        "R - Medicine|RD1 - RD811 Surgery|RD520 - RD599.5 Surgery by region, system, or organ",3633,
        "R - Medicine|RD1 - RD811 Surgery|RD63 - RD76 Operating rooms and theaters. Instruments, apparatus, and appliances",118,
        "R - Medicine|RD1 - RD811 Surgery|RD651 - RD678 Neoplasms. Tumors. Oncology",268,
        "R - Medicine|RD1 - RD811 Surgery|RD680 - RD688 Diseases of the locomotor system (Surgical treatment)",145,
        "R - Medicine|RD1 - RD811 Surgery|RD701 - RD811 Orthopedic surgery",1349,
        "R - Medicine|RD1 - RD811 Surgery|RD701 - RD811 Orthopedic surgery|RD792 - RD811 Physical rehabilitation",78,
        "R - Medicine|RD1 - RD811 Surgery|RD75 - RD79 Examinations. Diagnosis",103,
        "R - Medicine|RD1 - RD811 Surgery|RD78.3 - RD87.3 Anesthesiology",706,
        "R - Medicine|RD1 - RD811 Surgery|RD91 - RD91.5 Asepsis and antisepsis. Sterilization (Operative)",12,
        "R - Medicine|RD1 - RD811 Surgery|RD92 - RD97.8 Emergency surgery. Wounds and injuries",669,
        "R - Medicine|RD1 - RD811 Surgery|RD98 - RD98.4 Surgical complications",40,
        "R - Medicine|RD1 - RD811 Surgery|RD99 - RD99.35 Surgical nursing",71,
        "R - Medicine|RE1 - RE994 Opthamology",2345,
        "R - Medicine|RE1 - RE994 Opthamology|RE91 - RE912 Particular diseases of the eye",956,
        "R - Medicine|RE1 - RE994 Opthamology|RE918 - RE921 Color vision tests, charts, etc.",3,
        "R - Medicine|RE1 - RE994 Opthamology|RE925 - RE939 Refraction and errors of refraction and accommodation",60,
        "R - Medicine|RE1 - RE994 Opthamology|RE939.2 - RE981 Optometry. Opticians. Eyeglasses",117,
        "R - Medicine|RE1 - RE994 Opthamology|RE986 - RE988 Artificial eyes and other prostheses",8,
        "R - Medicine|RE1 - RE994 Opthamology|RE991 - RE991 Ocular therapeutics",2,
        "R - Medicine|RF1 - RF547 Otorhinolaryngology",1401,
        "R - Medicine|RF1 - RF547 Otorhinolaryngology|RF110 - RF320 Otology. Diseases of the ear",753,
        "R - Medicine|RF1 - RF547 Otorhinolaryngology|RF341 - RF437 Rhinology. Diseases of the nose, accessory sinuses, and nasopharynx",94,
        "R - Medicine|RF1 - RF547 Otorhinolaryngology|RF460 - RF547 Laryngology. Diseases of the throat",156,
        "R - Medicine|RG1 - RG991 Gynecology and obstetrics",6127,
        "R - Medicine|RG1 - RG991 Gynecology and obstetrics|RG104 - RG104.7 Operative gynecology",116,
        "R - Medicine|RG1 - RG991 Gynecology and obstetrics|RG133 - RG137.6 Conception. Artificial insemination. Contraception",875,
        "R - Medicine|RG1 - RG991 Gynecology and obstetrics|RG159 - RG208 Functional and systemic disorders. Endocrine gynecology",283,
        "R - Medicine|RG1 - RG991 Gynecology and obstetrics|RG211 - RG483 Abnormalities and diseases of the female genital organs",204,
        "R - Medicine|RG1 - RG991 Gynecology and obstetrics|RG484 - RG485 Urogynecology and obstetric urology. Urogynecologic surgery",35,
        "R - Medicine|RG1 - RG991 Gynecology and obstetrics|RG491 - RG499 Diseases of the breast",171,
        "R - Medicine|RG1 - RG991 Gynecology and obstetrics|RG500 - RG991 Obstetrics",3193,
        "R - Medicine|RG1 - RG991 Gynecology and obstetrics|RG500 - RG991 Obstetrics|RG551 - RG591 Pregnancy",625,
        "R - Medicine|RG1 - RG991 Gynecology and obstetrics|RG500 - RG991 Obstetrics|RG600 - RG650 The embryo and fetus",810,
        "R - Medicine|RG1 - RG991 Gynecology and obstetrics|RG500 - RG991 Obstetrics|RG651 - RG721 Labor. Parturition",199,
        "R - Medicine|RG1 - RG991 Gynecology and obstetrics|RG500 - RG991 Obstetrics|RG725 - RG791 Obstetric operations. Operative obstetrics",219,
        "R - Medicine|RG1 - RG991 Gynecology and obstetrics|RG500 - RG991 Obstetrics|RG801 - RG871 Puerperal state",99,
        "R - Medicine|RG1 - RG991 Gynecology and obstetrics|RG500 - RG991 Obstetrics|RG940 - RG991 Maternal care. Prenatal care services",648,
        "R - Medicine|RJ1 - RJ570 Pediatrics",11045,
        "R - Medicine|RJ1 - RJ570 Pediatrics|RJ101 - RJ103 Child health. Child health services",321,
        "R - Medicine|RJ1 - RJ570 Pediatrics|RJ125 - RJ145 Physiology of children and adolescents",482,
        "R - Medicine|RJ1 - RJ570 Pediatrics|RJ206 - RJ235 Nutrition and feeding of children and adolescents",456,
        "R - Medicine|RJ1 - RJ570 Pediatrics|RJ242 - RJ243 Hospital care",49,
        "R - Medicine|RJ1 - RJ570 Pediatrics|RJ245 - RJ247 Nursing of children. Pediatric nursing",200,
        "R - Medicine|RJ1 - RJ570 Pediatrics|RJ250 - RJ250.3 Premature infants",60,
        "R - Medicine|RJ1 - RJ570 Pediatrics|RJ251 - RJ325 Newborn infants (including physiology, care, treatment, diseases)",514,
        "R - Medicine|RJ1 - RJ570 Pediatrics|RJ370 - RJ550 Diseases of children and adolescents",7091,
        "R - Medicine|RJ1 - RJ570 Pediatrics|RJ370 - RJ550 Diseases of children and adolescents|RJ499 - RJ507 Mental disorders. Child psychiatry",4254,
        "R - Medicine|RJ1 - RJ570 Pediatrics|RJ47.3 - RJ47.4 Genetic aspects",14,
        "R - Medicine|RJ1 - RJ570 Pediatrics|RJ50 - RJ51 Examination. Diagnosis",79,
        "R - Medicine|RJ1 - RJ570 Pediatrics|RJ52 - RJ53 Therapeutics",20,
        "R - Medicine|RJ1 - RJ570 Pediatrics|RJ59 - RJ60 Infant and neonatal morbidity and mortality",30,
        "R - Medicine|RK1 - RK715 Dentistry",3508,
        "R - Medicine|RK1 - RK715 Dentistry|RK301 - RK493 Oral and dental medicine. Pathology. Diseases",708,
        "R - Medicine|RK1 - RK715 Dentistry|RK501 - RK519 Operative dentistry. Restorative dentistry",199,
        "R - Medicine|RK1 - RK715 Dentistry|RK520 - RK528 Orthodontics",308,
        "R - Medicine|RK1 - RK715 Dentistry|RK529 - RK535 Oral surgery",99,
        "R - Medicine|RK1 - RK715 Dentistry|RK58 - RK59.3 Practice of dentistry. Dental economics",120,
        "R - Medicine|RK1 - RK715 Dentistry|RK60.7 - RK60.8 Preventive dentistry",62,
        "R - Medicine|RK1 - RK715 Dentistry|RK641 - RK667 Prosthetic dentistry. Prosthodontics",333,
        "R - Medicine|RL1 - RL803 Dermatology",1134,
        "R - Medicine|RL1 - RL803 Dermatology|RL110 - RL120 Therapeutics",29,
        "R - Medicine|RL1 - RL803 Dermatology|RL130 - RL169 Diseases of the glands, hair, nails",57,
        "R - Medicine|RL1 - RL803 Dermatology|RL201 - RL331 Hyperemias, inflammations, and infections of the skin",145,
        "R - Medicine|RL1 - RL803 Dermatology|RL391 - RL489 Atrophies. Hypertrophies",10,
        "R - Medicine|RL1 - RL803 Dermatology|RL701 - RL751 Diseases due to psychosomatic and nerve disorders. Dermatoneuroses",17,
        "R - Medicine|RL1 - RL803 Dermatology|RL760 - RL785 Diseases due to parasites",15,
        "R - Medicine|RL1 - RL803 Dermatology|RL87 - RL94 Care and hygiene",42,
        "R - Medicine|RM1 - RM950 Therapeutics. Pharmacology",7915,
        "R - Medicine|RM1 - RM950 Therapeutics. Pharmacology|RM146 - RM146.7 Misues of therapeutic drugs. Medication Errors",27,
        "R - Medicine|RM1 - RM950 Therapeutics. Pharmacology|RM147 - RM180 Administration of drugs and other therapeutic agents",510,
        "R - Medicine|RM1 - RM950 Therapeutics. Pharmacology|RM182 - RM190 Other therapeutic procedures (including acupuncture, pneumatic aspiration, spinal puncture, pericardial puncture)",227,
        "R - Medicine|RM1 - RM950 Therapeutics. Pharmacology|RM214 - RM258 Diet therapy. Diet and dietetics in disease. Dietary cookbooks",770,
        "R - Medicine|RM1 - RM950 Therapeutics. Pharmacology|RM260 - RM263 Chemotherapy",165,
        "R - Medicine|RM1 - RM950 Therapeutics. Pharmacology|RM265 - RM267 Antibiotic therapy. Antibiotics",52,
        "R - Medicine|RM1 - RM950 Therapeutics. Pharmacology|RM270 - RM282 Immunotherapy. Serum therapy",58,
        "R - Medicine|RM1 - RM950 Therapeutics. Pharmacology|RM283 - RM298 Endocrinotherapy. Organotherapy",78,
        "R - Medicine|RM1 - RM950 Therapeutics. Pharmacology|RM300 - RM666 Drugs and their actions",2684,
        "R - Medicine|RM1 - RM950 Therapeutics. Pharmacology|RM671 - RM671.5 Nonprescription drugs. Patent medicines",36,
        "R - Medicine|RM1 - RM950 Therapeutics. Pharmacology|RM695 - RM893 Physical medicine. Physical therapy (including massage, exercise, occupational therapy, hydrotherapy, phototherapy, radiotherapy, thermotherapy, elect",1490,
        "R - Medicine|RM1 - RM950 Therapeutics. Pharmacology|RM930 - RM931 Rehabilitation therapy",139,
        "R - Medicine|RS1 - RS441 Pharmacy and materia medica",3840,
        "R - Medicine|RS1 - RS441 Pharmacy and materia medica|RS125 - RS131.9 Formularies. Collected prescriptions",186,
        "R - Medicine|RS1 - RS441 Pharmacy and materia medica|RS139 - RS141.9 Pharmacopoeias",72,
        "R - Medicine|RS1 - RS441 Pharmacy and materia medica|RS151.2 - RS151.9 Dispensatories",35,
        "R - Medicine|RS1 - RS441 Pharmacy and materia medica|RS153 - RS441 Materia medica",2333,
        "R - Medicine|RS1 - RS441 Pharmacy and materia medica|RS153 - RS441 Materia medica|RS160 - RS167 Pharmacognosy. Pharmaceutical substances (plant, animal, and inorganic)",464,
        "R - Medicine|RS1 - RS441 Pharmacy and materia medica|RS153 - RS441 Materia medica|RS189 - RS190 Assay methods. Standardization. Analysis",189,
        "R - Medicine|RS1 - RS441 Pharmacy and materia medica|RS153 - RS441 Materia medica|RS192 - RS199 Pharmaceutical technology",74,
        "R - Medicine|RS1 - RS441 Pharmacy and materia medica|RS153 - RS441 Materia medica|RS200 - RS201 Pharmaceutical dosage forms",46,
        "R - Medicine|RS1 - RS441 Pharmacy and materia medica|RS153 - RS441 Materia medica|RS250 - RS252 Commercial preparations. Patent medicines",9,
        "R - Medicine|RS1 - RS441 Pharmacy and materia medica|RS153 - RS441 Materia medica|RS355 - RS356 Pharmaceutical supplies",3,
        "R - Medicine|RS1 - RS441 Pharmacy and materia medica|RS153 - RS441 Materia medica|RS400 - RS431 Pharmaceutical chemistry",559,
        "R - Medicine|RT1 - RT120 Nursing",5529,
        "R - Medicine|RT1 - RT120 Nursing|RT89 - RT120 Specialties in nursing",696,
        "R - Medicine|RV1 - RV431 Botanic, Thomsonian, and eclectic medicine",40,
        "R - Medicine|RX1 - RX681 Homeopathy",94,
        "R - Medicine|RX1 - RX681 Homeopathy|RX211 - RX581 Diseases, treatment, etc.",15,
        "R - Medicine|RX1 - RX681 Homeopathy|RX601 - RX675 Materia medica and therapeutics",11,
        "R - Medicine|RZ201 - RZ999 Other systems of medicine",266,
        "R - Medicine|RZ201 - RZ999 Other systems of medicine|RZ201 - RZ275 Chiropractic",63,
        "R - Medicine|RZ201 - RZ999 Other systems of medicine|RZ301 - RZ397.5 Osteopathy",39,
        "R - Medicine|RZ201 - RZ999 Other systems of medicine|RZ400 - RZ408 Mental healing",81,
        "R - Medicine|RZ201 - RZ999 Other systems of medicine|RZ409.7 - RZ999 Miscellaneous systems and treatments (including magnetotherapy, mesmerism, naturopathy, organomic medicine, phrenology, radiesthesia, etc.)",61,
        "S - Agriculture",59880,
        "S - Agriculture|S1 - S946.5 Agriculture (General)",18490,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S107 - S109 Economic botany",5,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S113.2 - S118.46 Seeds. Seed technology",5,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S119 - S124 Propagation (including breeding, selection, grafting, air layering)",8,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S419 - S482 History",1584,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S530 - S559 Agricultural education",817,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S560 - S571.5 Farm economics. Farm management. Agricultural mathematics",306,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S583 - S587.73 Agricultural chemistry. Agricultural chemicals",284,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S588.4 - S589.6 Agricultural physics",45,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S589.75 - S589.76 Agriculture and the environment",75,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S589.8 - S589.87 Plant growing media. Potting soils",1,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S590 - S599.9 Soils. Soil science (Including soil surveys, soil chemistry, soil structure, soil-plant relationships)",2406,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S600 - S600.7 Agricultural meteorology. Crops and climate",125,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S602 - S604.37 Methods and systems of culture. Cropping systems",80,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S604.5 - S604.64 Agricultural conservation",35,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S604.8 - S621.5 Melioration: Improvement, reclamation, fertilization, irrigation, etc. of lands",409,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S604.8 - S621.5 Melioration: Improvement, reclamation, fertilization, irrigation, etc. of lands|S606 - S621.5 Special classes of lands and reclamation methods (including woodlands, burning of lands, deserts, saline environments, moors)",259,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S622 - S627 Soil conservation and protection",355,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S631 - S667 Fertilizers and improvement of the soil",269,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S671 - S760.5 Farm machinery and farm engineering",206,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S71 - S87 History",31,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S770 - S790.3 Agricultural structures. Farm buildings",7,
        "S - Agriculture|S1 - S946.5 Agriculture (General)|S900 - S946.5 Conservation of natural resources (Including land conservation)",553,
        "S - Agriculture|SB1 - SB1110 Plant culture",15072,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB170 - SB172.5 Tree crops",24,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB175 - SB177 Food crops",67,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB183 - SB317 Field crops (including cereals, forage crops, grasses, legumes, root crops, sugar plants, textile plants, alkaloidal plants, medicinal plants)",1941,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB317.5 - SB319.86 Horticulture. Horticultural crops",143,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB320 - SB353.5 Vegetables",630,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB354 - SB402 Fruit culture and orchard care",672,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB354 - SB402 Fruit culture and orchard care|SB381 - SB386 Berries and Small Fruits",21,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB354 - SB402 Fruit culture and orchard care|SB387 - SB399 Grape Culture, Viticulture",115,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB403 - SB450.87 Flowers and flower culture. Ornamental plants",2714,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB403 - SB450.87 Flowers and flower culture. Ornamental plants|SB406.7 - SB406.83 Plant propagation",3,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB403 - SB450.87 Flowers and flower culture. Ornamental plants|SB409 - SB413 Culture of Individual plants",245,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB403 - SB450.87 Flowers and flower culture. Ornamental plants|SB414.6 - SB417 Greenhouses and greenhouse culture",79,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB403 - SB450.87 Flowers and flower culture. Ornamental plants|SB418 - SB418.4 Container gardening",35,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB403 - SB450.87 Flowers and flower culture. Ornamental plants|SB419 - SB419.3 Indoor gardening and houseplants",124,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB403 - SB450.87 Flowers and flower culture. Ornamental plants|SB421 - SB439.8 Classes of plants (including annuals, climbers, ferns, lawns, perennials, shrubs)",1205,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB403 - SB450.87 Flowers and flower culture. Ornamental plants|SB441 - SB441.75 Flower shows. Exhibitions",3,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB403 - SB450.87 Flowers and flower culture. Ornamental plants|SB442.8 - SB443.4 Marketing, cut flower industry",20,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB403 - SB450.87 Flowers and flower culture. Ornamental plants|SB444 - SB446.6 Horticultural service industry",8,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB403 - SB450.87 Flowers and flower culture. Ornamental plants|SB449 - SB450.87 Flower arrangement and decoration",121,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB450.9 - SB467.8 Gardens and gardening",1815,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB469 - SB476 Landscape gardening. Landscape architecture",971,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB481 - SB485 Parks and public reservations (including works on theory, management, history)",503,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB599 - SB990.5 Pests and diseases",3509,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB599 - SB990.5 Pests and diseases|SB610 - SB615 Weeds, parasitic plants, etc.",332,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB599 - SB990.5 Pests and diseases|SB617 - SB618 Poisonous plants",22,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB599 - SB990.5 Pests and diseases|SB621 - SB795 Plant pathology",838,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB599 - SB990.5 Pests and diseases|SB818 - SB945 Economic entomology",428,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB599 - SB990.5 Pests and diseases|SB950 - SB990.5 Pest control and treatment of diseases. Plant protection",825,
        "S - Agriculture|SB1 - SB1110 Plant culture|SB992 - SB998 Economic zoology applied to crops. Agricultural zoology (including animals injurious and beneficial to plants)",57,
        "S - Agriculture|SD1 - SD669.5 Forestry",8553,
        "S - Agriculture|SD1 - SD669.5 Forestry|SD131 - SD247.5 History of forestry. Forest conditions",1607,
        "S - Agriculture|SD1 - SD669.5 Forestry|SD250 - SD363.3 Forestry education",151,
        "S - Agriculture|SD1 - SD669.5 Forestry|SD390 - SD390.43 Forest soils",33,
        "S - Agriculture|SD1 - SD669.5 Forestry|SD390.5 - SD390.7 Forest meteorology. Forest microclimatology",20,
        "S - Agriculture|SD1 - SD669.5 Forestry|SD391 - SD410.9 Sylviculture",826,
        "S - Agriculture|SD1 - SD669.5 Forestry|SD411 - SD428 Conservation and protection",674,
        "S - Agriculture|SD1 - SD669.5 Forestry|SD430 - SD557 Exploitation and utilization",654,
        "S - Agriculture|SD1 - SD669.5 Forestry|SD561 - SD669.5 Administration. Policy",270,
        "S - Agriculture|SF1 - SF1100 Animal culture",5215,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF101 - SF103.5 Brands and branding, and other means of identifying",8,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF105 - SF109 Breeding",93,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF111 - SF113 Cost, yield, and profit. Accounting",2,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF114 - SF121 Exhibitions",7,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF170 - SF180 Working animals",4,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF191 - SF275 Cattle",495,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF191 - SF275 Cattle|SF221 - SF250 Horses",121,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF191 - SF275 Cattle|SF250.5 - SF275 Horse sports. Horse shows",160,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF361 - SF361.73 Donkeys",6,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF371 - SF379 Sheep. Wool",109,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF380 - SF388 Goats",25,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF391 - SF397.83 Swine",79,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF402 - SF405 Fur-bearing animals",13,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF405.5 - SF407 Laboratory animals",78,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF408 - SF408.6 Zoo animals",17,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF41 - SF55 History",51,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF411 - SF459 Pets",692,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF411 - SF459 Pets|SF421 - SF440.2 Dogs. Dog racing",373,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF411 - SF459 Pets|SF441 - SF450 Cats",120,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF411 - SF459 Pets|SF451 - SF455 Rabbits and hares",18,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF411 - SF459 Pets|SF456 - SF458.83 Fishes. Aquariums",55,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF461 - SF473 Birds",33,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF481 - SF507 Poultry. Eggs",164,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF508 - SF510 Game birds",4,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF511 - SF511.5 Ostrich",3,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF515 - SF515.5 Reptiles",1,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF521 - SF539.8 Bee culture",170,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF541 - SF560 Sericulture. Silk culture",35,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF600 - SF1100 Veterinary medicine",1667,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF600 - SF1100 Veterinary medicine|SF756.5 - SF769.5 Special preclinical sciences (including veterinary genetics, ethology, anatomy, physiology, embryology)",188,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF600 - SF1100 Veterinary medicine|SF780.2 - SF780.7 Veterinary microbiology, bacteriology, virology, mycology",21,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF600 - SF1100 Veterinary medicine|SF781 - SF809 Communicable diseases of animals (General)",80,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF600 - SF1100 Veterinary medicine|SF811 - SF909 Veterinary medicine of special organs, regions, and systems",97,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF600 - SF1100 Veterinary medicine|SF911 - SF914.4 Veterinary surgery",60,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF600 - SF1100 Veterinary medicine|SF911 - SF914.4 Veterinary surgery|SF914.3 - SF914.4 Veterinary traumatology. Veterinary emergencies",4,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF600 - SF1100 Veterinary medicine|SF915 - SF919.5 Veterinary pharmacology",58,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF600 - SF1100 Veterinary medicine|SF951 - SF997.5 Diseases of special classes of animals",485,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF84 - SF84.64 Economic zoology",18,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF84.82 - SF85.6 Rangelands. Range management. Grazing",113,
        "S - Agriculture|SF1 - SF1100 Animal culture|SF95 - SF99 Feeds and feeding. Animal nutrition",133,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling",4457,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH20.3 - SH191 Aquaculture",625,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH20.3 - SH191 Aquaculture|SH151 - SH179 Fish culture",368,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH20.3 - SH191 Aquaculture|SH151 - SH179 Fish culture|SH171 - SH179 Diseases and adverse factors",152,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH20.3 - SH191 Aquaculture|SH33 - SH134.6 By region or country",103,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH201 - SH399 Fisheries",2527,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH201 - SH399 Fisheries|SH213 - SH216.55 By oceans and seas",61,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH201 - SH399 Fisheries|SH219 - SH321 By region or country",602,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH201 - SH399 Fisheries|SH327.5 - SH327.7 Fishery resources. Fishery conservation",48,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH201 - SH399 Fisheries|SH328 - SH329 Fishery management. Fishery policy",259,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH201 - SH399 Fisheries|SH334.5 - SH334.7 Fishery technology",6,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH201 - SH399 Fisheries|SH334.9 - SH336.5 Fishery processing",55,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH201 - SH399 Fisheries|SH343.2 - SH343.3 Fishery oceanography. Fishery meteorology",7,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH201 - SH399 Fisheries|SH344 - SH344.8 Methods and gear. Catching of fish",48,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH201 - SH399 Fisheries|SH346 - SH351 Fishery for individual species",45,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH201 - SH399 Fisheries|SH360 - SH363 Seal fisheries. Fur sealing",12,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH201 - SH399 Fisheries|SH365 - SH380.92 Shellfish fisheries. Shellfish culture",164,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH201 - SH399 Fisheries|SH381 - SH385 Whaling",122,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH201 - SH399 Fisheries|SH388.7 - SH391.5 Algae culture. Seaweed",35,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH400 - SH400.8 Seafood gathering",4,
        "S - Agriculture|SH1 - SH691 Aquaculture. Fisheries. Angling|SH401 - SH691 Angling (including tackle, casting, methods of angling, angling for special kinds of fish)",387,
        "S - Agriculture|SK1 - SK663 Hunting",1377,
        "S - Agriculture|SK1 - SK663 Hunting|SK281 - SK293 Special methods and types of hunting (including bolos, game calling, tracking, trapping, dressing)",64,
        "S - Agriculture|SK1 - SK663 Hunting|SK281 - SK293 Special methods and types of hunting (including bolos, game calling, tracking, trapping, dressing)|SK284 - SK287 Fox hunting",33,
        "S - Agriculture|SK1 - SK663 Hunting|SK281 - SK293 Special methods and types of hunting (including bolos, game calling, tracking, trapping, dressing)|SK291 - SK292 Coursing",1,
        "S - Agriculture|SK1 - SK663 Hunting|SK295 - SK305 Big game",43,
        "S - Agriculture|SK1 - SK663 Hunting|SK311 - SK335 Bird hunting. Fowling",127,
        "S - Agriculture|SK1 - SK663 Hunting|SK351 - SK579 Wildlife management. Game protection",447,
        "S - Agriculture|SK1 - SK663 Hunting|SK37 - SK39.5 Shooting",7,
        "S - Agriculture|SK1 - SK663 Hunting|SK40 - SK268 By country",275,
        "S - Agriculture|SK1 - SK663 Hunting|SK590 - SK593 Wild animal trade",10,
        "S - Agriculture|SK1 - SK663 Hunting|SK650 - SK664 Wildlife-related recreation",4,
        "T - Technology.",159746,
        "T - Technology.|T1 - T995 Technology (General)",13486,
        "T - Technology.|T1 - T995 Technology (General)|T11.95 - T12.5 Industrial directories",71,
        "T - Technology.|T1 - T995 Technology (General)|T14.7 - T33 History of technology",792,
        "T - Technology.|T1 - T995 Technology (General)|T173.2 - T174.5 Technological change",906,
        "T - Technology.|T1 - T995 Technology (General)|T175 - T178 Industrial research. Research and development",355,
        "T - Technology.|T1 - T995 Technology (General)|T201 - T342 Patents. Trademarks",475,
        "T - Technology.|T1 - T995 Technology (General)|T351 - T385 Mechanical drawing. Engineering graphics",404,
        "T - Technology.|T1 - T995 Technology (General)|T391 - T995 Exhibitions. Trade shows. World's fairs",377,
        "T - Technology.|T1 - T995 Technology (General)|T55 - T55.3 Industrial satety. Industrial accident prevention",246,
        "T - Technology.|T1 - T995 Technology (General)|T55.4 - T60.8 Industrial engineering. Management engineering",4744,
        "T - Technology.|T1 - T995 Technology (General)|T55.4 - T60.8 Industrial engineering. Management engineering|T57 - T57.97 Applied mathematics. Quantitative methods",1629,
        "T - Technology.|T1 - T995 Technology (General)|T55.4 - T60.8 Industrial engineering. Management engineering|T57 - T57.97 Applied mathematics. Quantitative methods|T57.6 - T57.97 Operations research. Systems analysis",1517,
        "T - Technology.|T1 - T995 Technology (General)|T55.4 - T60.8 Industrial engineering. Management engineering|T58.5 - T58.64 Information technology",1795,
        "T - Technology.|T1 - T995 Technology (General)|T55.4 - T60.8 Industrial engineering. Management engineering|T58.5 - T58.64 Information technology|T58.6 - T58.62 Management information systems",641,
        "T - Technology.|T1 - T995 Technology (General)|T55.4 - T60.8 Industrial engineering. Management engineering|T58.7 - T58.8 Production capacity. Manufacturing capacity",9,
        "T - Technology.|T1 - T995 Technology (General)|T55.4 - T60.8 Industrial engineering. Management engineering|T59 - T59.2 Standardization",20,
        "T - Technology.|T1 - T995 Technology (General)|T55.4 - T60.8 Industrial engineering. Management engineering|T59.7 - T59.77 Human engineering in industry. Man-machine systems",57,
        "T - Technology.|T1 - T995 Technology (General)|T55.4 - T60.8 Industrial engineering. Management engineering|T60 - T60.8 Work measurement. Methods engineering",96,
        "T - Technology.|T1 - T995 Technology (General)|T61 - T173 Technical education. Technical schools",534,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)",21685,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)|TA1001 - TA1280 Transportation engineering",383,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)|TA1501 - TA1820 Applied optics. Photonics",6153,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)|TA166 - TA167 Human engineering",340,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)|TA170 - TA171 Environmental engineering",187,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)|TA177.4 - TA185 Engineering economy",73,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)|TA190 - TA195 Management of engineering works",107,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)|TA197 - TA198 Engineering meteorology",2,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)|TA2001 - TA2040 Plasma engineering. Applied plasma dynamics",30,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)|TA213 - TA215 Engineering machinery, tools, and implements",2,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)|TA329 - TA348 Engineering mathematics. Engineering analysis",1053,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)|TA349 - TA359 Mechanics of engineering. Applied mechanics",1127,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)|TA365 - TA367 Acoustics in engineering. Acoustical engineering",60,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)|TA401 - TA492 Materials of engineering and construction. Mechanics of materials",6372,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)|TA501 - TA625 Surveying",279,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)|TA630 - TA695 Structural engineering (General)",1266,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)|TA703 - TA712 Engineering geology. Rock mechanics. Soil mechanics. Underground construction",732,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)|TA715 - TA787 Earthwork. Foundations",125,
        "T - Technology.|TA1 - TA2040 Engineering (General). Civil engineering (General)|TA800 - TA820 Tunneling. Tunnels",57,
        "T - Technology.|TC1 - TC978 Hydraulic engineering.",3654,
        "T - Technology.|TC1 - TC978 Hydraulic engineering.|TC160 - TC181 Technical hydraulics",387,
        "T - Technology.|TC1 - TC978 Hydraulic engineering.|TC183 - TC201 General preliminary operations. Dredging. Submarine building",14,
        "T - Technology.|TC1 - TC978 Hydraulic engineering.|TC203 - TC380 Harbors and coast protective works. Coastal engineering. Lighthouses",317,
        "T - Technology.|TC1 - TC978 Hydraulic engineering.|TC401 - TC506 River, lake, and water-supply engineering (General)",933,
        "T - Technology.|TC1 - TC978 Hydraulic engineering.|TC530 - TC537 River protective works. Regulation. Flood control",81,
        "T - Technology.|TC1 - TC978 Hydraulic engineering.|TC540 - TC558 Dams. Barrages",137,
        "T - Technology.|TC1 - TC978 Hydraulic engineering.|TC601 - TC791 Canals and inland navigation. Waterways",270,
        "T - Technology.|TC1 - TC978 Hydraulic engineering.|TC801 - TC978 Irrigation engineering. Reclamation of wasteland. Drainage",1204,
        "T - Technology.|TC1501 - TC1800 Ocean engineering",113,
        "T - Technology.|TD1 - TD1066 Environmental technology. Sanitary engineering.",13047,
        "T - Technology.|TD1 - TD1066 Environmental technology. Sanitary engineering.|TD1020 - TD1066 Hazardous substances and their disposal",259,
        "T - Technology.|TD1 - TD1066 Environmental technology. Sanitary engineering.|TD159 - TD168 Municipal engineering",155,
        "T - Technology.|TD1 - TD1066 Environmental technology. Sanitary engineering.|TD169 - TD171.8 Environmental protection",740,
        "T - Technology.|TD1 - TD1066 Environmental technology. Sanitary engineering.|TD172 - TD193.5 Environmental pollution",959,
        "T - Technology.|TD1 - TD1066 Environmental technology. Sanitary engineering.|TD194 - TD195 Environmental effects of industries and plants",326,
        "T - Technology.|TD1 - TD1066 Environmental technology. Sanitary engineering.|TD201 - TD500 Water supply for domestic and industrial purposes",4580,
        "T - Technology.|TD1 - TD1066 Environmental technology. Sanitary engineering.|TD201 - TD500 Water supply for domestic and industrial purposes|TD419 - TD428 Water pollution",878,
        "T - Technology.|TD1 - TD1066 Environmental technology. Sanitary engineering.|TD201 - TD500 Water supply for domestic and industrial purposes|TD429.5 - TD480.7 Water purification. Water treatment and conditioning. Saline water conversion",644,
        "T - Technology.|TD1 - TD1066 Environmental technology. Sanitary engineering.|TD201 - TD500 Water supply for domestic and industrial purposes|TD481 - TD493 Water distribution systems",94,
        "T - Technology.|TD1 - TD1066 Environmental technology. Sanitary engineering.|TD511 - TD780 Sewage collection and disposal systems",892,
        "T - Technology.|TD1 - TD1066 Environmental technology. Sanitary engineering.|TD783 - TD812.5 Municipal refuse. Solid wastes",768,
        "T - Technology.|TD1 - TD1066 Environmental technology. Sanitary engineering.|TD813 - TD870 Street cleaning. Litter and its removal",23,
        "T - Technology.|TD1 - TD1066 Environmental technology. Sanitary engineering.|TD878 - TD894 Special types of environmental pollution (including soil, air, and noise pollution)",1635,
        "T - Technology.|TD1 - TD1066 Environmental technology. Sanitary engineering.|TD895 - TD899 Industrial and factory sanitation",620,
        "T - Technology.|TD1 - TD1066 Environmental technology. Sanitary engineering.|TD895 - TD899 Industrial and factory sanitation|TD896 - TD899 Industrial and factory wastes",616,
        "T - Technology.|TD1 - TD1066 Environmental technology. Sanitary engineering.|TD920 - TD934 Rural and farm sanitary engineering",108,
        "T - Technology.|TD1 - TD1066 Environmental technology. Sanitary engineering.|TD940 - TD949 Low temperature sanitary engineering",1,
        "T - Technology.|TE1 - TE450 Highway engineering. Roads and pavements",2986,
        "T - Technology.|TE1 - TE450 Highway engineering. Roads and pavements|TE175 - TE176.5 Highway design. Interchanges and intersections",125,
        "T - Technology.|TE1 - TE450 Highway engineering. Roads and pavements|TE177 - TE178.8 Roadside development. Landscaping",29,
        "T - Technology.|TE1 - TE450 Highway engineering. Roads and pavements|TE200 - TE205 Materials for roadmaking",33,
        "T - Technology.|TE1 - TE450 Highway engineering. Roads and pavements|TE206 - TE209.5 Location engineering",9,
        "T - Technology.|TE1 - TE450 Highway engineering. Roads and pavements|TE210 - TE228.3 Construction details (including foundations, maintenance, equipment)",322,
        "T - Technology.|TE1 - TE450 Highway engineering. Roads and pavements|TE250 - TE278.8 Pavements and paved roads",122,
        "T - Technology.|TE1 - TE450 Highway engineering. Roads and pavements|TE279.5 - TE298 Pedestrian facilities",48,
        "T - Technology.|TE1 - TE450 Highway engineering. Roads and pavements|TE279.5 - TE298 Pedestrian facilities|TE280 - TE295 Sidewalks. Footpaths. Flagging",3,
        "T - Technology.|TF1 - TF1620 Railroad engineering and operation",1104,
        "T - Technology.|TF1 - TF1620 Railroad engineering and operation|TF1300 - TF1620 High speed ground transportation",29,
        "T - Technology.|TF1 - TF1620 Railroad engineering and operation|TF200 - TF320 Railway construction",113,
        "T - Technology.|TF1 - TF1620 Railroad engineering and operation|TF340 - TF499 Railway equipment and supplies",31,
        "T - Technology.|TF1 - TF1620 Railroad engineering and operation|TF501 - TF668 Railway operation and management",77,
        "T - Technology.|TF1 - TF1620 Railroad engineering and operation|TF670 - TF851 Local and light railways",117,
        "T - Technology.|TF1 - TF1620 Railroad engineering and operation|TF670 - TF851 Local and light railways|TF840 - TF851 Elevated railways and subways",42,
        "T - Technology.|TF1 - TF1620 Railroad engineering and operation|TF855 - TF1127 Electric railways",47,
        "T - Technology.|TG1 - TG470 Bridge engineering.",432,
        "T - Technology.|TH1 - TH9745 Building construction",2971,
        "T - Technology.|TH1 - TH9745 Building construction|TH1000 - TH1725 Systems of building construction.",278,
        "T - Technology.|TH1 - TH9745 Building construction|TH2025 - TH3000 Details in building design and construction (including walls, roofs)",148,
        "T - Technology.|TH1 - TH9745 Building construction|TH3301 - TH3411 Maintenance and repair",77,
        "T - Technology.|TH1 - TH9745 Building construction|TH4021 - TH4977 Buildings: Construction with reference to use (including public buildings, dwellings)",424,
        "T - Technology.|TH1 - TH9745 Building construction|TH5011 - TH5701 Construction by phase of work",70,
        "T - Technology.|TH1 - TH9745 Building construction|TH6014 - TH6081 Environmental engineering of buildings. Sanitary engineering of buildings",77,
        "T - Technology.|TH1 - TH9745 Building construction|TH6101 - TH6887 Plumbing and pipefitting",67,
        "T - Technology.|TH1 - TH9745 Building construction|TH7005 - TH7699 Heating and ventilation. Air conditioning",309,
        "T - Technology.|TH1 - TH9745 Building construction|TH7700 - TH7975 Illumination. Lighting",55,
        "T - Technology.|TH1 - TH9745 Building construction|TH8001 - TH8581 Decoration and decorative furnishings",4,
        "T - Technology.|TH1 - TH9745 Building construction|TH845 - TH895 Architectural engineering. Structural engineering of buildings",181,
        "T - Technology.|TH1 - TH9745 Building construction|TH900 - TH915 Construction equipment in buildings",12,
        "T - Technology.|TH1 - TH9745 Building construction|TH9025 - TH9745 Protection of fuildings (including protection from dampness, fire, burglary)",504,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery",7879,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ1040 - TJ1119 Machinery exclusive of prime movers",213,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ1125 - TJ1345 Machine shops and machine shops practice",313,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ1350 - TJ1418 Hoisting and conveying machinery",27,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ1425 - TJ1475 Lifting and pressing machinery",4,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ1480 - TJ1496 Agricultural machinery. Farm machinery",5,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ1501 - TJ1519 Sewing machines",6,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ163.12 - TJ163.25 Power resources",740,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ163.26 - TJ163.5 Energy conservation",237,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ170 - TJ179 Mechanics applied to machinery. Dynamics",76,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ181 - TJ210 Mechanical movements",56,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ210.2 - TJ211.47 Mechanical devices and figures. Automata. Ingenious mechanisms. Robots (General)",1201,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ212 - TJ225 Control engineering systems. Automatic machinery (General)",1296,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ227 - TJ240 Machine design and drawing",44,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ241 - TJ254.7 Machine construction (General)",66,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ255 - TJ265 Heat engines",197,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ266 - TJ267.5 Turbines. Turbomachines (General)",29,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ268 - TJ740 Steam engineering",239,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ268 - TJ740 Steam engineering|TJ603 - TJ695 Locomotives",74,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ751 - TJ805 Miscellaneous motors and engines (including gas, gasoline, diesel engines)",144,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ807 - TJ830 Renewable energy sources",1179,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ836 - TJ927 Hydraulic machinery",172,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ940 - TJ940.5 Vacuum technology",54,
        "T - Technology.|TJ1 - TJ1570 Mechanical engineering and machinery|TJ950 - TJ1030 Pneumatic machinery",26,
        "T - Technology.|TK1 - TK9971 Electrical engineering. Electronics. Nuclear engineering.",31738,
        "T - Technology.|TK1 - TK9971 Electrical engineering. Electronics. Nuclear engineering.|TK1001 - TK1841 Production of electric energy or power. Powerplants. Central stations",1419,
        "T - Technology.|TK1 - TK9971 Electrical engineering. Electronics. Nuclear engineering.|TK2000 - TK2891 Dynamoelectric machinery and auxiliaries (including generators, transformers, motors)",251,
        "T - Technology.|TK1 - TK9971 Electrical engineering. Electronics. Nuclear engineering.|TK2896 - TK2985 Production of electricity by direct electricity conversion",653,
        "T - Technology.|TK1 - TK9971 Electrical engineering. Electronics. Nuclear engineering.|TK3001 - TK3521 Distribution or transmission of electric power",618,
        "T - Technology.|TK1 - TK9971 Electrical engineering. Electronics. Nuclear engineering.|TK301 - TK399 Electric meters",18,
        "T - Technology.|TK1 - TK9971 Electrical engineering. Electronics. Nuclear engineering.|TK4001 - TK4102 Applications of electric power",127,
        "T - Technology.|TK1 - TK9971 Electrical engineering. Electronics. Nuclear engineering.|TK4125 - TK4399 Electric lighting",70,
        "T - Technology.|TK1 - TK9971 Electrical engineering. Electronics. Nuclear engineering.|TK452 - TK454.4 Electric apparatus and materials. Electric circuits. Electric networks",111,
        "T - Technology.|TK1 - TK9971 Electrical engineering. Electronics. Nuclear engineering.|TK4601 - TK4661 Electric heating",24,
        "T - Technology.|TK1 - TK9971 Electrical engineering. Electronics. Nuclear engineering.|TK5101 - TK6720 Telecommunication (including telegraphy, telephone, radio, radar, television)",15246,
        "T - Technology.|TK1 - TK9971 Electrical engineering. Electronics. Nuclear engineering.|TK7800 - TK8360 Electronics",10960,
        "T - Technology.|TK1 - TK9971 Electrical engineering. Electronics. Nuclear engineering.|TK7800 - TK8360 Electronics|TK7885 - TK7895 Computer engineering. Computer hardware",868,
        "T - Technology.|TK1 - TK9971 Electrical engineering. Electronics. Nuclear engineering.|TK7800 - TK8360 Electronics|TK8300 - TK8360 Photoelectronic devices (General)",410,
        "T - Technology.|TK1 - TK9971 Electrical engineering. Electronics. Nuclear engineering.|TK9001 - TK9401 Nuclear engineering. Atomic power",1190,
        "T - Technology.|TK1 - TK9971 Electrical engineering. Electronics. Nuclear engineering.|TK9900 - TK9971 Electricity for amateurs. Amateur constructors' manuals",54,
        "T - Technology.|TL1 - TL4050 Motor vehicles. Aeronautics. Astronautics",9066,
        "T - Technology.|TL1 - TL4050 Motor vehicles. Aeronautics. Astronautics|TL1 - TL484 Motor vehicles. Cycles",2260,
        "T - Technology.|TL1 - TL4050 Motor vehicles. Aeronautics. Astronautics|TL500 - TL777 Aeronautics. Aeronautical engineering",4156,
        "T - Technology.|TL1 - TL4050 Motor vehicles. Aeronautics. Astronautics|TL780 - TL785.8 Rocket propulsion. Rockets",217,
        "T - Technology.|TL1 - TL4050 Motor vehicles. Aeronautics. Astronautics|TL787 - TL4050 Astronautics. Space travel",2426,
        "T - Technology.|TN1 - TN997 Mining engineering. Metallurgy.",8797,
        "T - Technology.|TN1 - TN997 Mining engineering. Metallurgy.|TN400 - TN580 Ore deposits and mining of particular metals",722,
        "T - Technology.|TN1 - TN997 Mining engineering. Metallurgy.|TN600 - TN799 Metallurgy",821,
        "T - Technology.|TN1 - TN997 Mining engineering. Metallurgy.|TN799.5 - TN948 Nonmetallic minerals",2608,
        "T - Technology.|TN1 - TN997 Mining engineering. Metallurgy.|TN950 - TN997 Building and ornamental stones",133,
        "T - Technology.|TP1 - TP1185 Chemical technology.",9723,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP1080 - TP1185 Polymers and polymer manufacture",462,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP155 - TP156 Chemical engineering",496,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP200 - TP248 Manufacture and use of chemicals",394,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP248.13 - TP248.65 Biotechnology",1185,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP250 - TP261 Industrial electrochemistry",36,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP267.5 - TP301 Explosives and pyrotechnics",118,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP315 - TP360 Fuel",865,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP368 - TP456 Food processing and manufacture",989,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP480 - TP498 Low temperature engineering. Cyrogenic engineering. Refrigeration",121,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP500 - TP660 Fermentation industries. Beverages. Alcohol",804,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP670 - TP699 Oils, fats, and waxes",323,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP670 - TP699 Oils, fats, and waxes|TP690 - TP692.5 Petroleum refining. Petroleum products",198,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP700 - TP746 Illuminating industries (Nonelectric)",39,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP751 - TP762 Gas industry",89,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP785 - TP869 Clay industries. Ceramics. Glass",645,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP875 - TP888 Cement industries",41,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP890 - TP933 Textile bleaching, dyeing, printing, etc.",146,
        "T - Technology.|TP1 - TP1185 Chemical technology.|TP934 - TP945 Paints, pigments, varnishes, etc.",74,
        "T - Technology.|TR1 - TR1050 Photography",13344,
        "T - Technology.|TR1 - TR1050 Photography|TR250 - TR265 Cameras",46,
        "T - Technology.|TR1 - TR1050 Photography|TR287 - TR500 Photographic Processing",166,
        "T - Technology.|TR1 - TR1050 Photography|TR504 - TR508 Transparencies, Diapositives",23,
        "T - Technology.|TR1 - TR1050 Photography|TR510 - TR545 Color Photography",48,
        "T - Technology.|TR1 - TR1050 Photography|TR550 - TR581 Studio and Laboratory",40,
        "T - Technology.|TR1 - TR1050 Photography|TR590 - TR620 Lighting",96,
        "T - Technology.|TR1 - TR1050 Photography|TR624 - TR835 Applied photography (Including artistic, commercial, medical photography, photocopying processes)",8869,
        "T - Technology.|TR1 - TR1050 Photography|TR845 - TR899 Cinematography. Motion pictures",1136,
        "T - Technology.|TR1 - TR1050 Photography|TR925 - TR1050 Photomechanical processes",132,
        "T - Technology.|TS1 - TS2301 Manufactures",7305,
        "T - Technology.|TS1 - TS2301 Manufactures|TS1060 - TS1070 Furs",1,
        "T - Technology.|TS1 - TS2301 Manufactures|TS1080 - TS1268 Paper manufacture and trade",500,
        "T - Technology.|TS1 - TS2301 Manufactures|TS1300 - TS1865 Textile industries",684,
        "T - Technology.|TS1 - TS2301 Manufactures|TS155 - TS194 Production management. Operations management",3834,
        "T - Technology.|TS1 - TS2301 Manufactures|TS1870 - TS1935 Rubber industry",107,
        "T - Technology.|TS1 - TS2301 Manufactures|TS195 - TS198.8 Packaging",76,
        "T - Technology.|TS1 - TS2301 Manufactures|TS1950 - TS1982 Animal products",121,
        "T - Technology.|TS1 - TS2301 Manufactures|TS200 - TS770 Metal manufactures. Metalworking",1184,
        "T - Technology.|TS1 - TS2301 Manufactures|TS2120 - TS2159 Cereals and grain. Milling industry",34,
        "T - Technology.|TS1 - TS2301 Manufactures|TS2220 - TS2283 Tobacco industry",46,
        "T - Technology.|TS1 - TS2301 Manufactures|TS2284 - TS2288 Animal feeds and feed mills. Pet food industry",1,
        "T - Technology.|TS1 - TS2301 Manufactures|TS800 - TS937 Wood technology. Lumber",403,
        "T - Technology.|TS1 - TS2301 Manufactures|TS800 - TS937 Wood technology. Lumber|TS840 - TS915 Wood products. Furniture",158,
        "T - Technology.|TS1 - TS2301 Manufactures|TS800 - TS937 Wood technology. Lumber|TS920 - TS937 Chemical processing of wood",44,
        "T - Technology.|TS1 - TS2301 Manufactures|TS940 - TS1047 Leather industries. Tanning",77,
        "T - Technology.|TT1 - TT999 Handicrafts. Arts and crafts",2655,
        "T - Technology.|TT1 - TT999 Handicrafts. Arts and crafts|TT161 - TT170.7 Manual training. School shops",22,
        "T - Technology.|TT1 - TT999 Handicrafts. Arts and crafts|TT174 - TT176 Articles for children",40,
        "T - Technology.|TT1 - TT999 Handicrafts. Arts and crafts|TT180 - TT200 Woodworking. Furniture making. Upholstering",125,
        "T - Technology.|TT1 - TT999 Handicrafts. Arts and crafts|TT201 - TT203 Lathework. Turning",3,
        "T - Technology.|TT1 - TT999 Handicrafts. Arts and crafts|TT205 - TT267 Metalworking",68,
        "T - Technology.|TT1 - TT999 Handicrafts. Arts and crafts|TT300 - TT382.8 Painting. Wood finishing",39,
        "T - Technology.|TT1 - TT999 Handicrafts. Arts and crafts|TT341 - TT641 Nutrition. Foods and food supply",795,
        "T - Technology.|TT1 - TT999 Handicrafts. Arts and crafts|TT490 - TT695 Clothing manufacture. Dressmaking. Tailoring",72,
        "T - Technology.|TT1 - TT999 Handicrafts. Arts and crafts|TT697 - TT927 Home arts. Homecrafts (including sewing, embroidery, decorative crafts)",942,
        "T - Technology.|TT1 - TT999 Handicrafts. Arts and crafts|TT950 - TT979 Hairdressing. Beauty culture. Barbers' work",68,
        "T - Technology.|TT1 - TT999 Handicrafts. Arts and crafts|TT980 - TT999 Laundry work",6,
        "T - Technology.|TX1 - TX1110 Home economics.",9619,
        "T - Technology.|TX1 - TX1110 Home economics.|TX1100 - TX1105 Mobile home living",2,
        "T - Technology.|TX1 - TX1110 Home economics.|TX642 - TX840 Cookery",4223,
        "T - Technology.|TX1 - TX1110 Home economics.|TX851 - TX885 Dining-room service",7,
        "T - Technology.|TX1 - TX1110 Home economics.|TX901 - TX946.5 Hospitality industry. Hotels, clubs, restaurants, food service, etc.",908,
        "T - Technology.|TX1 - TX1110 Home economics.|TX950 - TX953 Taverns, barrooms, saloons",107,
        "T - Technology.|TX1 - TX1110 Home economics.|TX955 - TX985 Building operations and housekeeping",22,
        "U - Military science (General)",32276,
        "U - Military science (General)|U1 - U900 Military science (General)",8955,
        "U - Military science (General)|U1 - U900 Military science (General)|U150 - U155 Military planning",126,
        "U - Military science (General)|U1 - U900 Military science (General)|U161 - U163 Strategy",750,
        "U - Military science (General)|U1 - U900 Military science (General)|U164 - U167.5 Tactics",78,
        "U - Military science (General)|U1 - U900 Military science (General)|U21 - U22.3 War. Philosophy. Military sociology",1165,
        "U - Military science (General)|U1 - U900 Military science (General)|U250 - U255 Maneuvers (combined arms)",20,
        "U - Military science (General)|U1 - U900 Military science (General)|U263 - U264.5 Atomic warfare. Atomic weapons",602,
        "U - Military science (General)|U1 - U900 Military science (General)|U27 - U43 History of military science",798,
        "U - Military science (General)|U1 - U900 Military science (General)|U300 - U305 Artillery and rifle ranges",1,
        "U - Military science (General)|U1 - U900 Military science (General)|U310 - U310.2 War games",98,
        "U - Military science (General)|U1 - U900 Military science (General)|U320 - U325 Physical training of soldiers",10,
        "U - Military science (General)|U1 - U900 Military science (General)|U400 - U714 Military education and training",930,
        "U - Military science (General)|U1 - U900 Military science (General)|U56 - U59 Army clubs",6,
        "U - Military science (General)|U1 - U900 Military science (General)|U750 - U773 Military life, manners and customs, antiquities, etc.",163,
        "U - Military science (General)|U1 - U900 Military science (General)|U799 - U897 History of arms and armor",402,
        "U - Military science (General)|UA10 - UA997 Armies: Organization, distribution, military situation",10643,
        "U - Military science (General)|UA10 - UA997 Armies: Organization, distribution, military situation|UA21 - UA885 By region or country",9149,
        "U - Military science (General)|UA10 - UA997 Armies: Organization, distribution, military situation|UA910 - UA915 Mobilization",12,
        "U - Military science (General)|UA10 - UA997 Armies: Organization, distribution, military situation|UA920 - UA925 Plans for attack and defense",2,
        "U - Military science (General)|UA10 - UA997 Armies: Organization, distribution, military situation|UA926 - UA929 Civil defense",173,
        "U - Military science (General)|UA10 - UA997 Armies: Organization, distribution, military situation|UA929.5 - UA929.95 War damage in industry. Industrial defense",6,
        "U - Military science (General)|UA10 - UA997 Armies: Organization, distribution, military situation|UA940 - UA945 Military communication",72,
        "U - Military science (General)|UA10 - UA997 Armies: Organization, distribution, military situation|UA985 - UA997 Military geography",62,
        "U - Military science (General)|UB1 - UB900 Military administration",4068,
        "U - Military science (General)|UB1 - UB900 Military administration|UB160 - UB165 Records, returns, muster rolls, etc.",18,
        "U - Military science (General)|UB1 - UB900 Military administration|UB170 - UB175 Adjutant generals' offices",2,
        "U - Military science (General)|UB1 - UB900 Military administration|UB180 - UB197 Civilian personnel departments",49,
        "U - Military science (General)|UB1 - UB900 Military administration|UB250 - UB271 Intelligence",540,
        "U - Military science (General)|UB1 - UB900 Military administration|UB273 - UB274 Sabotage",1,
        "U - Military science (General)|UB1 - UB900 Military administration|UB275 - UB277 Psychological warfare. Propaganda",34,
        "U - Military science (General)|UB1 - UB900 Military administration|UB320 - UB338 Enlistment, recruiting, etc.",426,
        "U - Military science (General)|UB1 - UB900 Military administration|UB340 - UB345 Compulsory service. Conscription and exemption",212,
        "U - Military science (General)|UB1 - UB900 Military administration|UB356 - UB369.5 Provision for veterans",482,
        "U - Military science (General)|UB1 - UB900 Military administration|UB370 - UB375 Military pensions, etc.",109,
        "U - Military science (General)|UB1 - UB900 Military administration|UB380 - UB385 Soldiers' and sailors' homes",12,
        "U - Military science (General)|UB1 - UB900 Military administration|UB407 - UB409 Warrant officers. Noncommissioned officers",16,
        "U - Military science (General)|UB1 - UB900 Military administration|UB410 - UB415 Officers",140,
        "U - Military science (General)|UB1 - UB900 Military administration|UB416 - UB419 Minorities, women, etc. in armed forces",346,
        "U - Military science (General)|UB1 - UB900 Military administration|UB440 - UB449.5 Retired military personnel",18,
        "U - Military science (General)|UC10 - UC780 Maintenance and transportation",1081,
        "U - Military science (General)|UC10 - UC780 Maintenance and transportation|UC20 - UC258 Organization of the service. By region or country",126,
        "U - Military science (General)|UC10 - UC780 Maintenance and transportation|UC260 - UC267 Supplies and stores",462,
        "U - Military science (General)|UC10 - UC780 Maintenance and transportation|UC270 - UC360 Transportation",126,
        "U - Military science (General)|UC10 - UC780 Maintenance and transportation|UC400 - UC440 Barracks. Quarters. Camps",35,
        "U - Military science (General)|UC10 - UC780 Maintenance and transportation|UC460 - UC535 Clothing and equipment",195,
        "U - Military science (General)|UC10 - UC780 Maintenance and transportation|UC600 - UC695 Horses. Mules. Remount service",6,
        "U - Military science (General)|UC10 - UC780 Maintenance and transportation|UC700 - UC780 Subsistence",26,
        "U - Military science (General)|UD1 - UD495 Infantry",236,
        "U - Military science (General)|UD1 - UD495 Infantry|UD157 - UD302 Tactics. Maneuvers. Drill regulations",56,
        "U - Military science (General)|UD1 - UD495 Infantry|UD330 - UD335 Firing. Military sharpshooting",19,
        "U - Military science (General)|UD1 - UD495 Infantry|UD380 - UD425 Small arms. Swords, etc.",82,
        "U - Military science (General)|UD1 - UD495 Infantry|UD460 - UD464 Mountain troops",2,
        "U - Military science (General)|UD1 - UD495 Infantry|UD470 - UD475 Ski troops",2,
        "U - Military science (General)|UD1 - UD495 Infantry|UD480 - UD485 Airborne troops. Parachute troops",23,
        "U - Military science (General)|UD1 - UD495 Infantry|UD490 - UD495 Airmobile operations",4,
        "U - Military science (General)|UE1 - UE500 Cavalry. Armor. Including horse cavalry, armored cavalry, mechanized cavalry",114,
        "U - Military science (General)|UE1 - UE500 Cavalry. Armor. Including horse cavalry, armored cavalry, mechanized cavalry|UE144 - UE145 Horse cavalry",4,
        "U - Military science (General)|UE1 - UE500 Cavalry. Armor. Including horse cavalry, armored cavalry, mechanized cavalry|UE157 - UE302 Tactics. Maneuvers. Drill regulations",26,
        "U - Military science (General)|UE1 - UE500 Cavalry. Armor. Including horse cavalry, armored cavalry, mechanized cavalry|UE460 - UE475 Horses",9,
        "U - Military science (General)|UF1 - UF910 Artillery",743,
        "U - Military science (General)|UF1 - UF910 Artillery|UF157 - UF302 Tactics. Maneuvers. Drill regulations",18,
        "U - Military science (General)|UF1 - UF910 Artillery|UF400 - UF405 Field artillery",18,
        "U - Military science (General)|UF1 - UF910 Artillery|UF450 - UF455 Seacoast artillery",1,
        "U - Military science (General)|UF1 - UF910 Artillery|UF460 - UF465 Siege artillery",2,
        "U - Military science (General)|UF1 - UF910 Artillery|UF470 - UF475 Howitzer artillery. Mortar batteries",2,
        "U - Military science (General)|UF1 - UF910 Artillery|UF500 - UF515 Weapons systems",167,
        "U - Military science (General)|UF1 - UF910 Artillery|UF520 - UF537 Ordnance and small arms",150,
        "U - Military science (General)|UF1 - UF910 Artillery|UF540 - UF545 Arsenals, magazines, armories, etc.",20,
        "U - Military science (General)|UF1 - UF910 Artillery|UF560 - UF780 Ordnance material (Ordnance proper)",203,
        "U - Military science (General)|UF1 - UF910 Artillery|UF820 - UF830 Ballistics. Velocities and motions of projectiles",20,
        "U - Military science (General)|UF1 - UF910 Artillery|UF848 - UF856 Artillery instruments. Fire control, etc.",5,
        "U - Military science (General)|UG1 - UG620 Military engineering",1558,
        "U - Military science (General)|UG1 - UG620 Military engineering|UG160 - UG302 Tactics and regulations",3,
        "U - Military science (General)|UG1 - UG620 Military engineering|UG360 - UG390 Field engineering",7,
        "U - Military science (General)|UG1 - UG620 Military engineering|UG400 - UG442 Fortification",316,
        "U - Military science (General)|UG1 - UG620 Military engineering|UG443 - UG449 Attack and defense. Siege warfare",626,
        "U - Military science (General)|UG1 - UG620 Military engineering|UG470 - UG474 Military surveying, topography, and mapping",36,
        "U - Military science (General)|UG1 - UG620 Military engineering|UG500 - UG565 Technical troops and other special corps",6,
        "U - Military science (General)|UG1 - UG620 Military engineering|UG570 - UG582 Military signaling",10,
        "U - Military science (General)|UG1 - UG620 Military engineering|UG590 - UG613.5 Military telegraphy and telephony",44,
        "U - Military science (General)|UG1 - UG620 Military engineering|UG615 - UG620 Military motor vehicles",37,
        "U - Military science (General)|UG1500 - UG1530 Military astronautics. Space warfare. Space surveillance",160,
        "U - Military science (General)|UG1500 - UG1530 Military astronautics. Space warfare. Space surveillance|UG1523 - UG1525 By region or country",83,
        "U - Military science (General)|UG622 - UG1435 Air forces. Air warfare",3229,
        "U - Military science (General)|UG622 - UG1435 Air forces. Air warfare|UG1100 - UG1435 Equipment and supplies",1060,
        "U - Military science (General)|UG622 - UG1435 Air forces. Air warfare|UG633 - UG635 By region or country",615,
        "U - Military science (General)|UG622 - UG1435 Air forces. Air warfare|UG637 - UG639 Education and training",83,
        "U - Military science (General)|UG622 - UG1435 Air forces. Air warfare|UG640 - UG645 Military aeronautical research",40,
        "U - Military science (General)|UG622 - UG1435 Air forces. Air warfare|UG700 - UG705 Tactics",90,
        "U - Military science (General)|UG622 - UG1435 Air forces. Air warfare|UG730 - UG735 Air defenses",40,
        "U - Military science (General)|UG622 - UG1435 Air forces. Air warfare|UG760 - UG765 Aerial reconnaissance",49,
        "U - Military science (General)|UG622 - UG1435 Air forces. Air warfare|UG770 - UG1045 Organization. Personnel management",161,
        "U - Military science (General)|UH20 - UH910 Other services",784,
        "U - Military science (General)|UH20 - UH910 Other services|UH20 - UH25 Chaplains",35,
        "U - Military science (General)|UH20 - UH910 Other services|UH201 - UH515 Medical and sanitary services",403,
        "U - Military science (General)|UH20 - UH910 Other services|UH520 - UH551 Care of sick and wounded. Relief societies",35,
        "U - Military science (General)|UH20 - UH910 Other services|UH600 - UH629.5 Military hygiene and sanitation",90,
        "U - Military science (General)|UH20 - UH910 Other services|UH700 - UH705 Public relations. Press. War correspondents",5,
        "U - Military science (General)|UH20 - UH910 Other services|UH750 - UH769 Military social work. Social welfare services",18,
        "U - Military science (General)|UH20 - UH910 Other services|UH800 - UH910 Recreation and information services",8,
        "V - Naval science",6186,
        "V - Naval science|V1 - V995 Naval science (General)",1608,
        "V - Naval science|V1 - V995 Naval science (General)|V160 - V165 Strategy",48,
        "V - Naval science|V1 - V995 Naval science (General)|V167 - V178 Tactics",18,
        "V - Naval science|V1 - V995 Naval science (General)|V210 - V214.5 Submarine warfare",50,
        "V - Naval science|V1 - V995 Naval science (General)|V25 - V55 History and antiquities of naval science",168,
        "V - Naval science|V1 - V995 Naval science (General)|V390 - V395 Naval research",40,
        "V - Naval science|V1 - V995 Naval science (General)|V396 - V396.5 Military oceanography",6,
        "V - Naval science|V1 - V995 Naval science (General)|V400 - V695 Naval education",106,
        "V - Naval science|V1 - V995 Naval science (General)|V66 - V69 Navy clubs",1,
        "V - Naval science|V1 - V995 Naval science (General)|V720 - V743 Naval life, manners and customs, antiquities, etc.",25,
        "V - Naval science|V1 - V995 Naval science (General)|V750 - V995 War vessels: Construction, armament, etc.",485,
        "V - Naval science|VA10 - VA750 Navies: Organization, distribution, naval situation",1272,
        "V - Naval science|VA10 - VA750 Navies: Organization, distribution, naval situation|VA400 - VA750 Other regions or countries",765,
        "V - Naval science|VA10 - VA750 Navies: Organization, distribution, naval situation|VA49 - VA395 United States",453,
        "V - Naval science|VB15 - VB345 Naval administration",224,
        "V - Naval science|VB15 - VB345 Naval administration|VB170 - VB187 Civil department",6,
        "V - Naval science|VB15 - VB345 Naval administration|VB21 - VB124 By region or country",30,
        "V - Naval science|VB15 - VB345 Naval administration|VB260 - VB275 Enlisted personnel",11,
        "V - Naval science|VB15 - VB345 Naval administration|VB307 - VB309 Warrant officers",1,
        "V - Naval science|VB15 - VB345 Naval administration|VB310 - VB315 Officers",26,
        "V - Naval science|VB15 - VB345 Naval administration|VB320 - VB325 Minorities, women, etc. in navies",25,
        "V - Naval science|VC10 - VC580 Naval maintenance",83,
        "V - Naval science|VC10 - VC580 Naval maintenance|VC20 - VC258 Organization of service",4,
        "V - Naval science|VC10 - VC580 Naval maintenance|VC260 - VC268 Supplies and stores",42,
        "V - Naval science|VC10 - VC580 Naval maintenance|VC270 - VC279 Equipment of vessels, supplies, allowances, etc.",5,
        "V - Naval science|VC10 - VC580 Naval maintenance|VC280 - VC345 Clothing and equipment",6,
        "V - Naval science|VC10 - VC580 Naval maintenance|VC350 - VC410 Subsistence. Provisioning",8,
        "V - Naval science|VC10 - VC580 Naval maintenance|VC412 - VC425 Navy yards and stations. Shore facilities",2,
        "V - Naval science|VD7 - VD430 Naval seamen",8,
        "V - Naval science|VD7 - VD430 Naval seamen|VD160 - VD302 Drill regulations",1,
        "V - Naval science|VD7 - VD430 Naval seamen|VD21 - VD124 By region or country",5,
        "V - Naval science|VD7 - VD430 Naval seamen|VD360 - VD390 Small arms",2,
        "V - Naval science|VE7 - VE500 Marines",240,
        "V - Naval science|VE7 - VE500 Marines|VE160 - VE302 Drill regulations",1,
        "V - Naval science|VE7 - VE500 Marines|VE23 - VE124 By region or country",193,
        "V - Naval science|VE7 - VE500 Marines|VE430 - VE435 Training camps",6,
        "V - Naval science|VF1 - VF580 Naval ordnance",55,
        "V - Naval science|VF1 - VF580 Naval ordnance|VF160 - VF302 Ordnance instructions and drill books",4,
        "V - Naval science|VF1 - VF580 Naval ordnance|VF21 - VF124 Naval ordnance",9,
        "V - Naval science|VF1 - VF580 Naval ordnance|VF346 - VF348 Naval weapons systems",17,
        "V - Naval science|VF1 - VF580 Naval ordnance|VF350 - VF375 Ordnance and arms (General)",6,
        "V - Naval science|VF1 - VF580 Naval ordnance|VF390 - VF510 Ordnance material (Ordnance proper)",2,
        "V - Naval science|VG20 - VG2029 Minor services of navies",269,
        "V - Naval science|VG20 - VG2029 Minor services of navies|VG100 - VG475 Medical service",34,
        "V - Naval science|VG20 - VG2029 Minor services of navies|VG20 - VG25 Chaplains",1,
        "V - Naval science|VG20 - VG2029 Minor services of navies|VG50 - VG55 Coast guard and coast signal service",39,
        "V - Naval science|VG20 - VG2029 Minor services of navies|VG500 - VG505 Public relations. Press. War correspondents",3,
        "V - Naval science|VG20 - VG2029 Minor services of navies|VG70 - VG85 Naval communication by telegraphy, telephone, etc.",7,
        "V - Naval science|VG20 - VG2029 Minor services of navies|VG90 - VG95 Naval aviation",128,
        "V - Naval science|VK1 - VK1661 Navigation. Merchant marine",1139,
        "V - Naval science|VK1 - VK1661 Navigation. Merchant marine|VK1000 - VK1249 Lighthouse service",142,
        "V - Naval science|VK1 - VK1661 Navigation. Merchant marine|VK1250 - VK1299 Shipwrecks and fires",77,
        "V - Naval science|VK1 - VK1661 Navigation. Merchant marine|VK1300 - VK1491 Saving of life and property",34,
        "V - Naval science|VK1 - VK1661 Navigation. Merchant marine|VK15 - VK124 History, conditions, etc.",254,
        "V - Naval science|VK1 - VK1661 Navigation. Merchant marine|VK1500 - VK1661 Pilots and pilotage",7,
        "V - Naval science|VK1 - VK1661 Navigation. Merchant marine|VK321 - VK369.8 Harbors. Ports",19,
        "V - Naval science|VK1 - VK1661 Navigation. Merchant marine|VK381 - VK397 Signaling",11,
        "V - Naval science|VK1 - VK1661 Navigation. Merchant marine|VK401 - VK529 Study and teaching",20,
        "V - Naval science|VK1 - VK1661 Navigation. Merchant marine|VK549 - VK572 Science of navigation",134,
        "V - Naval science|VK1 - VK1661 Navigation. Merchant marine|VK573 - VK587 Nautical instruments",12,
        "V - Naval science|VK1 - VK1661 Navigation. Merchant marine|VK588 - VK597 Marine hydrography. Hydrographic surveying",16,
        "V - Naval science|VK1 - VK1661 Navigation. Merchant marine|VK600 - VK794 Tide and current tables",36,
        "V - Naval science|VK1 - VK1661 Navigation. Merchant marine|VK798 - VK997 Sailing directions. Pilot guides",113,
        "V - Naval science|VM1 - VM989 Naval architecture. Shipbuilding. Marine engineering",1121,
        "V - Naval science|VM1 - VM989 Naval architecture. Shipbuilding. Marine engineering|VM15 - VM124 History",221,
        "V - Naval science|VM1 - VM989 Naval architecture. Shipbuilding. Marine engineering|VM165 - VM276 Study and teaching",2,
        "V - Naval science|VM1 - VM989 Naval architecture. Shipbuilding. Marine engineering|VM295 - VM296 Contracts and specifications",1,
        "V - Naval science|VM1 - VM989 Naval architecture. Shipbuilding. Marine engineering|VM298.5 - VM301 Shipbuilding industry. Shipyards",88,
        "V - Naval science|VM1 - VM989 Naval architecture. Shipbuilding. Marine engineering|VM311 - VM466 Special types of vessels",293,
        "V - Naval science|VM1 - VM989 Naval architecture. Shipbuilding. Marine engineering|VM595 - VM989 Marine engineering",160,
        "W - Health Sciences",1040,
        "W - Health Sciences|W1 - W925 Health Professions",33,
        "W - Health Sciences|W1 - W925 Health Professions|W1 - W28 Reference Works. General Works",7,
        "W - Health Sciences|W1 - W925 Health Professions|W32 - W64 Law. Ethics. Professional-Patient Relations",23,
        "W - Health Sciences|W1 - W925 Health Professions|W601 - W925 Forensic Sciences",1,
        "W - Health Sciences|W1 - W925 Health Professions|W601 - W925 Forensic Sciences|W775 - W867 Medicolegal Examination",1,
        "W - Health Sciences|W1 - W925 Health Professions|W82 - W83.1 Biomedical Technology",1,
        "W - Health Sciences|WA1 - WA950 Public Health",1,
        "W - Health Sciences|WB1 - WB962 Practice of Medicine",3,
        "W - Health Sciences|WB1 - WB962 Practice of Medicine|WB300 - WB962 Therapeutics",3,
        "W - Health Sciences|WB1 - WB962 Practice of Medicine|WB300 - WB962 Therapeutics|WB460 - WB555 Physical and Occupational Therapy",1,
        "W - Health Sciences|WB1 - WB962 Practice of Medicine|WB300 - WB962 Therapeutics|WB700 - WB760 Medical Climatology",1,
        "W - Health Sciences|WB1 - WB962 Practice of Medicine|WB300 - WB962 Therapeutics|WB880 - WB962 Complementary and Alternative Therapies",1,
        "W - Health Sciences|WC1 - WC950 Communicable Diseases",1,
        "W - Health Sciences|WE1 - WE890 Musculoskeletal System",1,
        "W - Health Sciences|WE1 - WE890 Musculoskeletal System|WE500 - WE600 Muscles and Tendons",1,
        "W - Health Sciences|WH1 - WH700 Hemic and Lymphatic Systems",1,
        "W - Health Sciences|WH1 - WH700 Hemic and Lymphatic Systems|WH120 - WH540 Hematologic Diseases. Immunologic Factors. Blood Banks",1,
        "W - Health Sciences|WK1 - WK920 Endocrine System",1,
        "W - Health Sciences|WK1 - WK920 Endocrine System|WK800 - WK885 Islets of Langerhans",1,
        "W - Health Sciences|WL1 - WL710 Nervous System",4,
        "W - Health Sciences|WL1 - WL710 Nervous System|WL1 - WL102.9 Reference Works. General Works",2,
        "W - Health Sciences|WL1 - WL710 Nervous System|WL200 - WL405 Central Nervous System. Disorders. Therapeutics",1,
        "W - Health Sciences|WL1 - WL710 Nervous System|WL200 - WL405 Central Nervous System. Disorders. Therapeutics|WL200 - WL302 Central Nervous System (General)",1,
        "W - Health Sciences|WL1 - WL710 Nervous System|WL700 - WL710 Sense Organs",1,
        "W - Health Sciences|WM1 - WM611 Psychiatry",1,
        "W - Health Sciences|WM1 - WM611 Psychiatry|WM270 - WM290 Substance-Related Disorders",1,
        "W - Health Sciences|WO1 - WO950 Surgery",1,
        "W - Health Sciences|WO1 - WO950 Surgery|WO1 - WO102 Reference Works. General Works",1,
        "W - Health Sciences|WU1 - WU640 Dentistry. Oral Surgery",1,
        "W - Health Sciences|WU1 - WU640 Dentistry. Oral Surgery|WU210 - WU290 Dental Anatomy. Diseases",1,
        "W - Health Sciences|WW1 - WW722.1 Ophthalmology",1,
        "W - Health Sciences|WX1 - WX225 Hospitals and Other Health Facilities",2,
        "W - Health Sciences|WX1 - WX225 Hospitals and Other Health Facilities|WX1 - WX100 Reference Works. General Works",2,
        "W - Health Sciences|WY1 - WY300 Nursing",1,
        "W - Health Sciences|WY1 - WY300 Nursing|WY1 - WY49 Reference Works",1,
        "W - Health Sciences|WZ1 - WZ350 History of Medicine",4,
        "W - Health Sciences|WZ1 - WZ350 History of Medicine|WZ100 - WZ150 Biography",1,
        "Z - Bibliography. Library Science. Information resources (general)",154776,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography",51398,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z1001 - Z1121 General bibliography",6197,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z1001 - Z1121 General bibliography|Z1003 - Z1003.5 Choice of books. Books and reading. Book reviews",583,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z1001 - Z1121 General bibliography|Z1011 - Z1017 General bibliographies",188,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z1001 - Z1121 General bibliography|Z1019 - Z1033 Special classes of books. Including prohibited books, rare books, paperbacks, reprints",569,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z1001 - Z1121 General bibliography|Z1035 - Z1035.9 Best books",653,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z1001 - Z1121 General bibliography|Z1037 - Z1039 Books for special classes of persons, institutions, etc.",1327,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z1001 - Z1121 General bibliography|Z1041 - Z1121 Anonyms and pseudonyms",172,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z1201 - Z4980 National bibliography",13642,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z1201 - Z4980 National bibliography|Z1201 - Z1946 America",4844,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z1201 - Z4980 National bibliography|Z1201 - Z1946 America|Z1215 - Z1363 United States",2826,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z1201 - Z4980 National bibliography|Z1201 - Z1946 America|Z1365 - Z1401 Canada. British North America",235,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z1201 - Z4980 National bibliography|Z1201 - Z1946 America|Z1411 - Z1939 Latin America",1355,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z1201 - Z4980 National bibliography|Z2000 - Z2959 Europe",5614,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z1201 - Z4980 National bibliography|Z3001 - Z3496 Asia",2232,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z1201 - Z4980 National bibliography|Z3501 - Z3975 Africa",769,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z1201 - Z4980 National bibliography|Z4001 - Z4980 Australia. Oceania",172,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z5051 - Z7999 Subject bibliography. Subjects arranged in alphabetical sequence",25828,
        "Z - Bibliography. Library Science. Information resources (general)|Z1001 - Z8999 Bibliography|Z8001 - Z8999 Personal bibliography. Names of individuals arranged in alphabetical sequence",6153,
        "Z - Bibliography. Library Science. Information resources (general)|Z116 - Z659 Book industries and trade",11680,
        "Z - Bibliography. Library Science. Information resources (general)|Z116 - Z659 Book industries and trade|Z116 - Z265.5 Printing",5882,
        "Z - Bibliography. Library Science. Information resources (general)|Z116 - Z659 Book industries and trade|Z116 - Z265.5 Printing|Z124 - Z228 History",1481,
        "Z - Bibliography. Library Science. Information resources (general)|Z116 - Z659 Book industries and trade|Z116 - Z265.5 Printing|Z231 - Z232 Printers and printing establishments",130,
        "Z - Bibliography. Library Science. Information resources (general)|Z116 - Z659 Book industries and trade|Z116 - Z265.5 Printing|Z235 - Z236 Printer's marks, mottoes, etc.",19,
        "Z - Bibliography. Library Science. Information resources (general)|Z116 - Z659 Book industries and trade|Z116 - Z265.5 Printing|Z240 - Z241.5 Incunabula. Block books. Including broadsides, playing cards",472,
        "Z - Bibliography. Library Science. Information resources (general)|Z116 - Z659 Book industries and trade|Z116 - Z265.5 Printing|Z242.9 - Z264.5 Practical printing. Including printing as a business, layout, paper and ink, machinery, type and type founding, electrotyping, desktop publishing",1690,
        "Z - Bibliography. Library Science. Information resources (general)|Z116 - Z659 Book industries and trade|Z266 - Z276 Bookbinding. Book decoration",519,
        "Z - Bibliography. Library Science. Information resources (general)|Z116 - Z659 Book industries and trade|Z278 - Z549 Bookselling and publishing",4469,
        "Z - Bibliography. Library Science. Information resources (general)|Z116 - Z659 Book industries and trade|Z551 - Z656 Copyright",246,
        "Z - Bibliography. Library Science. Information resources (general)|Z116 - Z659 Book industries and trade|Z657 - Z659 Freedom of the press. Censorship",563,
        "Z - Bibliography. Library Science. Information resources (general)|Z4 - Z115.5 Books (General). Writing. Paleography",2371,
        "Z - Bibliography. Library Science. Information resources (general)|Z4 - Z115.5 Books (General). Writing. Paleography|Z105 - Z115.5 Manuscripts. Paleography",962,
        "Z - Bibliography. Library Science. Information resources (general)|Z4 - Z115.5 Books (General). Writing. Paleography|Z4 - Z8 History of books and bookmaking",360,
        "Z - Bibliography. Library Science. Information resources (general)|Z4 - Z115.5 Books (General). Writing. Paleography|Z40 - Z104.5 Writing",762,
        "Z - Bibliography. Library Science. Information resources (general)|Z4 - Z115.5 Books (General). Writing. Paleography|Z40 - Z104.5 Writing|Z102.5 - Z104.5 Cryptography. Ciphers. Invisible writing",122,
        "Z - Bibliography. Library Science. Information resources (general)|Z4 - Z115.5 Books (General). Writing. Paleography|Z40 - Z104.5 Writing|Z41 - Z42.5 Autographs. Signatures",105,
        "Z - Bibliography. Library Science. Information resources (general)|Z4 - Z115.5 Books (General). Writing. Paleography|Z40 - Z104.5 Writing|Z43 - Z45 Calligraphy. Penmanship",168,
        "Z - Bibliography. Library Science. Information resources (general)|Z4 - Z115.5 Books (General). Writing. Paleography|Z40 - Z104.5 Writing|Z49 - Z51 Typewriters. Typewriting. Keyboards. Keyboarding",42,
        "Z - Bibliography. Library Science. Information resources (general)|Z4 - Z115.5 Books (General). Writing. Paleography|Z40 - Z104.5 Writing|Z52 - Z52.5 Word processing",30,
        "Z - Bibliography. Library Science. Information resources (general)|Z4 - Z115.5 Books (General). Writing. Paleography|Z40 - Z104.5 Writing|Z53 - Z102 Shorthand. Stenography. Phonography",78,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries",87924,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z662 - Z664 Collections",54427,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science",23958,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z668 - Z669.7 Library education. Research",861,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z674.2 - Z674.5 Information services. Information centers",180,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z674.7 - Z674.83 Library information networks",357,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z678 - Z678.88 Library administration and organization. Constitution",878,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z679 - Z680 Library buildings. Library architecture. Including planning, space utilization, security, safety, lighting, etc.",473,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z680.3 - Z680.6 Library communication systems",75,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z681 - Z681.3 Reproduction of library materials. Storage media of library materials",27,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z681.5 - Z681.7 Trustees. Library boards, committees, etc.",53,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z682 - Z682.4 Personnel",671,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z683 - Z683.5 Finance. Insurance",236,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z684 - Z685 Supplies. Shelving. Bookstacks",22,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z687 - Z718.8 The collections. The books",10720,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z687 - Z718.8 The collections. The books|Z689 - Z689.8 Acquisition (selection, purchase, gifts, duplicates)",368,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z687 - Z718.8 The collections. The books|Z691 - Z692 Special classes of materials. Including manuscripts, maps, microforms, serials",17,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z687 - Z718.8 The collections. The books|Z693 - Z695.83 Cataloging",1888,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z687 - Z718.8 The collections. The books|Z695.9 - Z695.94 Indexing. Abstracting",286,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z687 - Z718.8 The collections. The books|Z696 - Z697 Classification and notation",859,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z687 - Z718.8 The collections. The books|Z699 - Z699.5 Machine methods of information and retrieval. Mechanized bibliographic control",1446,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z687 - Z718.8 The collections. The books|Z700.9 - Z701.5 Preservation, conservation and restoration of books, etc.",485,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z687 - Z718.8 The collections. The books|Z703.5 - Z703.6 Moving. Disposition of books on shelves, etc. Including discarding, weeding",27,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z687 - Z718.8 The collections. The books|Z711 - Z711.92 Reference work. Library service to special groups",1283,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z687 - Z718.8 The collections. The books|Z712 - Z714 Circulation. Loans. Charging systems",221,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z687 - Z718.8 The collections. The books|Z716 - Z716.1 Library extension. Library commissions. Traveling libraries",60,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z665 - Z718.8 Library science. Information science|Z687 - Z718.8 The collections. The books|Z716.2 - Z718.8 Libraries in relation to special topics. Including libraries and community, libraries and television, children's libraries, libraries and students",1342,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z719 - Z725 Libraries (General)",747,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z729 - Z871 Library reports. History. Statistics",5805,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z881 - Z980 Library catalogs and bulletins",1439,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z987 - Z997 Private libraries. Book collecting. Including bibliophilism, bookplates",764,
        "Z - Bibliography. Library Science. Information resources (general)|Z662 - Z1000.5 Libraries|Z998 - Z1000.5 Booksellers' catalogs. Book prices",302,
        "Z - Bibliography. Library Science. Information resources (general)|ZA3040 - ZA5185 Information resources (General)",1343,
        "Z - Bibliography. Library Science. Information resources (general)|ZA3040 - ZA5185 Information resources (General)|ZA3150 - ZA3159 Information services. Information centers",32,
        "Z - Bibliography. Library Science. Information resources (general)|ZA3040 - ZA5185 Information resources (General)|ZA3201 - ZA3250 Information superhighway",28,
        "Z - Bibliography. Library Science. Information resources (general)|ZA3040 - ZA5185 Information resources (General)|ZA4050 - ZA4750 Information in specific formats or media",794,
        "Z - Bibliography. Library Science. Information resources (general)|ZA3040 - ZA5185 Information resources (General)|ZA4050 - ZA4750 Information in specific formats or media|ZA4050 - ZA4460 Electronic information resources",751,
        "Z - Bibliography. Library Science. Information resources (general)|ZA3040 - ZA5185 Information resources (General)|ZA4050 - ZA4750 Information in specific formats or media|ZA4050 - ZA4460 Electronic information resources|ZA4150 - ZA4390 Computer network resources",382,
        "Z - Bibliography. Library Science. Information resources (general)|ZA3040 - ZA5185 Information resources (General)|ZA4050 - ZA4750 Information in specific formats or media|ZA4050 - ZA4460 Electronic information resources|ZA4450 - ZA4460 Databases",9,
        "Z - Bibliography. Library Science. Information resources (general)|ZA3040 - ZA5185 Information resources (General)|ZA5050 - ZA5185 Information from specific providers",36,
        "Z - Bibliography. Library Science. Information resources (general)|ZA3040 - ZA5185 Information resources (General)|ZA5050 - ZA5185 Information from specific providers|ZA5050 - ZA5185 Government information",36],
      "language_f":[
        "English",5814797,
        "French",334711,
        "German",325473,
        "Spanish",318540,
        "Russian",212448,
        "Chinese",124612,
        "Italian",121248,
        "Latin",90413,
        "Portuguese",46539,
        "Czech",28068,
        "Arabic",27196],
      "date_cataloged_dt":[
        "2004-10-01T04:00:00Z",3288090,
        "2022-02-22T05:00:00Z",96047,
        "2011-11-13T05:00:00Z",74819,
        "2022-04-28T04:00:00Z",68642,
        "2023-01-18T05:00:00Z",64620,
        "2017-11-01T04:00:00Z",53537,
        "2023-01-17T05:00:00Z",53291,
        "2002-01-01T05:00:00Z",48155,
        "2020-11-11T05:00:00Z",48022,
        "2023-11-13T05:00:00Z",39162,
        "2020-12-14T05:00:00Z",35859]},
    "facet_ranges":{},
    "facet_intervals":{},
    "facet_heatmaps":{}},
  "stats":{
    "stats_fields":{
      "publication_year_isort":{
        "min":500.0,
        "max":2028.0,
        "count":7852765,
        "missing":195287,
        "sum":1.5358828184E10,
        "sumOfSquares":3.0098771243822E13,
        "mean":1955.8497145909753,
        "stddev":86.83440756104171}}}}

    http_version:
  recorded_at: Tue, 20 Feb 2024 19:52:21 GMT
- request:
    method: get
    uri: https://query.discovery.trln.org/trlnbib/select?f.author_facet_f.facet.limit=11&f.available_f.facet.limit=11&f.date_cataloged_dt.facet.limit=11&f.language_f.facet.limit=11&f.lcc_callnum_classification_f.facet.limit=4501&f.lcc_callnum_classification_f.facet.sort=alpha&f.location_hierarchy_f.facet.limit=-1&f.location_hierarchy_f.facet.sort=count&f.physical_media_f.facet.limit=11&f.resource_type_f.facet.limit=11&f.subject_chronological_f.facet.limit=11&f.subject_genre_f.facet.limit=11&f.subject_geographic_f.facet.limit=11&f.subject_topical_f.facet.limit=11&facet=true&facet.field=subject_chronological_f&facet.query=date_cataloged_dt:%5BNOW-3MONTH/DAY%20TO%20NOW%5D&fq=institution_f:unc&q=how%20milton%20works%20stanley%20fish&rows=20&sort=score%20desc,%20publication_year_isort%20desc,%20title_sort_ssort_single%20asc&stats=true&stats.field=publication_year_isort&wt=json
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v2.9.0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Tue, 20 Feb 2024 19:52:25 GMT
      Content-Type:
      - application/json;charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Server:
      - nginx/1.24.0
      Content-Security-Policy:
      - default-src 'none'; base-uri 'none'; connect-src 'self'; form-action 'self';
        font-src 'self'; frame-ancestors 'none'; img-src 'self' data:; media-src 'self';
        style-src 'self' 'unsafe-inline'; script-src 'self'; worker-src 'self';
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      Vary:
      - Accept-Encoding, User-Agent
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        {
  "responseHeader":{
    "zkConnected":true,
    "status":0,
    "QTime":460,
    "params":{
      "f.lcc_callnum_classification_f.facet.limit":"4501",
      "facet.field":["access_type_f",
        "available_f",
        "{!ex=rollup}location_hierarchy_f",
        "resource_type_f",
        "physical_media_f",
        "subject_topical_f",
        "lcc_callnum_classification_f",
        "language_f",
        "{!ex=publication_year_isort_single}publication_year_isort",
        "author_facet_f",
        "subject_genre_f",
        "subject_geographic_f",
        "subject_chronological_f"],
      "f.available_f.facet.limit":"11",
      "f.date_cataloged_dt.facet.limit":"11",
      "f.location_hierarchy_f.facet.sort":"count",
      "f.subject_chronological_f.facet.limit":"11",
      "f.subject_genre_f.facet.limit":"11",
      "fq":"institution_f:unc",
      "sort":"score desc, publication_year_isort desc, title_sort_ssort_single asc",
      "rows":"20",
      "f.subject_geographic_f.facet.limit":"11",
      "facet.query":["date_cataloged_dt:[NOW-7DAY/DAY TO NOW]",
        "date_cataloged_dt:[NOW-1MONTH/DAY TO NOW]",
        "date_cataloged_dt:[NOW-3MONTH/DAY TO NOW]"],
      "q":"how milton works stanley fish",
      "f.language_f.facet.limit":"11",
      "f.location_hierarchy_f.facet.limit":"-1",
      "stats":"true",
      "f.physical_media_f.facet.limit":"11",
      "f.author_facet_f.facet.limit":"11",
      "f.resource_type_f.facet.limit":"11",
      "f.lcc_callnum_classification_f.facet.sort":"alpha",
      "f.subject_topical_f.facet.limit":"11",
      "facet":"true",
      "wt":"json",
      "stats.field":"publication_year_isort"}},
  "response":{"numFound":24,"start":0,"numFoundExact":true,"docs":[
      {
        "id":"UNCb3917352",
        "isbn_number_a":["0674004655"],
        "isbn_qualifying_info_a":[""],
        "items_a":["{\"item_id\":\"i5404336\",\"loc_b\":\"ddda\",\"loc_n\":\"ddda\",\"status\":\"Available\",\"call_no\":\"PR3588 .F57 2001\",\"cn_scheme\":\"LC\"}"],
        "author_suggest":["Fish, Stanley Eugene"],
        "names_a":["{\"name\":\"Fish, Stanley Eugene\",\"type\":\"creator\",\"id\":\"https://id.loc.gov/authorities/names/n50005269\"}"],
        "owner_a":["unc"],
        "misc_id_a":["LCCN: 00052977",
          "National Bibliography Number: GBA1-37913"],
        "barcodes_a":["00019397742"],
        "language_a":["English"],
        "local_id":"b3917352",
        "shelfkey":"lc:PR.3588.F57.2001",
        "available_a":["Available"],
        "publisher_a":["Belknap Press of Harvard University Press"],
        "rollup_id":"OCLC45356608",
        "title_suggest":["How Milton works"],
        "title_main":"How Milton works",
        "title_sort_ssort_single":"how milton works",
        "access_type_a":["At the Library"],
        "institution_a":["unc"],
        "oclc_number_old_a":["46810911",
          "823520367",
          "1022590285",
          "1164684224",
          "1170004032",
          "1175712232",
          "1175717759",
          "1175721105",
          "1176270146"],
        "oclc_number":"45356608",
        "creator_main_a":["Fish, Stanley Eugene"],
        "imprint_main_a":["{\"type\":\"imprint\",\"value\":\"Cambridge, Mass. : Belknap Press of Harvard University Press, 2001.\"}"],
        "note_general_a":["Includes bibliographical references (pages 575-604) and index."],
        "primary_isbn_a":["0674004655"],
        "primary_oclc_a":["45356608"],
        "resource_type_a":["Book"],
        "subject_genre_a":["Nonfiction"],
        "date_cataloged":"2004-10-01T04:00:00Z",
        "physical_media_a":["Print"],
        "subject_topical_a":["Milton, John, 1608-1674",
          "Criticism and interpretation"],
        "publication_year_sort":"2001",
        "reverse_shelfkey":"lc:A8}WURR}KUS}XZZY",
        "subject_headings_a":["Milton, John, 1608-1674 -- Criticism and interpretation"],
        "subject_suggest":["Milton, John, 1608-1674 -- Criticism and interpretation"],
        "lc_call_nos_normed_a":["PR.3588.F57.2001"],
        "location_hierarchy_a":["unc",
          "unc:uncdavy"],
        "publisher_location_a":["Cambridge, Mass."],
        "record_data_source_a":["ILSMARC"],
        "call_number_schemes_a":["LC"],
        "origin_place_search_a":["Cambridge, Mass.",
          "Massachusetts",
          "United States"],
        "physical_description_a":["vii, 616 pages ; 25 cm"],
        "lcc_callnum_classification_a":["P - Language and literature",
          "P - Language and literature|PR1 - PR9680 English literature",
          "P - Language and literature|PR1 - PR9680 English literature|PR3291 - PR3785 17th and 18th centuries (1640-1770)"],
        "statement_of_responsibility_a":["Stanley Fish."],
        "index_date":"2024-02-01T13:21:35Z"},
      {
        "id":"UNCb10097902",
        "url_a":["{\"href\":\"https://login.libproxy.lib.unc.edu/login?url=http://dx.doi.org/10.1017/CBO9780511758546\",\"type\":\"fulltext\",\"text\":\"Full text available via the UNC-Chapel Hill Libraries\"}"],
        "isbn_number_a":["0511758545",
          "9780511758546",
          "9781107003057",
          "1107003059",
          "9780521176248",
          "0521176247",
          "1139365762",
          "9781139365765",
          "1280663960",
          "9781280663963",
          "9786613640895",
          "6613640891",
          "1139378309",
          "9781139378307",
          "1139371452",
          "9781139371452",
          "1139379739",
          "9781139379731"],
        "isbn_qualifying_info_a":["",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          ""],
        "author_suggest":["Fish, Stanley Eugene"],
        "names_a":["{\"name\":\"Fish, Stanley Eugene\",\"type\":\"creator\"}"],
        "owner_a":["unc"],
        "language_a":["English"],
        "local_id":"b10097902",
        "note_toc_a":["Machine generated contents note: Introduction; Part I. Milton: 1. The Brenzel lectures; 2. To the pure all things are pure: law, faith and interpretation in the prose and poetry of John Milton; 3. 'There is nothing he cannot ask': Milton, liberalism, and terrorism; 4. Why Milton matters, or against historicism; 5. Milton in popular culture; 6. How the reviews work; 7. The New Milton criticism; Part II. Early Modern Literature: 8. Void of storie: the struggle for insincerity in Herbert's prose and poetry; 9. Authors-readers: Jonson's community of the same; 10. Marvell and the art of disappearance; 11. Masculine persuasive force: Donne and verbal power; 12. How Hobbes works; Index."],
        "shelfkey":"lc:PR.3588.F577.2012",
        "available_a":["Available"],
        "publisher_a":["Cambridge University Press"],
        "rollup_id":"OCLC801926476",
        "note_local_a":["Content provider: Cambridge University Press."],
        "title_suggest":["Versions of anti-humanism : Milton and others"],
        "title_main":"Versions of anti-humanism : Milton and others",
        "title_sort_ssort_single":"versions of anti humanism milton and others",
        "access_type_a":["Online"],
        "institution_a":["unc"],
        "oclc_number_old_a":["1259099605"],
        "oclc_number":"801926476",
        "creator_main_a":["Fish, Stanley Eugene"],
        "imprint_main_a":["{\"type\":\"imprint\",\"value\":\"New York ; Cambridge : Cambridge University Press, 2012.\"}"],
        "note_general_a":["Includes bibliographical references and index.",
          "English."],
        "note_summary_a":["\"Stanley Fish, one of the foremost critics of literature working today, has spent much of his career writing and thinking about Milton. This book brings together his finest published work with brand new material on Milton and on other authors and topics in early modern literature. In his analyses of Renaissance texts, he meditates on the interpretive problems that confront readers and offers a sustained critique of historicist methods of interpretation. Intention, he argues, is key to understanding which pieces of historical data are relevant to literary criticism. Lucid, provocative, direct and inimitable, this new book from Stanley Fish is required reading for anyone teaching or studying Milton and early modern literary studies\" --Provided by publisher."],
        "primary_isbn_a":["0511758545",
          "9780511758546",
          "9781107003057",
          "1107003059",
          "9780521176248",
          "0521176247",
          "1139365762",
          "9781139365765",
          "1280663960",
          "9781280663963",
          "9786613640895",
          "6613640891",
          "1139378309",
          "9781139378307",
          "1139371452",
          "9781139371452",
          "1139379739",
          "9781139379731"],
        "primary_oclc_a":["801926476"],
        "host_item_work_a":["{\"title\":[\"Cambridge University Press ebooks\",\"(online collection)\",\".\",\"2020-05 backlist\"]}"],
        "resource_type_a":["Book"],
        "subject_genre_a":["Criticism, interpretation, etc",
          "Nonfiction"],
        "date_cataloged":"2020-07-21T04:00:00Z",
        "genre_headings_a":["Criticism, interpretation, etc"],
        "subject_suggest":["Criticism, interpretation, etc",
          "Milton, John, 1608-1674 -- Criticism and interpretation",
          "Milton, John, 1608-1674",
          "1600-1699",
          "English literature -- 17th century -- History and criticism",
          "English literature -- Early modern, 1500-1700 -- History and criticism",
          "English literature"],
        "physical_media_a":["Online"],
        "subject_topical_a":["Milton, John, 1608-1674",
          "Criticism and interpretation",
          "English literature",
          "History and criticism"],
        "publication_year_sort":"2012",
        "reverse_shelfkey":"lc:A8}WURR}KUSS}XZYX",
        "subject_headings_a":["Milton, John, 1608-1674 -- Criticism and interpretation",
          "Milton, John, 1608-1674",
          "1600-1699",
          "English literature -- 17th century -- History and criticism",
          "English literature -- Early modern, 1500-1700 -- History and criticism",
          "English literature"],
        "lc_call_nos_normed_a":["PR.3588.F577.2012"],
        "publisher_location_a":["New York",
          "Cambridge"],
        "record_data_source_a":["ILSMARC"],
        "call_number_schemes_a":["LC"],
        "origin_place_search_a":["New York",
          "Cambridge",
          "New York (State)",
          "United States"],
        "physical_description_a":["1 online resource"],
        "subject_chronological_a":["1600-1699",
          "17th century",
          "Early modern, 1500-1700"],
        "note_access_restrictions_a":["Access limited to UNC Chapel Hill-authenticated users. Unlimited simultaneous users"],
        "lcc_callnum_classification_a":["P - Language and literature",
          "P - Language and literature|PR1 - PR9680 English literature",
          "P - Language and literature|PR1 - PR9680 English literature|PR3291 - PR3785 17th and 18th centuries (1640-1770)"],
        "statement_of_responsibility_a":["Stanley Fish."],
        "index_date":"2024-02-18T08:51:52Z"},
      {
        "id":"UNCb7155903",
        "isbn_number_a":["9781107003057",
          "1107003059",
          "9780521176248",
          "0521176247"],
        "isbn_qualifying_info_a":["",
          "",
          "",
          ""],
        "items_a":["{\"item_id\":\"i9639326\",\"loc_b\":\"ddda\",\"loc_n\":\"ddda\",\"status\":\"Available\",\"call_no\":\"PR3588 .F577 2012\",\"cn_scheme\":\"LC\"}"],
        "author_suggest":["Fish, Stanley Eugene"],
        "names_a":["{\"name\":\"Fish, Stanley Eugene\",\"type\":\"creator\",\"id\":\"https://id.loc.gov/authorities/names/n50005269\"}"],
        "owner_a":["unc"],
        "misc_id_a":["LCCN: 2011046102"],
        "barcodes_a":["00044369780"],
        "language_a":["English"],
        "local_id":"b7155903",
        "note_toc_a":["Machine generated contents note: Introduction; Part I. Milton: 1. The Brenzel lectures; 2. To the pure all things are pure: law, faith and interpretation in the prose and poetry of John Milton; 3. 'There is nothing he cannot ask': Milton, liberalism, and terrorism; 4. Why Milton matters, or against historicism; 5. Milton in popular culture; 6. How the reviews work; 7. The New Milton criticism; Part II. Early Modern Literature: 8. Void of storie: the struggle for insincerity in Herbert's prose and poetry; 9. Authors-readers: Jonson's community of the same; 10. Marvell and the art of disappearance; 11. Masculine persuasive force: Donne and verbal power; 12. How Hobbes works; Index."],
        "shelfkey":"lc:PR.3588.F577.2012",
        "available_a":["Available"],
        "publisher_a":["Cambridge University Press"],
        "rollup_id":"OCLC756167066",
        "title_suggest":["Versions of anti-humanism : Milton and others"],
        "title_main":"Versions of anti-humanism : Milton and others",
        "title_sort_ssort_single":"versions of anti humanism milton and others",
        "access_type_a":["At the Library"],
        "institution_a":["unc"],
        "oclc_number_old_a":["756167354",
          "776774364",
          "808614731"],
        "oclc_number":"756167066",
        "creator_main_a":["Fish, Stanley Eugene"],
        "imprint_main_a":["{\"type\":\"publication\",\"value\":\"Cambridge, UK ; New York : Cambridge University Press, 2012.\"}"],
        "note_summary_a":["\"Stanley Fish, one of the foremost critics of literature working today, has spent much of his career writing and thinking about Milton. This book brings together his finest published work with brand new material on Milton and on other authors and topics in early modern literature. In his analyses of Renaissance texts, he meditates on the interpretive problems that confront readers and offers a sustained critique of historicist methods of interpretation. Intention, he argues, is key to understanding which pieces of historical data are relevant to literary criticism. Lucid, provocative, direct and inimitable, this new book from Stanley Fish is required reading for anyone teaching or studying Milton and early modern literary studies\"--Provided by publisher."],
        "primary_isbn_a":["9781107003057",
          "1107003059",
          "9780521176248",
          "0521176247"],
        "primary_oclc_a":["756167066"],
        "resource_type_a":["Book"],
        "subject_genre_a":["Nonfiction"],
        "date_cataloged":"2012-06-22T04:00:00Z",
        "physical_media_a":["Print"],
        "subject_topical_a":["Milton, John, 1608-1674",
          "Criticism and interpretation",
          "English literature",
          "History and criticism"],
        "publication_year_sort":"2012",
        "reverse_shelfkey":"lc:A8}WURR}KUSS}XZYX",
        "subject_headings_a":["Milton, John, 1608-1674 -- Criticism and interpretation",
          "English literature -- Early modern, 1500-1700 -- History and criticism"],
        "subject_suggest":["Milton, John, 1608-1674 -- Criticism and interpretation",
          "English literature -- Early modern, 1500-1700 -- History and criticism"],
        "lc_call_nos_normed_a":["PR.3588.F577.2012"],
        "location_hierarchy_a":["unc",
          "unc:uncdavy"],
        "publisher_location_a":["Cambridge, UK",
          "New York"],
        "record_data_source_a":["ILSMARC"],
        "call_number_schemes_a":["LC"],
        "origin_place_search_a":["Cambridge, UK",
          "New York",
          "England",
          "United Kingdom"],
        "physical_description_a":["ix, 289 pages ; 24 cm"],
        "subject_chronological_a":["Early modern, 1500-1700"],
        "lcc_callnum_classification_a":["P - Language and literature",
          "P - Language and literature|PR1 - PR9680 English literature",
          "P - Language and literature|PR1 - PR9680 English literature|PR3291 - PR3785 17th and 18th centuries (1640-1770)"],
        "statement_of_responsibility_a":["Stanley Fish."],
        "index_date":"2024-02-10T23:06:36Z"},
      {
        "id":"UNCb3203165",
        "url_a":["{\"href\":\"http://finding-aids.lib.unc.edu/04882/\",\"type\":\"findingaid\",\"note\":\"Finding aid\",\"restricted\":\"false\"}"],
        "items_a":["{\"item_id\":\"i4549916\",\"loc_b\":\"wadc\",\"loc_n\":\"wadc\",\"status\":\"In-Library Use Only\",\"call_no\":\"04882\",\"cn_scheme\":\"ALPHANUM\"}"],
        "author_suggest":["Kuralt, Charles, 1934-1997"],
        "names_a":["{\"name\":\"Kuralt, Charles, 1934-1997\",\"type\":\"creator\",\"id\":\"https://id.loc.gov/authorities/names/n50058269\"}"],
        "owner_a":["unc"],
        "language_a":["English"],
        "local_id":"b3203165",
        "available_a":["Available"],
        "rollup_id":"OCLC40828005",
        "note_local_a":["Source of acquisition: Acquired 1997-2006"],
        "title_suggest":["Charles Kuralt collection, 1935-1997"],
        "title_main":"Charles Kuralt collection, 1935-1997",
        "title_sort_ssort_single":"charles kuralt collection 1935 1997",
        "access_type_a":["At the Library"],
        "institution_a":["unc"],
        "oclc_number_old_a":["40828027",
          "40828029"],
        "oclc_number":"40828005",
        "creator_main_a":["Kuralt, Charles, 1934-1997"],
        "note_general_a":["In the Southern Historical Collection, University of North Carolina at Chapel Hill (#04882)",
          "In English"],
        "note_summary_a":["Charles Bishop Kuralt (1934-1997), a white newspaper, radio, and television journalist and author, was born in Wilmington, N.C. Kuralt attended the University of North Carolina, Chapel Hill, 1951-1955, where he served as editor of the Daily Tar Heel and worked for WUNC radio. Kuralt then joined the staff of the Charlotte News and, in 1957, became a writer for CBS in New York. As a correspondent for CBS, Kuralt was best known for his long-running television series On the Road and Sunday Morning. He was the author of several best-selling books based on his CBS experiences and the recipient of thirteen Emmy awards and three George Foster Peabody awards. Papers, 1934-1997, include personal and office mail, with extensive fan mail files and many letters in response to his retirement; scripts; speeches; background research materials relating to shows and books; clippings and souvenirs; publicity materials; oral history interviews with Kuralt's friends, family, and colleagues; photographs; calendars and notebooks; and audiotapes, videotapes, films, and other media. Among topics documented are early radio and television news writing and broadcasting, including the work of foreign correspondents in Latin America, Vietnam, and the Soviet Union, 1953-1994; American popular culture and folklore, 1950s-1990s; United States and international politics, especially in the 1960s; Appalachian poverty and culture, 1960s-1970s; the Plaisted Polar Expedition, 1967; fly fishing, 1970s-1990s; Olympics coverage, 1992-1994; and Kuralt family history"],
        "primary_oclc_a":["40828005"],
        "resource_type_a":["Archival and manuscript material"],
        "shelf_numbers_a":["04882"],
        "subject_genre_a":["Oral histories",
          "History"],
        "date_cataloged":"2019-09-20T04:00:00Z",
        "genre_headings_a":["Oral histories",
          "History"],
        "subject_suggest":["Oral histories",
          "History",
          "Kuralt, Charles, 1934-1997",
          "Beckers, Karen",
          "Benjamin, Burton",
          "Bliss, Edward, 1912-2002",
          "Capa, Cornell",
          "Churchill, Winston, 1874-1965",
          "Corwin, Norman, 1910-2011",
          "Cronkite, Walter",
          "Crutchfield, Charles",
          "Dennery, Phyllis",
          "Drasnin, Irv",
          "Ehle, John, 1925-2018",
          "Evans, Eli N.",
          "Friday, William C. (William Clyde)",
          "Grizzle, Ralph",
          "Kraar, Louis, 1931-",
          "Kuralt, Wallace H., Jr., 1939-2003",
          "MacLeod, Charlotte",
          "McGlohon, Loonis",
          "Morton, Hugh M.",
          "Powledge, Fred",
          "Rather, Dan",
          "Reasoner, Harry, 1923-1991",
          "Rudd, Hughes",
          "Salant, Richard S., 1914-1993",
          "Seeger, Pete, 1919-2014",
          "Sharnik, John",
          "Small, William J.",
          "Spain, Tom",
          "Spangler, C. D., Jr. (Clemmie Dixon), 1932-2018",
          "Thompson, Hunter S.",
          "Timberlake, Bob",
          "Tolbert-Rouchaleau, Jane",
          "Trillin, Calvin",
          "VerPlanck, J. Billy (John Billy), 1930-2009",
          "VerPlanck, Marlene",
          "Voelker, John D. (John Donaldson), 1903-1991",
          "Wallace, Wesley H. (Wesley Herndon), 1912-2004",
          "Welsch, Roger L.",
          "Yoder, Edwin M., Jr. (Edwin Milton), 1934-",
          "Ziolkowski, Korczak, 1908-1982",
          "University of North Carolina (1793-1962) -- History -- 20th century",
          "University of North Carolina (1793-1962) -- Students -- Social life and customs",
          "CBS Inc",
          "CBS News",
          "CBS Radio Network",
          "CBS Television Network",
          "Columbia Broadcasting System, Inc",
          "WELY (Radio station : Ely, Minn.)",
          "University of North Carolina (1793-1962)",
          "Plaisted Polar Expedition (1967)",
          "Charlotte news (Charlotte, N.C.)",
          "Daily Tar Heel -- History",
          "Vietnam War (1961-1975)",
          "1900-1999",
          "Foreign correspondents -- Soviet Union -- Russia (Federation) -- Moscow",
          "Broadcast journalism -- United States -- History",
          "Celebrities -- United States -- History -- 20th century",
          "Families -- North Carolina -- Social life and customs",
          "Fly fishing -- United States",
          "Folklore -- United States",
          "Foreign correspondents -- Latin America",
          "Foreign correspondents -- Vietnam",
          "Journalists -- North Carolina -- History -- 20th century",
          "Journalists -- United States -- History -- 20th century",
          "Olympics -- Press coverage -- United States",
          "Popular culture -- United States -- History -- 20th century",
          "Radio journalism -- United States -- History -- 20th century",
          "Retirement -- United States",
          "Television broadcasting -- History",
          "Television broadcasting -- Social aspects -- United States",
          "Vietnam War, 1961-1975 -- Journalists",
          "Vietnam War, 1961-1975 -- Mass media and the war",
          "Vietnam War, 1961-1975 -- Press coverage",
          "Voyages and travels -- History -- 20th century",
          "Broadcast journalism",
          "Celebrities",
          "Discoveries in geography",
          "Economic history",
          "Families -- Social life and customs",
          "Fly fishing",
          "Folklore",
          "Foreign correspondents",
          "Journalists",
          "Manners and customs",
          "Mass media and war",
          "Olympics -- Press coverage",
          "Politics and government",
          "Popular culture",
          "Press coverage",
          "Radio journalism",
          "Retirement",
          "Social conditions",
          "Students -- Social life and customs",
          "Television broadcasting",
          "Television broadcasting -- Social aspects",
          "Travel",
          "Voyages and travels",
          "Appalachian Region -- Economic conditions",
          "Appalachian Region -- Social conditions",
          "Polar regions -- Discovery and exploration",
          "United States -- Description and travel",
          "United States -- Politics and government -- 20th century",
          "United States -- Social life and customs -- 20th century",
          "Appalachian Region",
          "Latin America",
          "North Carolina",
          "Polar regions",
          "Russia (Federation) -- Moscow",
          "United States",
          "Vietnam"],
        "subject_topical_a":["Kuralt, Charles, 1934-1997",
          "Beckers, Karen",
          "Benjamin, Burton",
          "Bliss, Edward, 1912-2002",
          "Capa, Cornell",
          "Churchill, Winston, 1874-1965",
          "Corwin, Norman, 1910-2011",
          "Cronkite, Walter",
          "Crutchfield, Charles",
          "Dennery, Phyllis",
          "Drasnin, Irv",
          "Ehle, John, 1925-2018",
          "Evans, Eli N.",
          "Friday, William C. (William Clyde)",
          "Grizzle, Ralph",
          "Kraar, Louis, 1931-",
          "Kuralt, Wallace H., Jr., 1939-2003",
          "MacLeod, Charlotte",
          "McGlohon, Loonis",
          "Morton, Hugh M.",
          "Powledge, Fred",
          "Rather, Dan",
          "Reasoner, Harry, 1923-1991",
          "Rudd, Hughes",
          "Salant, Richard S., 1914-1993",
          "Seeger, Pete, 1919-2014",
          "Sharnik, John",
          "Small, William J.",
          "Spain, Tom",
          "Spangler, C. D., Jr. (Clemmie Dixon), 1932-2018",
          "Thompson, Hunter S.",
          "Timberlake, Bob",
          "Tolbert-Rouchaleau, Jane",
          "Trillin, Calvin",
          "VerPlanck, J. Billy (John Billy), 1930-2009",
          "VerPlanck, Marlene",
          "Voelker, John D. (John Donaldson), 1903-1991",
          "Wallace, Wesley H. (Wesley Herndon), 1912-2004",
          "Welsch, Roger L.",
          "Yoder, Edwin M., Jr. (Edwin Milton), 1934-",
          "Ziolkowski, Korczak, 1908-1982",
          "University of North Carolina (1793-1962)",
          "History",
          "Students",
          "Social life and customs",
          "CBS Inc",
          "CBS News",
          "CBS Radio Network",
          "CBS Television Network",
          "Columbia Broadcasting System, Inc",
          "WELY (Radio station : Ely, Minn.)",
          "Plaisted Polar Expedition (1967)",
          "Charlotte news (Charlotte, N.C.)",
          "Daily Tar Heel",
          "Vietnam War (1961-1975)",
          "Foreign correspondents",
          "Broadcast journalism",
          "Celebrities",
          "Families",
          "Fly fishing",
          "Folklore",
          "Journalists",
          "Olympics",
          "Press coverage",
          "Popular culture",
          "Radio journalism",
          "Retirement",
          "Television broadcasting",
          "Social aspects",
          "Vietnam War, 1961-1975",
          "Mass media and the war",
          "Voyages and travels",
          "Discoveries in geography",
          "Economic history",
          "Manners and customs",
          "Mass media and war",
          "Politics and government",
          "Social conditions",
          "Travel",
          "Economic conditions",
          "Discovery and exploration",
          "Description and travel"],
        "publication_year_sort":"1935",
        "subject_headings_a":["Kuralt, Charles, 1934-1997",
          "Beckers, Karen",
          "Benjamin, Burton",
          "Bliss, Edward, 1912-2002",
          "Capa, Cornell",
          "Churchill, Winston, 1874-1965",
          "Corwin, Norman, 1910-2011",
          "Cronkite, Walter",
          "Crutchfield, Charles",
          "Dennery, Phyllis",
          "Drasnin, Irv",
          "Ehle, John, 1925-2018",
          "Evans, Eli N.",
          "Friday, William C. (William Clyde)",
          "Grizzle, Ralph",
          "Kraar, Louis, 1931-",
          "Kuralt, Wallace H., Jr., 1939-2003",
          "MacLeod, Charlotte",
          "McGlohon, Loonis",
          "Morton, Hugh M.",
          "Powledge, Fred",
          "Rather, Dan",
          "Reasoner, Harry, 1923-1991",
          "Rudd, Hughes",
          "Salant, Richard S., 1914-1993",
          "Seeger, Pete, 1919-2014",
          "Sharnik, John",
          "Small, William J.",
          "Spain, Tom",
          "Spangler, C. D., Jr. (Clemmie Dixon), 1932-2018",
          "Thompson, Hunter S.",
          "Timberlake, Bob",
          "Tolbert-Rouchaleau, Jane",
          "Trillin, Calvin",
          "VerPlanck, J. Billy (John Billy), 1930-2009",
          "VerPlanck, Marlene",
          "Voelker, John D. (John Donaldson), 1903-1991",
          "Wallace, Wesley H. (Wesley Herndon), 1912-2004",
          "Welsch, Roger L.",
          "Yoder, Edwin M., Jr. (Edwin Milton), 1934-",
          "Ziolkowski, Korczak, 1908-1982",
          "University of North Carolina (1793-1962) -- History -- 20th century",
          "University of North Carolina (1793-1962) -- Students -- Social life and customs",
          "CBS Inc",
          "CBS News",
          "CBS Radio Network",
          "CBS Television Network",
          "Columbia Broadcasting System, Inc",
          "WELY (Radio station : Ely, Minn.)",
          "University of North Carolina (1793-1962)",
          "Plaisted Polar Expedition (1967)",
          "Charlotte news (Charlotte, N.C.)",
          "Daily Tar Heel -- History",
          "Vietnam War (1961-1975)",
          "1900-1999",
          "Foreign correspondents -- Soviet Union -- Russia (Federation) -- Moscow",
          "Broadcast journalism -- United States -- History",
          "Celebrities -- United States -- History -- 20th century",
          "Families -- North Carolina -- Social life and customs",
          "Fly fishing -- United States",
          "Folklore -- United States",
          "Foreign correspondents -- Latin America",
          "Foreign correspondents -- Vietnam",
          "Journalists -- North Carolina -- History -- 20th century",
          "Journalists -- United States -- History -- 20th century",
          "Olympics -- Press coverage -- United States",
          "Popular culture -- United States -- History -- 20th century",
          "Radio journalism -- United States -- History -- 20th century",
          "Retirement -- United States",
          "Television broadcasting -- History",
          "Television broadcasting -- Social aspects -- United States",
          "Vietnam War, 1961-1975 -- Journalists",
          "Vietnam War, 1961-1975 -- Mass media and the war",
          "Vietnam War, 1961-1975 -- Press coverage",
          "Voyages and travels -- History -- 20th century",
          "Broadcast journalism",
          "Celebrities",
          "Discoveries in geography",
          "Economic history",
          "Families -- Social life and customs",
          "Fly fishing",
          "Folklore",
          "Foreign correspondents",
          "Journalists",
          "Manners and customs",
          "Mass media and war",
          "Olympics -- Press coverage",
          "Politics and government",
          "Popular culture",
          "Press coverage",
          "Radio journalism",
          "Retirement",
          "Social conditions",
          "Students -- Social life and customs",
          "Television broadcasting",
          "Television broadcasting -- Social aspects",
          "Travel",
          "Voyages and travels",
          "Appalachian Region -- Economic conditions",
          "Appalachian Region -- Social conditions",
          "Polar regions -- Discovery and exploration",
          "United States -- Description and travel",
          "United States -- Politics and government -- 20th century",
          "United States -- Social life and customs -- 20th century",
          "Appalachian Region",
          "Latin America",
          "North Carolina",
          "Polar regions",
          "Russia (Federation) -- Moscow",
          "United States",
          "Vietnam"],
        "location_hierarchy_a":["unc",
          "unc:uncsoun",
          "unc:uncwil",
          "unc:uncwil:uncwilshc"],
        "record_data_source_a":["ILSMARC",
          "EAD"],
        "subject_geographic_a":["Soviet Union",
          "Russia (Federation)",
          "Moscow",
          "United States",
          "North Carolina",
          "Latin America",
          "Vietnam",
          "Appalachian Region",
          "Polar regions"],
        "call_number_schemes_a":["ALPHANUM"],
        "origin_place_search_a":["United States"],
        "physical_description_a":["approximately 67500 items (198.5 linear ft. plus audiovisual materials)"],
        "subject_chronological_a":["20th century",
          "1900-1999"],
        "note_access_restrictions_a":["RESTRICTED: Scripts and other CBS materials, including still photographs, may not be copied",
          "RESTRICTED: Use of some audio or video materials may require production of listening copies"],
        "index_date":"2024-01-29T12:06:37Z"},
      {
        "id":"UNCb3284706",
        "url_a":["{\"href\":\"https://finding-aids.lib.unc.edu/P0031/\",\"type\":\"findingaid\",\"note\":\"Finding aid\",\"restricted\":\"false\"}"],
        "items_a":["{\"item_id\":\"i4666266\",\"loc_b\":\"wbga\",\"loc_n\":\"wbga\",\"status\":\"In-Library Use Only\",\"call_no\":\"P0031\",\"cn_scheme\":\"ALPHANUM\"}"],
        "author_suggest":["University of North Carolina at Chapel Hill. Photographic Laboratory"],
        "names_a":["{\"name\":\"University of North Carolina at Chapel Hill. Photographic Laboratory\",\"type\":\"creator\"}"],
        "owner_a":["unc"],
        "barcodes_a":["HAYC-8724-00001"],
        "language_a":["English"],
        "local_id":"b3284706",
        "available_a":["Available"],
        "rollup_id":"OCLC43026547",
        "title_suggest":["University of North Carolina at Chapel Hill Photographic Laboratory collection, 1946-1990."],
        "title_main":"University of North Carolina at Chapel Hill Photographic Laboratory collection, 1946-1990.",
        "title_sort_ssort_single":"university of north carolina at chapel hill photographic laboratory collection 1946 1990",
        "access_type_a":["At the Library"],
        "institution_a":["unc"],
        "oclc_number":"43026547",
        "creator_main_a":["University of North Carolina at Chapel Hill. Photographic Laboratory"],
        "note_summary_a":["The majority of the collection consists of black-and-white photographic negatives and mounted \"reference\" photographic prints created by the Photographic Laboratory between 1946 and 1990. Subject matter includes faculty, staff, students, facilities, and activities at the University of North Carolina at Chapel Hill."],
        "primary_oclc_a":["43026547"],
        "resource_type_a":["Archival and manuscript material"],
        "shelf_numbers_a":["P0031"],
        "subject_genre_a":["Photographs",
          "Pictorial works"],
        "date_cataloged":"2010-11-24T05:00:00Z",
        "genre_headings_a":["Photographs",
          "Pictorial works"],
        "subject_suggest":["Photographs",
          "Pictorial works",
          "North Carolina Tar Heels (Baseball team) -- Photographs",
          "North Carolina Tar Heels (Basketball team) -- Photographs",
          "North Carolina Tar Heels (Football team) -- Photographs",
          "North Carolina. Speaker Ban Law",
          "Old Well (Chapel Hill, N.C.) -- Photographs",
          "University of North Carolina (1793-1962) -- Administration -- Photographs",
          "University of North Carolina (1793-1962) -- Alumni and alumnae -- Photographs",
          "University of North Carolina (1793-1962) -- Awards -- Photographs",
          "University of North Carolina (1793-1962) -- Baseball -- Photographs",
          "University of North Carolina (1793-1962) -- Basketball -- Photographs",
          "University of North Carolina (1793-1962) -- Buildings -- Photographs",
          "University of North Carolina (1793-1962) -- Buildings -- Pictorial works",
          "University of North Carolina (1793-1962) -- Commencement -- Photographs",
          "University of North Carolina (1793-1962) -- Employees -- Photographs",
          "University of North Carolina (1793-1962) -- Faculty -- Photographs",
          "University of North Carolina (1793-1962) -- Football -- Photographs",
          "University of North Carolina (1793-1962) -- Foreign students -- Photographs",
          "University of North Carolina (1793-1962) -- History -- Photographs",
          "University of North Carolina (1793-1962) -- History",
          "University of North Carolina (1793-1962) -- Libraries -- Photographs",
          "University of North Carolina (1793-1962) -- Photographs",
          "University of North Carolina (1793-1962) -- Social life and customs",
          "University of North Carolina (1793-1962) -- Societies, etc -- Photographs",
          "University of North Carolina (1793-1962) -- Sports -- Photographs",
          "University of North Carolina (1793-1962) -- Student housing -- Photographs",
          "University of North Carolina (1793-1962) -- Students -- Photographs",
          "University of North Carolina (1793-1962) -- Students -- Social life and customs",
          "University of North Carolina at Chapel Hill -- Administration -- Photographs",
          "University of North Carolina at Chapel Hill -- Alumni and alumnae -- Photographs",
          "University of North Carolina at Chapel Hill -- Awards -- Photographs",
          "University of North Carolina at Chapel Hill -- Baseball -- Photographs",
          "University of North Carolina at Chapel Hill -- Basketball -- Photographs",
          "University of North Carolina at Chapel Hill -- Buildings -- Photographs",
          "University of North Carolina at Chapel Hill -- Commencement -- Photographs",
          "University of North Carolina at Chapel Hill -- Employees -- Photographs",
          "University of North Carolina at Chapel Hill -- Faculty -- Photographs",
          "University of North Carolina at Chapel Hill -- Football -- Photographs",
          "University of North Carolina at Chapel Hill -- Foreign students -- Photographs",
          "University of North Carolina at Chapel Hill -- History -- Photographs",
          "University of North Carolina at Chapel Hill -- History",
          "University of North Carolina at Chapel Hill. Library -- Photographs",
          "University of North Carolina at Chapel Hill -- Photographs",
          "University of North Carolina at Chapel Hill -- Social life and customs",
          "University of North Carolina at Chapel Hill -- Societies, etc -- Photographs",
          "University of North Carolina at Chapel Hill -- Sports -- Photographs",
          "University of North Carolina at Chapel Hill -- Student housing -- Photographs",
          "University of North Carolina at Chapel Hill -- Students -- Photographs",
          "University of North Carolina at Chapel Hill -- Students -- Political activity -- Photographs",
          "University of North Carolina at Chapel Hill -- Students -- Social life and customs",
          "University of North Carolina at Chapel Hill. Morehead-Patterson Memorial Tower -- Photographs",
          "University of North Carolina at Chapel Hill. Photographic Laboratory",
          "College athletes -- North Carolina -- Photographs",
          "College athletes -- Photographs",
          "College athletes -- Southern States -- Photographs",
          "College campuses -- North Carolina -- Chapel Hill -- Photographs",
          "College campuses -- North Carolina -- Photographs",
          "College campuses -- United States -- Photographs",
          "College sports -- North Carolina -- Photographs",
          "College sports -- Photographs",
          "College sports -- Southern States -- Photographs",
          "College students -- North Carolina -- Chapel Hill -- Photographs",
          "College students -- North Carolina -- Photographs",
          "Protest movements -- North Carolina -- Photographs",
          "Universities and colleges -- North Carolina -- Photographs",
          "Universities and colleges -- Photographs",
          "North Carolina -- Photographs"],
        "subject_topical_a":["North Carolina Tar Heels (Baseball team)",
          "North Carolina Tar Heels (Basketball team)",
          "North Carolina Tar Heels (Football team)",
          "North Carolina. Speaker Ban Law",
          "Old Well (Chapel Hill, N.C.)",
          "University of North Carolina (1793-1962)",
          "Administration",
          "Alumni and alumnae",
          "Awards",
          "Baseball",
          "Basketball",
          "Buildings",
          "Commencement",
          "Employees",
          "Faculty",
          "Football",
          "Foreign students",
          "History",
          "Libraries",
          "Social life and customs",
          "Societies, etc",
          "Sports",
          "Student housing",
          "Students",
          "University of North Carolina at Chapel Hill",
          "University of North Carolina at Chapel Hill. Library",
          "Political activity",
          "University of North Carolina at Chapel Hill. Morehead-Patterson Memorial Tower",
          "University of North Carolina at Chapel Hill. Photographic Laboratory",
          "College athletes",
          "College campuses",
          "College sports",
          "College students",
          "Protest movements",
          "Universities and colleges"],
        "publication_year_sort":"1946",
        "subject_headings_a":["North Carolina Tar Heels (Baseball team) -- Photographs",
          "North Carolina Tar Heels (Basketball team) -- Photographs",
          "North Carolina Tar Heels (Football team) -- Photographs",
          "North Carolina. Speaker Ban Law",
          "Old Well (Chapel Hill, N.C.) -- Photographs",
          "University of North Carolina (1793-1962) -- Administration -- Photographs",
          "University of North Carolina (1793-1962) -- Alumni and alumnae -- Photographs",
          "University of North Carolina (1793-1962) -- Awards -- Photographs",
          "University of North Carolina (1793-1962) -- Baseball -- Photographs",
          "University of North Carolina (1793-1962) -- Basketball -- Photographs",
          "University of North Carolina (1793-1962) -- Buildings -- Photographs",
          "University of North Carolina (1793-1962) -- Buildings -- Pictorial works",
          "University of North Carolina (1793-1962) -- Commencement -- Photographs",
          "University of North Carolina (1793-1962) -- Employees -- Photographs",
          "University of North Carolina (1793-1962) -- Faculty -- Photographs",
          "University of North Carolina (1793-1962) -- Football -- Photographs",
          "University of North Carolina (1793-1962) -- Foreign students -- Photographs",
          "University of North Carolina (1793-1962) -- History -- Photographs",
          "University of North Carolina (1793-1962) -- History",
          "University of North Carolina (1793-1962) -- Libraries -- Photographs",
          "University of North Carolina (1793-1962) -- Photographs",
          "University of North Carolina (1793-1962) -- Social life and customs",
          "University of North Carolina (1793-1962) -- Societies, etc -- Photographs",
          "University of North Carolina (1793-1962) -- Sports -- Photographs",
          "University of North Carolina (1793-1962) -- Student housing -- Photographs",
          "University of North Carolina (1793-1962) -- Students -- Photographs",
          "University of North Carolina (1793-1962) -- Students -- Social life and customs",
          "University of North Carolina at Chapel Hill -- Administration -- Photographs",
          "University of North Carolina at Chapel Hill -- Alumni and alumnae -- Photographs",
          "University of North Carolina at Chapel Hill -- Awards -- Photographs",
          "University of North Carolina at Chapel Hill -- Baseball -- Photographs",
          "University of North Carolina at Chapel Hill -- Basketball -- Photographs",
          "University of North Carolina at Chapel Hill -- Buildings -- Photographs",
          "University of North Carolina at Chapel Hill -- Commencement -- Photographs",
          "University of North Carolina at Chapel Hill -- Employees -- Photographs",
          "University of North Carolina at Chapel Hill -- Faculty -- Photographs",
          "University of North Carolina at Chapel Hill -- Football -- Photographs",
          "University of North Carolina at Chapel Hill -- Foreign students -- Photographs",
          "University of North Carolina at Chapel Hill -- History -- Photographs",
          "University of North Carolina at Chapel Hill -- History",
          "University of North Carolina at Chapel Hill. Library -- Photographs",
          "University of North Carolina at Chapel Hill -- Photographs",
          "University of North Carolina at Chapel Hill -- Social life and customs",
          "University of North Carolina at Chapel Hill -- Societies, etc -- Photographs",
          "University of North Carolina at Chapel Hill -- Sports -- Photographs",
          "University of North Carolina at Chapel Hill -- Student housing -- Photographs",
          "University of North Carolina at Chapel Hill -- Students -- Photographs",
          "University of North Carolina at Chapel Hill -- Students -- Political activity -- Photographs",
          "University of North Carolina at Chapel Hill -- Students -- Social life and customs",
          "University of North Carolina at Chapel Hill. Morehead-Patterson Memorial Tower -- Photographs",
          "University of North Carolina at Chapel Hill. Photographic Laboratory",
          "College athletes -- North Carolina -- Photographs",
          "College athletes -- Photographs",
          "College athletes -- Southern States -- Photographs",
          "College campuses -- North Carolina -- Chapel Hill -- Photographs",
          "College campuses -- North Carolina -- Photographs",
          "College campuses -- United States -- Photographs",
          "College sports -- North Carolina -- Photographs",
          "College sports -- Photographs",
          "College sports -- Southern States -- Photographs",
          "College students -- North Carolina -- Chapel Hill -- Photographs",
          "College students -- North Carolina -- Photographs",
          "Protest movements -- North Carolina -- Photographs",
          "Universities and colleges -- North Carolina -- Photographs",
          "Universities and colleges -- Photographs",
          "North Carolina -- Photographs"],
        "note_biographical_a":["The University of North Carolina at Chapel Hill Photographic Laboratory served the University community for almost half a century, from 1946 to 1990. The Laboratory processed (developed) film for University photographers and served as the image reproduction center for University offices, schools, departments, staff, and student activities. Thousands of the images in this collection appeared in a variety of University-related publications (including the \"Yackety Yack\" and \"The Daily Tarheel\") in addition to being used in official materials created to provide information about different departments, schools, and departments on campus. The Photographic Laboratory ceased operations in 1990."],
        "location_hierarchy_a":["unc",
          "unc:uncnorn",
          "unc:uncwil",
          "unc:uncwil:uncwilncc"],
        "record_data_source_a":["ILSMARC",
          "EAD"],
        "subject_geographic_a":["North Carolina",
          "Southern States",
          "Chapel Hill",
          "United States"],
        "call_number_schemes_a":["ALPHANUM"],
        "origin_place_search_a":["North Carolina",
          "United States"],
        "physical_description_a":["About 180000 items"],
        "index_date":"2024-01-29T20:06:55Z"},
      {
        "id":"UNCb7991365",
        "url_a":["{\"href\":\"http://finding-aids.lib.unc.edu/P0077/\",\"type\":\"findingaid\",\"note\":\"Finding aid\",\"restricted\":\"false\"}"],
        "items_a":["{\"item_id\":\"i10520551\",\"loc_b\":\"wbga\",\"loc_n\":\"wbga\",\"status\":\"In-Library Use Only\",\"call_no\":\"P0077\",\"cn_scheme\":\"ALPHANUM\"}"],
        "author_suggest":["Barbour, Durwood, 1929-2016"],
        "names_a":["{\"name\":\"Barbour, Durwood, 1929-2016\",\"type\":\"creator\",\"id\":\"https://id.loc.gov/authorities/names/no2019104229\"}"],
        "owner_a":["unc"],
        "language_a":["English"],
        "local_id":"b7991365",
        "available_a":["Available"],
        "rollup_id":"OCLC898490870",
        "note_local_a":["Source of acquisition: Acquired 2006, 2007",
          "Source of acquisition: Acquired; 2006"],
        "title_suggest":["Durwood Barbour collection of North Carolina postcards, 1905-1980s, 2007"],
        "title_main":"Durwood Barbour collection of North Carolina postcards, 1905-1980s, 2007",
        "title_sort_ssort_single":"durwood barbour collection of north carolina postcards 1905 1980s 2007",
        "access_type_a":["At the Library"],
        "institution_a":["unc"],
        "oclc_number":"898490870",
        "creator_main_a":["Barbour, Durwood, 1929-2016"],
        "note_general_a":["In the North Carolina Collection Photographic Archives, University of North Carolina at Chapel Hill (#P0077)"],
        "note_summary_a":["M. Durwood Barbour, a white postcard collector, resident of Raleigh, N.C., and a member of the 1952 class of the University of North Carolina, became interested in picture postcards as an offshoot from his hobby of collecting North Carolina bank notes and his appreciation for early photographic images of the state. Over the course of twenty-four years Barbour accumulated a collection of over 7,800 picture postcards. The Durwood Barbour Collection of North Carolina Postcards contains nearly 8,000 picture postcards collected by M. Durwood Barbour, 1950s-1980s. Included are views of almost every town and city in North Carolina. There are also postcards depicting scenes related to African American history, parades and public gatherings, agriculture and industry, military history, scenic views, public buildings such as courthouses and railroad stations, and disasters such as fires, floods, and train wrecks. Also included are \"real photo\" postcards created by North Carolina photographers Thomas R. Draper in Beaufort County, N.C., E.C. Eddy in Southern Pines, N.C., sisters Edith Felch and Dora Felch in Sanford, N.C., M. B. Gowdy in Carteret County, N.C., J. J. Hitchcock and Walter Holladay in Durham, N.C., Frank Marchant in Hamlet, N.C., D. Victor Meekins in Dare County, N.C., John E. Spencer in Rockingham, N.C., H. Lee Waters in Lexington, N.C., and Bayard Wootten in New Bern N.C. The collection also includes printed postcards produced by several of the most widely known companies of the period, including the Albertype Company, the American News Company, the Artvue Post Card Company, the Asheville Post Card Company, the Auburn Greeting Card Company, the Commercial Colortype Company, the Curt Teich Company, the Dexter Press, the E.C. Kropp Company, the Ess and Ess Company, the Graycraft Card Company, the Hugh Leighton Company, the Illustrated Post Card Company, the Indianapolis Post Card Company, the PCK Series, Raphael Tuck & Sons, the Rotograph Company, Tichnor Brothers, the Valentine Post Card Company, and the W.M. Cline Company. The Addition of 2007 is an audio recording of an interview of Barbour by Fred Wasser concerning the donation and related exhibit of his postcard collection at the North Carolina Collection"],
        "primary_oclc_a":["898490870"],
        "resource_type_a":["Archival and manuscript material"],
        "shelf_numbers_a":["P0077"],
        "subject_genre_a":["Pictorial works",
          "Photographic postcards",
          "Photomechanical prints",
          "History"],
        "date_cataloged":"2019-10-30T04:00:00Z",
        "genre_headings_a":["Pictorial works",
          "Photographic postcards -- Twentieth century (dates CE)",
          "Photomechanical prints -- Twentieth century (dates CE)",
          "History"],
        "subject_suggest":["Pictorial works",
          "Photographic postcards -- Twentieth century (dates CE)",
          "Photomechanical prints -- Twentieth century (dates CE)",
          "History",
          "Draper, T. R. (Thomas Richard), 1867-1940",
          "Eddy, E. C. (Ellsworth Curtis), 1882-1969",
          "Felch, Dora Alice, 1882-1959",
          "Felch, Edith E., 1873-1961",
          "Gowdy, M. B.",
          "Hitchcock, J. J. (John Junius), 1875-1940",
          "Holladay, Waller, 1877-1935",
          "Marchant, Frederick, Approximately 1872-1942",
          "Meekins, Victor",
          "Spencer, John E. (John Edward), 1865-1954",
          "Waters, H. Lee (Herbert Lee), 1902-1997",
          "Wootten, Bayard Morgan, 1875-1959",
          "1900-1999",
          "African Americans -- History",
          "Agriculture",
          "Factories",
          "Health resorts",
          "Natural disasters",
          "Railroad stations",
          "Real photo postcards -- 20th century",
          "African Americans",
          "Photomechanical processes -- 20th century",
          "Postcards -- 20th century",
          "Postcards",
          "Postcards -- Private collections",
          "Real photo postcards",
          "Streets",
          "Alamance County (N.C.) -- Pictorial works",
          "Alexander County (N.C.) -- Pictorial works",
          "Alleghany County (N.C.) -- Pictorial works",
          "Anson County (N.C.) -- Pictorial works",
          "Ashe County (N.C.) -- Pictorial works",
          "Avery County (N.C.) -- Pictorial works",
          "Beaufort County (N.C.) -- Pictorial works",
          "Bertie County (N.C.) -- Pictorial works",
          "Bladen County (N.C.) -- Pictorial works",
          "Brunswick County (N.C.) -- Pictorial works",
          "Buncombe County (N.C.) -- Pictorial works",
          "Burke County (N.C.) -- Pictorial works",
          "Cabarrus County (N.C.) -- Pictorial works",
          "Caldwell County (N.C.) -- Pictorial works",
          "Camden County (N.C.) -- Pictorial works",
          "Carteret County (N.C.) -- Pictorial works",
          "Caswell County (N.C.) -- Pictorial works",
          "Catawba County (N.C.) -- Pictorial works",
          "Chatham County (N.C.) -- Pictorial works",
          "Cherokee County (N.C.) -- Pictorial works",
          "Chowan County (N.C.) -- Pictorial works",
          "Clay County (N.C.) -- Pictorial works",
          "Cleveland County (N.C.) -- Pictorial works",
          "Columbus County (N.C.) -- Pictorial works",
          "Craven County (N.C.) -- Pictorial works",
          "Cumberland County (N.C.) -- Pictorial works",
          "Currituck County (N.C.) -- Pictorial works",
          "Dare County (N.C.) -- Pictorial works",
          "Davidson County (N.C.) -- Pictorial works",
          "Davie County (N.C.) -- Pictorial works",
          "Duplin County (N.C.) -- Pictorial works",
          "Durham County (N.C.) -- Pictorial works",
          "Edgecombe County (N.C.) -- Pictorial works",
          "Forsyth County (N.C.) -- Pictorial works",
          "Franklin County (N.C.) -- Pictorial works",
          "Gaston County (N.C.) -- Pictorial works",
          "Gates County (N.C.) -- Pictorial works",
          "Graham County (N.C.) -- Pictorial works",
          "Granville County (N.C.) -- Pictorial works",
          "Greene County (N.C.) -- Pictorial works",
          "Guilford County (N.C.) -- Pictorial works",
          "Halifax County (N.C.) -- Pictorial works",
          "Harnett County (N.C.) -- Pictorial works",
          "Haywood County (N.C.) -- Pictorial works",
          "Henderson County (N.C.) -- Pictorial works",
          "Hertford County (N.C.) -- Pictorial works",
          "Hoke County (N.C.) -- Pictorial works",
          "Hyde County (N.C.) -- Pictorial works",
          "Iredell County (N.C.) -- Pictorial works",
          "Jackson County (N.C.) -- Pictorial works",
          "Johnston County (N.C.) -- Pictorial works",
          "Jones County (N.C.) -- Pictorial works",
          "Lee County (N.C.) -- Pictorial works",
          "Lenoir County (N.C.) -- Pictorial works",
          "Lincoln County (N.C.) -- Pictorial works",
          "Macon County (N.C.) -- Pictorial works",
          "Madison County (N.C.) -- Pictorial works",
          "Martin County (N.C.) -- Pictorial works",
          "McDowell County (N.C.) -- Pictorial works",
          "Mecklenburg County (N.C.) -- Pictorial works",
          "Mitchell County (N.C.) -- Pictorial works",
          "Montgomery County (N.C.) -- Pictorial works",
          "Moore County (N.C.) -- Pictorial works",
          "Nash County (N.C.) -- Pictorial works",
          "New Hanover County (N.C.) -- Pictorial works",
          "Northampton County (N.C.) -- Pictorial works",
          "Onslow County (N.C.) -- Pictorial works",
          "Orange County (N.C.) -- Pictorial works",
          "Pamlico County (N.C.) -- Pictorial works",
          "Pasquotank County (N.C.) -- Pictorial works",
          "Pender County (N.C.) -- Pictorial works",
          "Perquimans County (N.C.) -- Pictorial works",
          "Person County (N.C.) -- Pictorial works",
          "Pitt County (N.C.) -- Pictorial works",
          "Polk County (N.C.) -- Pictorial works",
          "Randolph County (N.C.) -- Pictorial works",
          "Richmond County (N.C.) -- Pictorial works",
          "Robeson County (N.C.) -- Pictorial works",
          "Rockingham County (N.C.) -- Pictorial works",
          "Rowan County (N.C.) -- Pictorial works",
          "Rutherford County (N.C.) -- Pictorial works",
          "Sampson County (N.C.) -- Pictorial works",
          "Scotland County (N.C.) -- Pictorial works",
          "Stanly County (N.C.) -- Pictorial works",
          "Stokes County (N.C.) -- Pictorial works",
          "Surry County (N.C.) -- Pictorial works",
          "Swain County (N.C.) -- Pictorial works",
          "Transylvania County (N.C.) -- Pictorial works",
          "Union County (N.C.) -- Pictorial works",
          "Vance County (N.C.) -- Pictorial works",
          "Wake County (N.C.) -- Pictorial works",
          "Warren County (N.C.) -- Pictorial works",
          "Washington County (N.C.) -- Pictorial works",
          "Watauga County (N.C.) -- Pictorial works",
          "Wayne County (N.C.) -- Pictorial works",
          "Wilkes County (N.C.) -- Pictorial works",
          "Wilson County (N.C.) -- Pictorial works",
          "Yadkin County (N.C.) -- Pictorial works",
          "Yancey County (N.C.) -- Pictorial works",
          "North Carolina",
          "North Carolina -- Alamance County",
          "North Carolina -- Alexander County",
          "North Carolina -- Alleghany County",
          "North Carolina -- Anson County",
          "North Carolina -- Ashe County",
          "North Carolina -- Avery County",
          "North Carolina -- Beaufort County",
          "North Carolina -- Bertie County",
          "North Carolina -- Bladen County",
          "North Carolina -- Brunswick County",
          "North Carolina -- Buncombe County",
          "North Carolina -- Burke County",
          "North Carolina -- Cabarrus County",
          "North Carolina -- Caldwell County",
          "North Carolina -- Camden County",
          "North Carolina -- Carteret County",
          "North Carolina -- Caswell County",
          "North Carolina -- Catawba County",
          "North Carolina -- Chatham County",
          "North Carolina -- Cherokee County",
          "North Carolina -- Chowan County",
          "North Carolina -- Clay County",
          "North Carolina -- Cleveland County",
          "North Carolina -- Columbus County",
          "North Carolina -- Craven County",
          "North Carolina -- Cumberland County",
          "North Carolina -- Currituck County",
          "North Carolina -- Dare County",
          "North Carolina -- Davidson County",
          "North Carolina -- Davie County",
          "North Carolina -- Duplin County",
          "North Carolina -- Durham County",
          "North Carolina -- Edgecombe County",
          "North Carolina -- Forsyth County",
          "North Carolina -- Franklin County",
          "North Carolina -- Gaston County",
          "North Carolina -- Gates County",
          "North Carolina -- Graham County",
          "North Carolina -- Granville County",
          "North Carolina -- Greene County",
          "North Carolina -- Guilford County",
          "North Carolina -- Halifax County",
          "North Carolina -- Harnett County",
          "North Carolina -- Haywood County",
          "North Carolina -- Henderson County",
          "North Carolina -- Hertford County",
          "North Carolina -- Hoke County",
          "North Carolina -- Hyde County",
          "North Carolina -- Iredell County",
          "North Carolina -- Jackson County",
          "North Carolina -- Johnston County",
          "North Carolina -- Jones County",
          "North Carolina -- Lee County",
          "North Carolina -- Lenoir County",
          "North Carolina -- Lincoln County",
          "North Carolina -- Macon County",
          "North Carolina -- Madison County",
          "North Carolina -- Martin County",
          "North Carolina -- McDowell County",
          "North Carolina -- Mecklenburg County",
          "North Carolina -- Mitchell County",
          "North Carolina -- Montgomery County",
          "North Carolina -- Moore County",
          "North Carolina -- Nash County",
          "North Carolina -- New Hanover County",
          "North Carolina -- Northampton County",
          "North Carolina -- Onslow County",
          "North Carolina -- Orange County",
          "North Carolina -- Pamlico County",
          "North Carolina -- Pasquotank County",
          "North Carolina -- Pender County",
          "North Carolina -- Perquimans County",
          "North Carolina -- Person County",
          "North Carolina -- Pitt County",
          "North Carolina -- Polk County",
          "North Carolina -- Randolph County",
          "North Carolina -- Richmond County",
          "North Carolina -- Robeson County",
          "North Carolina -- Rockingham County",
          "North Carolina -- Rowan County",
          "North Carolina -- Rutherford County",
          "North Carolina -- Sampson County",
          "North Carolina -- Scotland County",
          "North Carolina -- Stanly County",
          "North Carolina -- Stokes County",
          "North Carolina -- Surry County",
          "North Carolina -- Swain County",
          "North Carolina -- Transylvania County",
          "North Carolina -- Union County",
          "North Carolina -- Vance County",
          "North Carolina -- Wake County",
          "North Carolina -- Warren County",
          "North Carolina -- Washington County",
          "North Carolina -- Watauga County",
          "North Carolina -- Wayne County",
          "North Carolina -- Wilkes County",
          "North Carolina -- Wilson County",
          "North Carolina -- Yadkin County",
          "North Carolina -- Yancey County"],
        "subject_topical_a":["Draper, T. R. (Thomas Richard), 1867-1940",
          "Eddy, E. C. (Ellsworth Curtis), 1882-1969",
          "Felch, Dora Alice, 1882-1959",
          "Felch, Edith E., 1873-1961",
          "Gowdy, M. B.",
          "Hitchcock, J. J. (John Junius), 1875-1940",
          "Holladay, Waller, 1877-1935",
          "Marchant, Frederick, Approximately 1872-1942",
          "Meekins, Victor",
          "Spencer, John E. (John Edward), 1865-1954",
          "Waters, H. Lee (Herbert Lee), 1902-1997",
          "Wootten, Bayard Morgan, 1875-1959",
          "African Americans",
          "History",
          "Agriculture",
          "Factories",
          "Health resorts",
          "Natural disasters",
          "Railroad stations",
          "Real photo postcards",
          "Photomechanical processes",
          "Postcards",
          "Private collections",
          "Streets"],
        "publication_year_sort":"1905",
        "subject_headings_a":["Draper, T. R. (Thomas Richard), 1867-1940",
          "Eddy, E. C. (Ellsworth Curtis), 1882-1969",
          "Felch, Dora Alice, 1882-1959",
          "Felch, Edith E., 1873-1961",
          "Gowdy, M. B.",
          "Hitchcock, J. J. (John Junius), 1875-1940",
          "Holladay, Waller, 1877-1935",
          "Marchant, Frederick, Approximately 1872-1942",
          "Meekins, Victor",
          "Spencer, John E. (John Edward), 1865-1954",
          "Waters, H. Lee (Herbert Lee), 1902-1997",
          "Wootten, Bayard Morgan, 1875-1959",
          "1900-1999",
          "African Americans -- History",
          "Agriculture",
          "Factories",
          "Health resorts",
          "Natural disasters",
          "Railroad stations",
          "Real photo postcards -- 20th century",
          "African Americans",
          "Photomechanical processes -- 20th century",
          "Postcards -- 20th century",
          "Postcards",
          "Postcards -- Private collections",
          "Real photo postcards",
          "Streets",
          "Alamance County (N.C.) -- Pictorial works",
          "Alexander County (N.C.) -- Pictorial works",
          "Alleghany County (N.C.) -- Pictorial works",
          "Anson County (N.C.) -- Pictorial works",
          "Ashe County (N.C.) -- Pictorial works",
          "Avery County (N.C.) -- Pictorial works",
          "Beaufort County (N.C.) -- Pictorial works",
          "Bertie County (N.C.) -- Pictorial works",
          "Bladen County (N.C.) -- Pictorial works",
          "Brunswick County (N.C.) -- Pictorial works",
          "Buncombe County (N.C.) -- Pictorial works",
          "Burke County (N.C.) -- Pictorial works",
          "Cabarrus County (N.C.) -- Pictorial works",
          "Caldwell County (N.C.) -- Pictorial works",
          "Camden County (N.C.) -- Pictorial works",
          "Carteret County (N.C.) -- Pictorial works",
          "Caswell County (N.C.) -- Pictorial works",
          "Catawba County (N.C.) -- Pictorial works",
          "Chatham County (N.C.) -- Pictorial works",
          "Cherokee County (N.C.) -- Pictorial works",
          "Chowan County (N.C.) -- Pictorial works",
          "Clay County (N.C.) -- Pictorial works",
          "Cleveland County (N.C.) -- Pictorial works",
          "Columbus County (N.C.) -- Pictorial works",
          "Craven County (N.C.) -- Pictorial works",
          "Cumberland County (N.C.) -- Pictorial works",
          "Currituck County (N.C.) -- Pictorial works",
          "Dare County (N.C.) -- Pictorial works",
          "Davidson County (N.C.) -- Pictorial works",
          "Davie County (N.C.) -- Pictorial works",
          "Duplin County (N.C.) -- Pictorial works",
          "Durham County (N.C.) -- Pictorial works",
          "Edgecombe County (N.C.) -- Pictorial works",
          "Forsyth County (N.C.) -- Pictorial works",
          "Franklin County (N.C.) -- Pictorial works",
          "Gaston County (N.C.) -- Pictorial works",
          "Gates County (N.C.) -- Pictorial works",
          "Graham County (N.C.) -- Pictorial works",
          "Granville County (N.C.) -- Pictorial works",
          "Greene County (N.C.) -- Pictorial works",
          "Guilford County (N.C.) -- Pictorial works",
          "Halifax County (N.C.) -- Pictorial works",
          "Harnett County (N.C.) -- Pictorial works",
          "Haywood County (N.C.) -- Pictorial works",
          "Henderson County (N.C.) -- Pictorial works",
          "Hertford County (N.C.) -- Pictorial works",
          "Hoke County (N.C.) -- Pictorial works",
          "Hyde County (N.C.) -- Pictorial works",
          "Iredell County (N.C.) -- Pictorial works",
          "Jackson County (N.C.) -- Pictorial works",
          "Johnston County (N.C.) -- Pictorial works",
          "Jones County (N.C.) -- Pictorial works",
          "Lee County (N.C.) -- Pictorial works",
          "Lenoir County (N.C.) -- Pictorial works",
          "Lincoln County (N.C.) -- Pictorial works",
          "Macon County (N.C.) -- Pictorial works",
          "Madison County (N.C.) -- Pictorial works",
          "Martin County (N.C.) -- Pictorial works",
          "McDowell County (N.C.) -- Pictorial works",
          "Mecklenburg County (N.C.) -- Pictorial works",
          "Mitchell County (N.C.) -- Pictorial works",
          "Montgomery County (N.C.) -- Pictorial works",
          "Moore County (N.C.) -- Pictorial works",
          "Nash County (N.C.) -- Pictorial works",
          "New Hanover County (N.C.) -- Pictorial works",
          "Northampton County (N.C.) -- Pictorial works",
          "Onslow County (N.C.) -- Pictorial works",
          "Orange County (N.C.) -- Pictorial works",
          "Pamlico County (N.C.) -- Pictorial works",
          "Pasquotank County (N.C.) -- Pictorial works",
          "Pender County (N.C.) -- Pictorial works",
          "Perquimans County (N.C.) -- Pictorial works",
          "Person County (N.C.) -- Pictorial works",
          "Pitt County (N.C.) -- Pictorial works",
          "Polk County (N.C.) -- Pictorial works",
          "Randolph County (N.C.) -- Pictorial works",
          "Richmond County (N.C.) -- Pictorial works",
          "Robeson County (N.C.) -- Pictorial works",
          "Rockingham County (N.C.) -- Pictorial works",
          "Rowan County (N.C.) -- Pictorial works",
          "Rutherford County (N.C.) -- Pictorial works",
          "Sampson County (N.C.) -- Pictorial works",
          "Scotland County (N.C.) -- Pictorial works",
          "Stanly County (N.C.) -- Pictorial works",
          "Stokes County (N.C.) -- Pictorial works",
          "Surry County (N.C.) -- Pictorial works",
          "Swain County (N.C.) -- Pictorial works",
          "Transylvania County (N.C.) -- Pictorial works",
          "Union County (N.C.) -- Pictorial works",
          "Vance County (N.C.) -- Pictorial works",
          "Wake County (N.C.) -- Pictorial works",
          "Warren County (N.C.) -- Pictorial works",
          "Washington County (N.C.) -- Pictorial works",
          "Watauga County (N.C.) -- Pictorial works",
          "Wayne County (N.C.) -- Pictorial works",
          "Wilkes County (N.C.) -- Pictorial works",
          "Wilson County (N.C.) -- Pictorial works",
          "Yadkin County (N.C.) -- Pictorial works",
          "Yancey County (N.C.) -- Pictorial works",
          "North Carolina",
          "North Carolina -- Alamance County",
          "North Carolina -- Alexander County",
          "North Carolina -- Alleghany County",
          "North Carolina -- Anson County",
          "North Carolina -- Ashe County",
          "North Carolina -- Avery County",
          "North Carolina -- Beaufort County",
          "North Carolina -- Bertie County",
          "North Carolina -- Bladen County",
          "North Carolina -- Brunswick County",
          "North Carolina -- Buncombe County",
          "North Carolina -- Burke County",
          "North Carolina -- Cabarrus County",
          "North Carolina -- Caldwell County",
          "North Carolina -- Camden County",
          "North Carolina -- Carteret County",
          "North Carolina -- Caswell County",
          "North Carolina -- Catawba County",
          "North Carolina -- Chatham County",
          "North Carolina -- Cherokee County",
          "North Carolina -- Chowan County",
          "North Carolina -- Clay County",
          "North Carolina -- Cleveland County",
          "North Carolina -- Columbus County",
          "North Carolina -- Craven County",
          "North Carolina -- Cumberland County",
          "North Carolina -- Currituck County",
          "North Carolina -- Dare County",
          "North Carolina -- Davidson County",
          "North Carolina -- Davie County",
          "North Carolina -- Duplin County",
          "North Carolina -- Durham County",
          "North Carolina -- Edgecombe County",
          "North Carolina -- Forsyth County",
          "North Carolina -- Franklin County",
          "North Carolina -- Gaston County",
          "North Carolina -- Gates County",
          "North Carolina -- Graham County",
          "North Carolina -- Granville County",
          "North Carolina -- Greene County",
          "North Carolina -- Guilford County",
          "North Carolina -- Halifax County",
          "North Carolina -- Harnett County",
          "North Carolina -- Haywood County",
          "North Carolina -- Henderson County",
          "North Carolina -- Hertford County",
          "North Carolina -- Hoke County",
          "North Carolina -- Hyde County",
          "North Carolina -- Iredell County",
          "North Carolina -- Jackson County",
          "North Carolina -- Johnston County",
          "North Carolina -- Jones County",
          "North Carolina -- Lee County",
          "North Carolina -- Lenoir County",
          "North Carolina -- Lincoln County",
          "North Carolina -- Macon County",
          "North Carolina -- Madison County",
          "North Carolina -- Martin County",
          "North Carolina -- McDowell County",
          "North Carolina -- Mecklenburg County",
          "North Carolina -- Mitchell County",
          "North Carolina -- Montgomery County",
          "North Carolina -- Moore County",
          "North Carolina -- Nash County",
          "North Carolina -- New Hanover County",
          "North Carolina -- Northampton County",
          "North Carolina -- Onslow County",
          "North Carolina -- Orange County",
          "North Carolina -- Pamlico County",
          "North Carolina -- Pasquotank County",
          "North Carolina -- Pender County",
          "North Carolina -- Perquimans County",
          "North Carolina -- Person County",
          "North Carolina -- Pitt County",
          "North Carolina -- Polk County",
          "North Carolina -- Randolph County",
          "North Carolina -- Richmond County",
          "North Carolina -- Robeson County",
          "North Carolina -- Rockingham County",
          "North Carolina -- Rowan County",
          "North Carolina -- Rutherford County",
          "North Carolina -- Sampson County",
          "North Carolina -- Scotland County",
          "North Carolina -- Stanly County",
          "North Carolina -- Stokes County",
          "North Carolina -- Surry County",
          "North Carolina -- Swain County",
          "North Carolina -- Transylvania County",
          "North Carolina -- Union County",
          "North Carolina -- Vance County",
          "North Carolina -- Wake County",
          "North Carolina -- Warren County",
          "North Carolina -- Washington County",
          "North Carolina -- Watauga County",
          "North Carolina -- Wayne County",
          "North Carolina -- Wilkes County",
          "North Carolina -- Wilson County",
          "North Carolina -- Yadkin County",
          "North Carolina -- Yancey County"],
        "note_related_work_a":["Related materials: See also North Carolina Postcard Collection (#P0052) in the North Carolina Collection Photographic Archives, University of North Carolina at Chapel Hill"],
        "location_hierarchy_a":["unc",
          "unc:uncnorn",
          "unc:uncwil",
          "unc:uncwil:uncwilncc"],
        "record_data_source_a":["ILSMARC",
          "EAD"],
        "subject_geographic_a":["Alamance County",
          "Alexander County",
          "Alleghany County",
          "Anson County",
          "Ashe County",
          "Avery County",
          "Beaufort County",
          "Bertie County",
          "Bladen County",
          "Brunswick County",
          "Buncombe County",
          "Burke County",
          "Cabarrus County",
          "Caldwell County",
          "Camden County",
          "Carteret County",
          "Caswell County",
          "Catawba County",
          "Chatham County",
          "Cherokee County",
          "Chowan County",
          "Clay County",
          "Cleveland County",
          "Columbus County",
          "Craven County",
          "Cumberland County",
          "Currituck County",
          "Dare County",
          "Davidson County",
          "Davie County",
          "Duplin County",
          "Durham County",
          "Edgecombe County",
          "Forsyth County",
          "Franklin County",
          "Gaston County",
          "Gates County",
          "Graham County",
          "Granville County",
          "Greene County",
          "Guilford County",
          "Halifax County",
          "Harnett County",
          "Haywood County",
          "Henderson County",
          "Hertford County",
          "Hoke County",
          "Hyde County",
          "Iredell County",
          "Jackson County",
          "Johnston County",
          "Jones County",
          "Lee County",
          "Lenoir County",
          "Lincoln County",
          "Macon County",
          "Madison County",
          "Martin County",
          "McDowell County",
          "Mecklenburg County",
          "Mitchell County",
          "Montgomery County",
          "Moore County",
          "Nash County",
          "New Hanover County",
          "Northampton County",
          "Onslow County",
          "Orange County",
          "Pamlico County",
          "Pasquotank County",
          "Pender County",
          "Perquimans County",
          "Person County",
          "Pitt County",
          "Polk County",
          "Randolph County",
          "Richmond County",
          "Robeson County",
          "Rockingham County",
          "Rowan County",
          "Rutherford County",
          "Sampson County",
          "Scotland County",
          "Stanly County",
          "Stokes County",
          "Surry County",
          "Swain County",
          "Transylvania County",
          "Union County",
          "Vance County",
          "Wake County",
          "Warren County",
          "Washington County",
          "Watauga County",
          "Wayne County",
          "Wilkes County",
          "Wilson County",
          "Yadkin County",
          "Yancey County",
          "Alamance County (N.C.)",
          "Alexander County (N.C.)",
          "Alleghany County (N.C.)",
          "Anson County (N.C.)",
          "Ashe County (N.C.)",
          "Avery County (N.C.)",
          "Beaufort County (N.C.)",
          "Bertie County (N.C.)",
          "Bladen County (N.C.)",
          "Brunswick County (N.C.)",
          "Buncombe County (N.C.)",
          "Burke County (N.C.)",
          "Cabarrus County (N.C.)",
          "Caldwell County (N.C.)",
          "Camden County (N.C.)",
          "Carteret County (N.C.)",
          "Caswell County (N.C.)",
          "Catawba County (N.C.)",
          "Chatham County (N.C.)",
          "Cherokee County (N.C.)",
          "Chowan County (N.C.)",
          "Clay County (N.C.)",
          "Cleveland County (N.C.)",
          "Columbus County (N.C.)",
          "Craven County (N.C.)",
          "Cumberland County (N.C.)",
          "Currituck County (N.C.)",
          "Dare County (N.C.)",
          "Davidson County (N.C.)",
          "Davie County (N.C.)",
          "Duplin County (N.C.)",
          "Durham County (N.C.)",
          "Edgecombe County (N.C.)",
          "Forsyth County (N.C.)",
          "Franklin County (N.C.)",
          "Gaston County (N.C.)",
          "Gates County (N.C.)",
          "Graham County (N.C.)",
          "Granville County (N.C.)",
          "Greene County (N.C.)",
          "Guilford County (N.C.)",
          "Halifax County (N.C.)",
          "Harnett County (N.C.)",
          "Haywood County (N.C.)",
          "Henderson County (N.C.)",
          "Hertford County (N.C.)",
          "Hoke County (N.C.)",
          "Hyde County (N.C.)",
          "Iredell County (N.C.)",
          "Jackson County (N.C.)",
          "Johnston County (N.C.)",
          "Jones County (N.C.)",
          "Lee County (N.C.)",
          "Lenoir County (N.C.)",
          "Lincoln County (N.C.)",
          "Macon County (N.C.)",
          "Madison County (N.C.)",
          "Martin County (N.C.)",
          "McDowell County (N.C.)",
          "Mecklenburg County (N.C.)",
          "Mitchell County (N.C.)",
          "Montgomery County (N.C.)",
          "Moore County (N.C.)",
          "Nash County (N.C.)",
          "New Hanover County (N.C.)",
          "Northampton County (N.C.)",
          "Onslow County (N.C.)",
          "Orange County (N.C.)",
          "Pamlico County (N.C.)",
          "Pasquotank County (N.C.)",
          "Pender County (N.C.)",
          "Perquimans County (N.C.)",
          "Person County (N.C.)",
          "Pitt County (N.C.)",
          "Polk County (N.C.)",
          "Randolph County (N.C.)",
          "Richmond County (N.C.)",
          "Robeson County (N.C.)",
          "Rockingham County (N.C.)",
          "Rowan County (N.C.)",
          "Rutherford County (N.C.)",
          "Sampson County (N.C.)",
          "Scotland County (N.C.)",
          "Stanly County (N.C.)",
          "Stokes County (N.C.)",
          "Surry County (N.C.)",
          "Swain County (N.C.)",
          "Transylvania County (N.C.)",
          "Union County (N.C.)",
          "Vance County (N.C.)",
          "Wake County (N.C.)",
          "Warren County (N.C.)",
          "Washington County (N.C.)",
          "Watauga County (N.C.)",
          "Wayne County (N.C.)",
          "Wilkes County (N.C.)",
          "Wilson County (N.C.)",
          "Yadkin County (N.C.)",
          "Yancey County (N.C.)",
          "North Carolina"],
        "call_number_schemes_a":["ALPHANUM"],
        "origin_place_search_a":["North Carolina",
          "United States"],
        "physical_description_a":["7834 items (8.75 linear feet)"],
        "subject_chronological_a":["1900-1999",
          "20th century",
          "Twentieth century (dates CE)"],
        "note_access_restrictions_a":["Access to streaming audio materials may be restricted to researchers who can authenticate with an ONYEN or who are physically present on campus. For further information about access to streaming audiovisual materials, contact Research and Instructional Services staff at Wilsonlibrary@unc.edu"],
        "index_date":"2024-02-13T04:06:45Z"},
      {
        "id":"UNCb2448694",
        "url_a":["{\"href\":\"http://finding-aids.lib.unc.edu/20002/\",\"type\":\"findingaid\",\"note\":\"Finding aid\",\"restricted\":\"false\"}"],
        "items_a":["{\"item_id\":\"i3512769\",\"loc_b\":\"wadb\",\"loc_n\":\"wadb\",\"status\":\"In-Library Use Only\",\"call_no\":\"20002\",\"cn_scheme\":\"ALPHANUM\"}"],
        "author_suggest":["Green, Archie"],
        "names_a":["{\"name\":\"Green, Archie\",\"type\":\"creator\",\"id\":\"https://id.loc.gov/authorities/names/n91101529\"}"],
        "owner_a":["unc"],
        "language_a":["English"],
        "local_id":"b2448694",
        "available_a":["Available"],
        "rollup_id":"OCLC26661042",
        "note_local_a":["Source of acquisition: Acquired 1989-2010."],
        "title_suggest":["Archie Green collection, 1944-2009."],
        "title_main":"Archie Green collection, 1944-2009.",
        "title_sort_ssort_single":"archie green collection 1944 2009",
        "access_type_a":["At the Library"],
        "institution_a":["unc"],
        "oclc_number_old_a":["36142733",
          "36142737",
          "36142739"],
        "oclc_number":"26661042",
        "creator_main_a":["Green, Archie"],
        "note_general_a":["In the Southern Folklife Collection, Library of the University of North Carolina at Chapel Hill (#20002)."],
        "primary_oclc_a":["26661042"],
        "resource_type_a":["Archival and manuscript material"],
        "shelf_numbers_a":["20002"],
        "subject_genre_a":["Songs and music",
          "Folklore",
          "Discography",
          "Catalogs",
          "Country music",
          "Discographies",
          "History"],
        "date_cataloged":"2022-11-22T05:00:00Z",
        "genre_headings_a":["Songs and music",
          "Folklore",
          "Discography",
          "Catalogs",
          "Country music",
          "Discographies",
          "History"],
        "subject_suggest":["Songs and music",
          "Folklore",
          "Discography",
          "Catalogs",
          "Country music",
          "Discographies",
          "History",
          "Benton, Tom",
          "Carson, Fiddlin' John, 1868-1949",
          "Chestnut, Ted, 1909-",
          "Covarrubias, Miguel, 1904-1957",
          "Cohen, Norm, 1936-",
          "Daniels, Harlan",
          "Chaplin, Ralph, 1887-1961",
          "Earle, Eugene",
          "Dixon, Dorsey, 1897-1968",
          "Edwards, John, 1932-1960",
          "Edwards, Irene",
          "Garland, Jim, 1905-1978",
          "Gladstone, Joe",
          "Glazer, Joe",
          "Green, Archie",
          "Greenway, John",
          "Gunning, Sarah Ogan, 1910-1983",
          "Jabbour, Alan",
          "Hand, Wayland D. (Wayland Debs), 1907-1986",
          "Hoeptner, Fred, 1934-",
          "Hill, Joe, 1879-1915",
          "Jackson, Aunt Molly",
          "Kazee, Buell, 1900-1976",
          "Jenkins, Andrew",
          "Kitchens, Freeman",
          "Jones, Mother, 1837-1930",
          "Martin, Asa, 1900-1979",
          "Leadbelly, 1885-1949",
          "Mayfield, Doris",
          "Kincaid, Bradley",
          "Mayfield, Lyle",
          "McCallum, Brenda",
          "McCarn, Dave, 1905-1964",
          "Martin, Preston",
          "McGhee, Brownie, 1915-1996",
          "McMichen, Clayton, 1900-1970",
          "Neuhaus, John, 1904-1958",
          "McCulloh, Judith, 1935-2014",
          "Ohrlin, Glenn, 1926-2015",
          "Mers, Gilbert, 1908-",
          "Rinzer, Ralph",
          "Noble, John, 1874-1934",
          "Réthi, Lili, 1894-1969",
          "Roberts, Fiddlin' Doc, 1897-1978",
          "Reuss, Richard A.",
          "Robinson, Earl",
          "Scruggs, Earl",
          "Seeger, Mike, 1933-2009",
          "Spain, Irene",
          "Stekert, Ellen Jane, 1935-",
          "Stoneman, Ernest V.",
          "Tamony, Peter, 1902-1985",
          "Travis, Merle",
          "Walsh, Dock",
          "Whitter, Henry, 1892-1941",
          "Whisnant, David E., 1938-",
          "Wilgus, D. K.",
          "AFL-CIO",
          "American Folklife Center",
          "American Folklore Society",
          "Archive of Folk Song (U.S.)",
          "Association for Recorded Sound Collections",
          "Carter Family (Musical group)",
          "Folkways Records",
          "Archie Green Fund for Labor Culture & History",
          "Hillbillies (Musical group)",
          "Industrial Workers of the World",
          "Institute for Folk Culture",
          "John Edwards Memorial Foundation",
          "San Francisco State University. Labor Archives Research Center",
          "Stanley Brothers",
          "University of Illinois at Urbana-Champaign. Campus Folksong Club",
          "University of Illinois at Urbana-Champaign. Institute of Labor and Industrial Relations",
          "University of Illinois at Urbana-Champaign. Professional Union",
          "University of North Carolina at Chapel Hill. Curriculum in Folklore",
          "University of Texas at Austin",
          "Berkeley Folk Music Festival",
          "Festival of American Folklife",
          "Newport Folk Festival",
          "University of Chicago Folk Festival",
          "Sunny side sentinel",
          "Talking machine world",
          "Homestead Strike (Homestead, Pennsylvania : 1892)",
          "1892",
          "Applied folklore",
          "Cannery workers -- Songs and music",
          "Carpenters -- Labor unions",
          "Centralia Massacre, Centralia, Wash., 1915",
          "Collective bargaining -- College teachers -- United States",
          "Country musicians -- United States",
          "Cowboys -- Songs and music",
          "Folk art",
          "Folk festivals -- United States",
          "Folk music -- United States",
          "Folk singers -- United States",
          "Folklore -- Government policy -- United States",
          "Folklore -- Societies, etc",
          "Folklore -- Study and teaching -- United States",
          "Folklorists -- United States",
          "Historic sites -- California -- San Francisco",
          "Historic sites -- United States",
          "Homestead Strike, Homestead, Pa., 1892",
          "Iron and steel workers",
          "John Henry (Lendendary character)",
          "Labor -- Folklore",
          "Labor -- History",
          "Labor -- Songs and music",
          "Loggers",
          "Millwrights",
          "Miners -- Songs and music",
          "Music festivals -- United States",
          "Music -- Discography",
          "Oil industry workers -- Songs and music",
          "Old-time music",
          "Pile drivers",
          "Public folklore -- United States",
          "Railroads -- Songs and music",
          "Record labels",
          "Sailors",
          "Sheet-metal work",
          "Shipwrights",
          "Sound recordings -- Catalogs",
          "Sound recordings -- Collectors and collecting",
          "Stevedores -- Labor unions",
          "Stevedores -- Songs and music",
          "Textile workers -- Songs and music",
          "Wheatland Hop Riot, Wheatland, Calif., 1913",
          "Shipbuilders",
          "Working class -- Songs and music",
          "Foresters",
          "Navigators",
          "Seamen",
          "Cannery workers",
          "Collective bargaining -- College teachers",
          "Country musicians",
          "Cowboys",
          "Folk festivals",
          "Folk music",
          "Folk singers",
          "Folklore -- Government policy",
          "Folklorists",
          "Historic sites",
          "Labor",
          "Miners",
          "Music",
          "Music festivals",
          "Oil industry workers",
          "Public folklore",
          "Railroads",
          "Sound recordings",
          "Stevedores",
          "Textile workers",
          "Working class",
          "California -- San Francisco",
          "Tennessee-Tombigbee Waterway (Ala. and Miss.)",
          "Pennsylvania -- Homestead",
          "United States",
          "United States -- Tennessee-Tombigbee Waterway"],
        "subject_topical_a":["Benton, Tom",
          "Carson, Fiddlin' John, 1868-1949",
          "Chestnut, Ted, 1909-",
          "Covarrubias, Miguel, 1904-1957",
          "Cohen, Norm, 1936-",
          "Daniels, Harlan",
          "Chaplin, Ralph, 1887-1961",
          "Earle, Eugene",
          "Dixon, Dorsey, 1897-1968",
          "Edwards, John, 1932-1960",
          "Edwards, Irene",
          "Garland, Jim, 1905-1978",
          "Gladstone, Joe",
          "Glazer, Joe",
          "Green, Archie",
          "Greenway, John",
          "Gunning, Sarah Ogan, 1910-1983",
          "Jabbour, Alan",
          "Hand, Wayland D. (Wayland Debs), 1907-1986",
          "Hoeptner, Fred, 1934-",
          "Hill, Joe, 1879-1915",
          "Jackson, Aunt Molly",
          "Kazee, Buell, 1900-1976",
          "Jenkins, Andrew",
          "Kitchens, Freeman",
          "Jones, Mother, 1837-1930",
          "Martin, Asa, 1900-1979",
          "Leadbelly, 1885-1949",
          "Mayfield, Doris",
          "Kincaid, Bradley",
          "Mayfield, Lyle",
          "McCallum, Brenda",
          "McCarn, Dave, 1905-1964",
          "Martin, Preston",
          "McGhee, Brownie, 1915-1996",
          "McMichen, Clayton, 1900-1970",
          "Neuhaus, John, 1904-1958",
          "McCulloh, Judith, 1935-2014",
          "Ohrlin, Glenn, 1926-2015",
          "Mers, Gilbert, 1908-",
          "Rinzer, Ralph",
          "Noble, John, 1874-1934",
          "Réthi, Lili, 1894-1969",
          "Roberts, Fiddlin' Doc, 1897-1978",
          "Reuss, Richard A.",
          "Robinson, Earl",
          "Scruggs, Earl",
          "Seeger, Mike, 1933-2009",
          "Spain, Irene",
          "Stekert, Ellen Jane, 1935-",
          "Stoneman, Ernest V.",
          "Tamony, Peter, 1902-1985",
          "Travis, Merle",
          "Walsh, Dock",
          "Whitter, Henry, 1892-1941",
          "Whisnant, David E., 1938-",
          "Wilgus, D. K.",
          "AFL-CIO",
          "American Folklife Center",
          "American Folklore Society",
          "Archive of Folk Song (U.S.)",
          "Association for Recorded Sound Collections",
          "Carter Family (Musical group)",
          "Folkways Records",
          "Archie Green Fund for Labor Culture & History",
          "Hillbillies (Musical group)",
          "Industrial Workers of the World",
          "Institute for Folk Culture",
          "John Edwards Memorial Foundation",
          "San Francisco State University. Labor Archives Research Center",
          "Stanley Brothers",
          "University of Illinois at Urbana-Champaign. Campus Folksong Club",
          "University of Illinois at Urbana-Champaign. Institute of Labor and Industrial Relations",
          "University of Illinois at Urbana-Champaign. Professional Union",
          "University of North Carolina at Chapel Hill. Curriculum in Folklore",
          "University of Texas at Austin",
          "Berkeley Folk Music Festival",
          "Festival of American Folklife",
          "Newport Folk Festival",
          "University of Chicago Folk Festival",
          "Sunny side sentinel",
          "Talking machine world",
          "Homestead Strike (Homestead, Pennsylvania : 1892)",
          "Applied folklore",
          "Cannery workers",
          "Carpenters",
          "Labor unions",
          "Centralia Massacre, Centralia, Wash., 1915",
          "Collective bargaining",
          "College teachers",
          "Country musicians",
          "Cowboys",
          "Folk art",
          "Folk festivals",
          "Folk music",
          "Folk singers",
          "Folklore",
          "Government policy",
          "Societies, etc",
          "Study and teaching",
          "Folklorists",
          "Historic sites",
          "Homestead Strike, Homestead, Pa., 1892",
          "Iron and steel workers",
          "John Henry (Lendendary character)",
          "Labor",
          "History",
          "Loggers",
          "Millwrights",
          "Miners",
          "Music festivals",
          "Music",
          "Oil industry workers",
          "Old-time music",
          "Pile drivers",
          "Public folklore",
          "Railroads",
          "Record labels",
          "Sailors",
          "Sheet-metal work",
          "Shipwrights",
          "Sound recordings",
          "Collectors and collecting",
          "Stevedores",
          "Textile workers",
          "Wheatland Hop Riot, Wheatland, Calif., 1913",
          "Shipbuilders",
          "Working class",
          "Foresters",
          "Navigators",
          "Seamen"],
        "publication_year_sort":"1944",
        "subject_headings_a":["Benton, Tom",
          "Carson, Fiddlin' John, 1868-1949",
          "Chestnut, Ted, 1909-",
          "Covarrubias, Miguel, 1904-1957",
          "Cohen, Norm, 1936-",
          "Daniels, Harlan",
          "Chaplin, Ralph, 1887-1961",
          "Earle, Eugene",
          "Dixon, Dorsey, 1897-1968",
          "Edwards, John, 1932-1960",
          "Edwards, Irene",
          "Garland, Jim, 1905-1978",
          "Gladstone, Joe",
          "Glazer, Joe",
          "Green, Archie",
          "Greenway, John",
          "Gunning, Sarah Ogan, 1910-1983",
          "Jabbour, Alan",
          "Hand, Wayland D. (Wayland Debs), 1907-1986",
          "Hoeptner, Fred, 1934-",
          "Hill, Joe, 1879-1915",
          "Jackson, Aunt Molly",
          "Kazee, Buell, 1900-1976",
          "Jenkins, Andrew",
          "Kitchens, Freeman",
          "Jones, Mother, 1837-1930",
          "Martin, Asa, 1900-1979",
          "Leadbelly, 1885-1949",
          "Mayfield, Doris",
          "Kincaid, Bradley",
          "Mayfield, Lyle",
          "McCallum, Brenda",
          "McCarn, Dave, 1905-1964",
          "Martin, Preston",
          "McGhee, Brownie, 1915-1996",
          "McMichen, Clayton, 1900-1970",
          "Neuhaus, John, 1904-1958",
          "McCulloh, Judith, 1935-2014",
          "Ohrlin, Glenn, 1926-2015",
          "Mers, Gilbert, 1908-",
          "Rinzer, Ralph",
          "Noble, John, 1874-1934",
          "Réthi, Lili, 1894-1969",
          "Roberts, Fiddlin' Doc, 1897-1978",
          "Reuss, Richard A.",
          "Robinson, Earl",
          "Scruggs, Earl",
          "Seeger, Mike, 1933-2009",
          "Spain, Irene",
          "Stekert, Ellen Jane, 1935-",
          "Stoneman, Ernest V.",
          "Tamony, Peter, 1902-1985",
          "Travis, Merle",
          "Walsh, Dock",
          "Whitter, Henry, 1892-1941",
          "Whisnant, David E., 1938-",
          "Wilgus, D. K.",
          "AFL-CIO",
          "American Folklife Center",
          "American Folklore Society",
          "Archive of Folk Song (U.S.)",
          "Association for Recorded Sound Collections",
          "Carter Family (Musical group)",
          "Folkways Records",
          "Archie Green Fund for Labor Culture & History",
          "Hillbillies (Musical group)",
          "Industrial Workers of the World",
          "Institute for Folk Culture",
          "John Edwards Memorial Foundation",
          "San Francisco State University. Labor Archives Research Center",
          "Stanley Brothers",
          "University of Illinois at Urbana-Champaign. Campus Folksong Club",
          "University of Illinois at Urbana-Champaign. Institute of Labor and Industrial Relations",
          "University of Illinois at Urbana-Champaign. Professional Union",
          "University of North Carolina at Chapel Hill. Curriculum in Folklore",
          "University of Texas at Austin",
          "Berkeley Folk Music Festival",
          "Festival of American Folklife",
          "Newport Folk Festival",
          "University of Chicago Folk Festival",
          "Sunny side sentinel",
          "Talking machine world",
          "Homestead Strike (Homestead, Pennsylvania : 1892)",
          "1892",
          "Applied folklore",
          "Cannery workers -- Songs and music",
          "Carpenters -- Labor unions",
          "Centralia Massacre, Centralia, Wash., 1915",
          "Collective bargaining -- College teachers -- United States",
          "Country musicians -- United States",
          "Cowboys -- Songs and music",
          "Folk art",
          "Folk festivals -- United States",
          "Folk music -- United States",
          "Folk singers -- United States",
          "Folklore -- Government policy -- United States",
          "Folklore -- Societies, etc",
          "Folklore -- Study and teaching -- United States",
          "Folklorists -- United States",
          "Historic sites -- California -- San Francisco",
          "Historic sites -- United States",
          "Homestead Strike, Homestead, Pa., 1892",
          "Iron and steel workers",
          "John Henry (Lendendary character)",
          "Labor -- Folklore",
          "Labor -- History",
          "Labor -- Songs and music",
          "Loggers",
          "Millwrights",
          "Miners -- Songs and music",
          "Music festivals -- United States",
          "Music -- Discography",
          "Oil industry workers -- Songs and music",
          "Old-time music",
          "Pile drivers",
          "Public folklore -- United States",
          "Railroads -- Songs and music",
          "Record labels",
          "Sailors",
          "Sheet-metal work",
          "Shipwrights",
          "Sound recordings -- Catalogs",
          "Sound recordings -- Collectors and collecting",
          "Stevedores -- Labor unions",
          "Stevedores -- Songs and music",
          "Textile workers -- Songs and music",
          "Wheatland Hop Riot, Wheatland, Calif., 1913",
          "Shipbuilders",
          "Working class -- Songs and music",
          "Foresters",
          "Navigators",
          "Seamen",
          "Cannery workers",
          "Collective bargaining -- College teachers",
          "Country musicians",
          "Cowboys",
          "Folk festivals",
          "Folk music",
          "Folk singers",
          "Folklore -- Government policy",
          "Folklorists",
          "Historic sites",
          "Labor",
          "Miners",
          "Music",
          "Music festivals",
          "Oil industry workers",
          "Public folklore",
          "Railroads",
          "Sound recordings",
          "Stevedores",
          "Textile workers",
          "Working class",
          "California -- San Francisco",
          "Tennessee-Tombigbee Waterway (Ala. and Miss.)",
          "Pennsylvania -- Homestead",
          "United States",
          "United States -- Tennessee-Tombigbee Waterway"],
        "note_related_work_a":["See also John Edwards papers (#20000), John Edwards Memorial Foundation records (#20001), D.K. Wilgus collection (#20003) in the Southern Folklife Collection, University of North Carolina at Chapel Hill."],
        "location_hierarchy_a":["unc",
          "unc:uncsouz",
          "unc:uncwil",
          "unc:uncwil:uncwilsfc"],
        "record_data_source_a":["ILSMARC",
          "EAD"],
        "subject_geographic_a":["United States",
          "California",
          "San Francisco",
          "Homestead",
          "Tennessee-Tombigbee Waterway",
          "Tennessee-Tombigbee Waterway (Ala. and Miss.)",
          "Pennsylvania"],
        "call_number_schemes_a":["ALPHANUM"],
        "origin_place_search_a":["California",
          "United States"],
        "physical_description_a":["approximately 124000 items (277.5 linear ft.)"],
        "subject_chronological_a":["1892"],
        "note_access_restrictions_a":["Use of audio and video materials may require production of listening copies.",
          "Access to streaming audio, video, and film materials may be restricted to researchers who can authenticate with an ONYEN or who are physically present on campus. For further information about access to audio and video materials, contact Research and Instructional Services staff at Wilsonlibrary@unc.edu.",
          "This collection contains additional materials that are not processed and are currently not available to researchers. For information about access to these materials, contact Research and Instructional Services staff. Please be advised that preparing unprocessed materials for access can be a lengthy process."],
        "index_date":"2024-01-26T10:21:37Z",
        "note_summary_a":["Archie Green (1917-2009), a white folklorist, labor historian, and public sector advocate, graduated from the University of California at Berkeley in 1939 and then worked in San Francisco shipyards, served in the United States Navy in World War II, and was active in several labor organizations. He earned an M.L.S. degree from the University of Illinois and a Ph.D. in folklore from the University of Pennsylvania. Green joined the Institute of Labor and Industrial Relations at the University of Illinois at Urbana-Champaign in 1960, where he was librarian and later served also as an instructor in the English Department until 1972. In 1973, Green took on a creative role at the Labor Studies Center in Washington, D.C., in part assisting with the Smithsonian Institution's Festival of American Folklife and labor participation in the Bicentennial celebrations. At the same time, he produced sound recordings, conducted fieldwork, and wrote extensively. He was active in the John Edwards Memorial Foundation and in the movement to establish the Center for American Folklife (1976). Green retired from the University of Texas at Austin in the early 1980s to San Francisco, Calif., where he continued to work collaboratively with many individuals and institutions dedicated to the study of folklore and the preservation of folklife. Archie Green died in March 2009. The collection includes correspondence, subject files, research materials, writings, photographs, audio recordings, moving images, and other materials pertaining chiefly to Green's professional activities, circa 1955-2008. Materials reflect Green's interests in the study of folklore; occupational folklore, with special emphasis on songs relating to textile workers, railroad workers, coal miners, and cowboys; labor history, especially the 1919 riot in Centralia, Wash.; early country (hillbilly) music; sound recording archives; folk musicians; and production and collection of sound recordings. There are also materials relating to Green's research and teaching activities and participation in professional associations, music and folklore festivals, and the faculty labor union at the University of Illinois at Urbana-Champaign. The additions to the papers of Archie Green build on and expand the topical content of the original deposit. Beyond the subjects already described, notable topics represented in these additions include Green's lobbying efforts on behalf of the Citizens' Committee for an American Folklife Foundation (CCAFF) to establish the American Folklife Center; songs relating to oil field, longshore, and cannery workers, and to the Homestead Strike; songs and history of wobblies and the Industrial Workers of the World (I.W.W.); the 1913 Wheatland, Calif., riot; folk art, labor art, and artists, and artists; unions and working culture of shipwrights, pile drivers, millwrights and carpenters, loggers, and maritime, steel, sheetmetal, and timber workers; labor landmarks throughout the United States, but especially in the San Francisco Bay area; the history of federal government support for folk life; the role of public sector/applied folklore in the preservation of folklore and cultural conservation; the Tennessee-Tombigbee Waterway Project; and graphic art representations of folklore and labor themes, including depictions of folk hero John Henry. In these projects, he worked with many folklorists, musicologists, and others. Green collected a wide variety of materials on folk and labor themes, including art and music; newsletters; pamphlets, bibliographies; work songs; work tales; and posters, clippings, and other ephemera. His papers also include the extensive collections of labor lyrics and musical scores and pamphlets on socialism and labor topics from John Neuhaus. Other materials in the additions document Green's teaching career at the University of Texas; his participation in organizations dedicated to the study of labor history and culture, such as the Fund for Labor Culture & History and the San Francisco State University Labor Archives and Research Center; collaboration with John Neuhaus on the \"Big Red Songbook\" and Peter Tamony on etymology of labor slang terms; and a long relationship with the University of North Carolina, where he gave lectures, organized conferences, and led fundraising for the John Edwards Memorial Foundation Fund and an occupational folklore fellowship. There is some documentation of Green's personal finances, especially his budget for books, records, and journals, and some biographical materials. Audio, video, and film recordings from the original deposit and the additions are filed together in Series 10. Audio recordings include field recordings, lectures, live performances, interviews and commercial recordings relating to Archie Green's research on hillbilly music and labor songs, while the video recordings consist of published and unpublished documentary materials relating to laborlore and American vernacular music as well as video from memorial events for Archie Green in 2009. Some of the individuals, organizations, and events represented in this collection appear as access points in the online catalog terms section of this finding aid but researchers are advised to keyword search throughout the finding aid for additional name, place and subject terms"]},
      {
        "id":"UNCb7813872",
        "isbn_number_a":["0881889814",
          "9780881889819"],
        "isbn_qualifying_info_a":["",
          ""],
        "items_a":["{\"item_id\":\"i10380246\",\"loc_b\":\"mmda\",\"loc_n\":\"mmda\",\"status\":\"Available\",\"call_no\":\"M1630.18 .U4 1988 E-flat\",\"cn_scheme\":\"LC\"}"],
        "author_suggest":["Wong, Herb"],
        "names_a":["{\"name\":\"Wong, Herb\",\"type\":\"no_rel\",\"id\":\"https://id.loc.gov/authorities/names/n83175260\"}"],
        "owner_a":["unc"],
        "edition_a":["E♭ ed."],
        "misc_id_a":["Music Publisher Number: 00240081 (Hal Leonard)"],
        "barcodes_a":["00047623589"],
        "language_a":["English"],
        "local_id":"b7813872",
        "note_toc_a":["A felicidade / Antonio Carlos Jobim -- After hours / Avery Parrish -- After you've gone / Creamer and Layton -- Across the alley from the Alamo / Joe Greene -- AC-DC current / Benny Goodman, Lionel Hampton and Charlie Christian -- Afternoon in Paris / John Lewis -- Ah-leu-cha / Charlie Parker -- Ain't misbehavin' / Thomas Waller and Harry Brooks -- Airegin / Sonny Rollins -- Air mail special / Benny Goodman, Charlie Christian and Jimmy Mundy -- All about Ronnie / Joe Greene -- All blues / Miles Davis -- All of me / Seymour Simons and Gerald Marks -- All of you / Cole Porter -- All the things you are / Jerome Kern -- All or nothing at all / Arthur Altman -- Alright, okay, you win / Sid Wyche and Mayme Watts -- Along came Betty / Benny Golson -- Amapola (Pretty little puppy) / Joseph M. Lacalle -- Amazing grace -- Among my souvenirs / Horatio Nicholls -- Angel eyes / Matt Dennis -- Another hairdo / Charlie Parker -- And all that jazz / John Kander -- Apple core / Gerry Mulligan -- Apple honey / Woody Herman -- Aren't you glad you're you / James Van Heusen -- As catch can / Gerry Mulligan -- Au privave / Charlie Parker -- Autumn leaves (Les feuilles mortes) / Joseph Kosma -- Baby, won't you please come home / Charles Warfield and Clarence Williams -- Bags' groove / Milt Jackson -- Bags' new groove / Milt Jackson -- A ballad / Gerry Mulligan -- Barbados / Charlie Parker -- Ballin' the jack / Chris Smith -- A beautiful friendship / Donald Kahn -- Basin street blues / Spencer Williams -- Be-bop / John \"Dizzy\" Gillespie -- Bernie's tune / Bernie Miller -- Bess you is my woman / George Gershwin -- The best is yet to come / Cy Coleman -- The best things in life are free / B.G. DeSylva, Lew Brown and Ray Henderson -- Bewitched / Richard Rodgers -- Big P / Jimmy Heath -- Bill Bailey -- Bird feathers / Charlie Parker -- Birdland / Joe Zawinul -- Billie's bounce (Also know as Bill's bounce) / Charlie Parker -- Birds of a feather / Gerry Mulligan -- The blessing / Ornette Coleman -- Bloomdido / Charlie Parker -- Blue 'n boogie / John \"Dizzy\" Gillespie and Frank Paparelli -- Blue and sentimental / Count Basie, Jerry Livingston and Mack David -- Blue in green / Miles Davis and Bill Evans -- Blue champagne / Grady watts, Frank Ryerson and Jimmy Eaton -- Blue eyes / Miles Davis -- Blueberry hill / Al Lewis, Larry Stock and Vincent Rose -- Blues in the closet / Oscar Pettiford -- Blues in the night / Harold Arlen -- Body and soul / John Green -- (The original) Boogie woogie / Clarence \"Pine top\" Smith -- Bluesette / Jean Thielemans -- Blues for Pablo / Gil Evans -- Boplicity (Bebop lives) / Miles Davis -- Born to be blue / Robert Wells and Mel Torme -- The breeze and I / Ernesto Lecuons -- Bud's blues / Sonny Still -- Budo / Miles Davis and Bud Powell -- Button up your overcoat / B.G. Desylva, Lew Brown and Ray Henderson -- But beautiful / Johnny Burke and James Van Heusen -- Buzzy / Charlie Parker -- Bye bye blackbird / Ray Henderson -- Bye bye blues / Fred Hamm, Dave Bennett, Bert Lown and Chauncey Gray -- Caldonia (What makes your big head so hard?) / Fleecie Moore -- Can't help lovin' dat man / Jerome Kern -- Candy / Mack David, Joan Whitney and Alex Kramer -- C.C. Rider / Chuck Willis -- The Cape Verdean blues / Horace Silver -- Carioca / Vincent Youmans -- Carolina moon / Benny Davis and Joe Burke -- The cat walk / Gerry Mulligan -- Charmaine / Lew Pollack and Erno Rapes -- The champ / Dizzy Gillespie -- Chasing the bird / Charlie Parker -- Chega de saudade (No more blues) / Antonio Carlos Jobim -- Chelsea bridge / Billy Strayhorn -- Cherokee (Indian love song) / Ray Noble -- Cheryl / Charlie Parker -- Choo choo ch'boogie / Vaughn Horton, Denver Darling and Milton Gabler -- The christmas song (Chestnuts roasting on an open fire) / Mel Torme and Robert Wells -- Close as pages in a book / Sigmund Romberg -- Come rain or come shine / Harold Arlen -- Come Sunday / Duke Ellington.",
          "Comes love / Lew Brown, Sam H. Stept and Charlie Tobias -- Confirmation / Charlie Parker -- Count every star / Bruno Coquatrix -- A cottage for sale / Willard Robison -- Crazy rhythm / Joseph Meyer and Roger Wolfe Kahn -- Cute / Stanley Styne -- Cry me a river / Arthur Hamilton -- D.C. farewell / Richie Cole -- Daahoud / C. Brown -- Darn that dream / Jimmy Van Heusen -- A day in the life of a fool (Manha de carnaval) / Luiz Bonfa -- Dewey square / Charlie Parker -- 'Deed I do / Walter Hirsch and Fred Rose -- Dearly beloved / Johnny Mercer -- Desafinado (Slightly out of tune) / Antonio Carlos Jobim -- Dinah / Harry Akst -- Dizzy Atmospher / John \"Dizzy\" Gillespie -- Do nothin' till you hear from me / Duke Ellington -- Django / John Lewis -- Do you know what it means to miss New Orleans / Louis Alter -- Don't let the sun catch you cryin' / Joe Greene -- Don't explain / Billie Holiday -- Don't get around much anymore / Duke Ellington -- Donna Lee / Charlie Parker -- Don't take your love from me / Harry Nemo -- Down by the riverside -- Doodlin' / Horace Silver -- Doxy / Sonny Rollins -- The duke / Dave Brubeck -- The earl / Mel Powell -- East of the sun (And west of the moon) / Brooks Bowman -- Easy to love (from \"Born to Dance\") / Cole Porter -- Early Autumn / Ralph Burns and Woody Herman -- Ecaroh / Horace Silver -- Elsa / Earl Zindars -- The end of a love affair / Edward C. Redding -- Ev'ry time we say goodbye / Cole Porter -- Everybody loves my baby (But my baby don't love nobody but me) / Jack Palmer and Spencer Williams -- Everything happens to me / Matt Dennis -- Everything's coming up roses (From Gypsy) / Jule Styne -- Exactly like you / Jimmy McHugh -- Falling in love with love / Richard Rodgers -- Fever / John Davenport and Eddie Cooley -- Fiesta in blue / Benny Goodman and Jimmy Mundy -- Festive minor / Gerry Mulligan -- A fine romance / Jerome Kern -- Fine and mellow / Billie Holiday -- Flamingo / Ted Grouya -- Fly me to the moon (In other words) / Bart Howard -- Flying home / Benny Goodman and Lionel Hampton -- A foggy day (from \"A damsel in distress\") / George Gershwin -- Fool that I am / Carole Bayer Sager and Bruce Roberts -- Footprints / Wayne Shorter -- For all we know / J. Fred Coots -- For every man there's a woman / Harold Arlen -- Four / Miles Davis -- For sentimental reasons / William Best -- For you, for me, for everyone / George Gershwin -- Four brothers / Jimmie Giuffre -- Four others (Lighthouse) / Jimmy Giuffre -- Frankie and Johnny -- Fried bananas -- Frosty the snow man / Steve Nelson and Jack Rollins -- From this moment on / Cole Porter -- Gee baby, ain't I good to you / Don Redman -- A ghost of a chance / Victor Young -- Getting to know you / Richard Rodgers -- Get out of town / Cole Porter -- God bless' the child / Arthur Herzog Jr. and Billie Holiday -- The girl from Ipanema / Antonio Carlos Jobim -- The glory of love / Billy Hill -- The glow worm / Paul Lincke -- Goin' out of my head / Teddy Randazzo and Boddy Weinstein -- Gone with the wind / Herb Magidson and Allie Wrubel -- Good bait / Tadd Dameron and Count Basie -- The good life / Sacha Distel -- A good man is hard to find / Eddie Green -- Goodbye pork pie hat / Charles Mingus -- Greensleeves -- Groovin' high / John \"Dizzy\" Gillespie -- Guess who I saw today / Murray Grand and Elisse Boyd -- The gypsy / Billy Reed -- Half Nelson / Miles Davis -- Hallelujah I love him (her) so / Ray Charles -- Harold's house of jazz / Richie Cole and David Lahm -- Happy talk / Richard Rodgers -- Have you met Miss Jones? / Richard Rodgers -- Harlem nocturne / Earle Hagen -- Haunted heart / John Green -- Hello, Dolly / Jerry Herman -- Hello, young lovers / Richard Rodgers -- High fly / Randy Weston -- Here's that rainy day / James Van Heusen -- High society / Porter Steele and Walter Melrose.",
          "Honeysuckle rose / Thomas \"Fats\" Waller -- Hooray for love / Harold Arlen -- How high the moon / Morgan Lewis -- How insensitive / Antonio Carlos Jobim -- I can't get started / Vernon Duke -- I can't give you anything but love / Jimmy McHugh -- I concentrate on you / Cole Porter -- I could have danced all night / Frederick Loewe -- I could write a book / Richard Rodgers -- I cover the waterfront / John Green -- I cried for you / Arthur Freed, Gus Arnheim and Abe Lyman -- I didn't know what time it was / Richard Rodgers -- I don't know why / Fred E. Ahlert -- I don't want to set the world on fire / Eddie Seiler, Sol Marcus and Bennie Benjamin -- I got plenty o' nuttin' / George Gershwin -- I left my heart in San Francisco / George Cory -- I love Lucy / Eliot Daniel -- I love Paris / Cole Porter -- I loves you Porgy / George Gershwin -- I love you / Cole Porter -- I remembre Clifford / Benny Golson -- I remember Duke / Leonard Feather -- I remember when (Si tu vois me mere) / Sidney Bechet -- I see you face before me / Arthur Schwartz -- I should care / Sammy Cahn, Alex Stordahl and Paul Weston -- I'll always be in love with you / Bud Green, Herman Ruby and Sam H. Stept -- I will wait for you / Michel Legrand -- I wish you love / Charles Trenet -- I'll be around / Alec Wilder -- I won't dance / Jerome Kern -- I'll be seeing you / Irving Kahai and Sammy Fain -- I'll get by (As long as I have you) / Fred E. Ahlert -- I'll never smile again / Ruth Lowe -- I'll remember April / Don Raye, Gene De Paul and Pat Johnson -- I'm beginning to see the light / Harry James, Duke Ellington, Johnny Hodges and Don George -- I'll take romance / Ben Oakland -- I'll walk alone / Jule Styne -- I'm confessin' that I love you / Doc Daugherty, Al J. Neiburg and Ellis Reynolds -- I'm glad there is you / Jimmy Dorsey -- I'm gonna sit right down and write myself a letter / Fred E. Ahlert -- I'm old fashioned / Johnny Mercer -- I'm sitting on top of the world / Ray Henderson -- I've grown accustomed to her face / Frederick Loewe -- I've got you under my skin / Cole Porter -- If ever I would leave you / Frederick Loewe -- If I were a bell / Frank Loesser -- I've heard that song before / Sammy Cahn and Jule Styne -- Ill wind / Harold Arlen -- Imagination / Jimmy Van Heusen -- In a little Spanish town / Mabel Wayne -- In a silent way / Josef Zawinul -- In the mood / Joe Garland -- In a shanty in old shanty town / Little Jack Little and John Siras -- In the blue of evening / D'Artega -- In the still of the night / Cole Porter -- Indiana / James F. Hanley -- Infant eyes / Wayne Shorter -- Inner space / Chick Corea -- Intermission riff / Ray Wetzel -- It ain't necessarily so / George Gershwin -- It never entered my mind / Lorenz Hart -- Is you is, or is you ain't / Billy Austin and Louis Johnson -- It might as well be spring / Richard Rodgers -- It's a blue world / Bob Wright and Chet Forrest -- It's all right with me / Cole Porter -- It's not for me to say / Robert Allen -- It's magic / Jule Styne -- It's only a paper moon / Harold Arlen -- It's sand, man / Jon Hendricks and Dave Lambert -- It's the talk of the town / Jerry Livingston -- The jazz-me blues / Tom Delaney -- Jelly roll blues / Ferd \"Jelly Roll\" Morton -- Jeru / Miles Davis -- Jeannine / Duke Parson -- Jersey bounce / Bobby Plater, Tiny Bradshaw and Edward Johnson -- Jim / Caesar Petrillo and Milton Samuels -- Jingle-bell rock / Joe Beal and Jim Boothe -- Johnny one note / Richard Rodgers -- Jive at five / Count Basie and Harry Edison -- Johnny's theme / Paul Anka and Johnny Carson -- The joint is jumpin' / Thomas \"Fats\" Waller -- Johnson rag / Guy Hall and Harry Kleinkaut -- Jor du / Duke Jordan -- Juke box Saturday night / Paul McGrane -- Jumpin' with Symphony Sid / Lester Young and Buddy Feyne -- June night / Abel Baer -- June is bustin' out all over / Richard Rodgers -- Just in time / Jule Styne -- Killer Joe / Benny Golson -- Ko Ko / Charlie Parker.",
          "King Porter stomp / Ferdinand \"Jelly Roll\" Morton, Sid Robin and Sonny Burke -- L'il darlin' / Neal Hefti -- The lady is a tramp / Richard Rodgers -- Lands end / Harold Land -- The last time I saw Paris / Jerome Kern -- Laugh! Clown! Laugh! / Ted Florito -- Lester left town / Wayne Shorter -- Lazy afternoon / Jerome Moross -- Lennie's pennies / Lennie Tristano -- Let it snow! Let it snow! Let it snow! / Jule Styne -- Let the good times roll / Leonard Lee -- Let there be love / Lionel Rand -- Let there be you / Vicki Young and Dave Cavanaugh -- Let's call the whole thing off / George Gershwin -- Let's dance / Fanny Baldridge, Gregory Stone and Joseph Bonime -- Life is just a bowl of cherries / Lew Brown and Ray Henderson -- Let's fall in love / Harold Arlen -- Let's get away from it all / Tom Adair and Matt Dennis -- Like someone in love / Johnny Burke and Jimmy Van Heusen -- Limelight / Gerry Mulligan -- Line for lyons / Gerry Mulligan -- Linger awhile / Vincent Rose -- Little boat (O barquinho) / Robert Menescal -- Little brown jug -- Little girl / Madeline Hyde and Francis Henry -- Little girl blue / Richard Rodgers -- Little Niles / Randy Weston -- Little Willy leaps / Miles Davis -- Lonely woman / Horace Silver -- Long ago (and far away) / Jerome Kern -- Look for the silver lining / Jerome Kern -- Lost in the stars / Kurt Weill -- A lot of livin' to do / Charles Strouse -- Louisiana / Fernando Arbex -- Love for sale / Cole Porter -- Love is a simple thing / Arthur Siegel -- Love is here to stay / George Gershwin -- Lullaby of the leaves / Bernice Petkere -- Lush life / Billy Strayhorn -- Lover man (Oh, where can you be?) / Jimmy Davis, Roger \"Ram\" Ramirez and Jimmy Sherman -- Lullaby of Birdland / George Gershwin -- Mad about him, sad without him, how can I be glad without him blues / Larry Markes and Dick Charles -- Love walked in / George Gershwin -- Margie / Con Conrad and J. Russel Robinson -- Mad about the boy / Noel Coward -- Make someone happy / Jule Styne -- Malaguena / Ernesto Lecuona -- Manhattan / Richard Rodgers -- The man that got away / Harold Arlen -- Marmaduke / Charlie Parker -- Mercy, mercy, mercy / Josef Zawinul -- Maple leaf rag / Scott Joplin -- Mean to me / Fred E. Ahlert and Roy Turk -- Meditation / Antonio Carlos Jobim -- Memories of you / Eubie Blake -- Memphis in June / Hoagy Carmichael -- Merry Christmas, baby / Lue Baxter and Johnny Moore -- Merry-go-round / Charlie Parker -- Midnight blue / Carole Bayer Sager and Melissa Manchester -- Midnight sun / Lionel Hampton, Sonny Burke and Johnny Mercer -- Milestones / Miles Davis -- Milenberg joys / Leon Roppolo, Paul Mares and Jelly Roll Morton -- Miles ahead / Miles Davis -- Minor swing / Django Reinhardt and Stephanie Grapelli -- Misty / Erroll Garner -- Mohawk / Charlie Parker -- Moon love / Mack David, Mack Avis and Andre Kostelanetz -- Moon rays / Horace Silver -- Moonglow / Will Hudson, Eddie Delange and Irving Mills -- Moonlight bay / Music by Percy Wenrich -- Moonlight and roses / Ben Black and Neil Moret -- Moonlight on the ganges / Sherman Myers -- Moonlight in Vermont / Karl Suessdorf -- Moonlight cocktail / Lucky Roberts and Kim Gannon -- Moose the mooche / Charlie Parker -- More (Theme from Mondo Cane) / Riz Ortolani and Nino Oliviero -- More than you know / Vincent Youmans -- My funny valentine / Richard Rodgers -- My favorite things / Richard Rodgers -- My foolish heart / Victor Young -- Moten swing / Buster and Bennie Moten -- My heart belongs to Daddy / Cole Porter -- My little suede shoes / Charlie Parker -- My Monday date / Sid Robin -- My man's gone now / George Gershwin -- My melancholy baby / Ernie Burnett -- My one and only love / Guy Wood -- My prayer / Jimmy Kennedy -- My shining hour / Harold Arlen -- My romance (from Jumbo) / Richard Rodgers -- My ship / Kurt Weill.",
          "Nardis / Miles Davis and Bill Evans -- Nefertiti / Wayne Shorter -- Nevertheless (I'm in love with you) / Bert Kaimer and Harry Ruby -- The \"New Frankie and Johnny\" song / Shel Silverstein and Bob Gibson -- Nica's dream / Horace Silver -- Nice work if you can get it / George Gershwin -- New York afternoon / Richie Cole -- A nightingale sang in Berkeley square / Manning Sherwin -- A night in Tunisia / John \"Dizzy\" Gillespie and Frank Paparelli -- 9:20 special / Bill Engvick and Earl Warren -- Nippon soul / Julian Adderley -- No moon at all / Reed Evans and Dave Mann -- None but the lonely heart / Mack David, Al Hoffman and Jerry Livingston -- Now he sings, now he sobs / Chick Corea -- Now's the time / Charlie Parker -- Oh! Look at me now / Joe Bushkin -- Oh! What it seemed to be / Bennie Benjamin, George Weiss and Frankie Carle -- Oh, what a beautiful mornin' (from \"Oklahoma\") / Richard Rodgers -- Ol' man river / Jerome Kern -- Oh! You beautiful doll / Nat D. Ayer -- Old devil moon / Burton Lane -- On a clear day (You can see forever) / Burton Lane -- Oleo / Sonny Rollins -- On a little street in Singapore / Peter DeRose -- On the street where you live / Frederick Loewe -- On a slow boat to China / Frank Loesser -- On the sunny side of the street / Jimmy McHugh -- Once upon a summertime / Eddie Barclay and Michel Legrand -- One mint julep / Rudolph Toombs -- One note samba / Antonio Carlos Jobim -- Open country / Jane Feather -- Opus one / Sy Oliver -- One by one / Wayne Shorter -- Orchids in the moonlight / Vincent Youmans -- The organ grinder / Woody Shaw -- Ornithology / Charlie Parker -- Out to lunch / Eric Dolphy -- Paper doll / Johnny S. Black -- Parker's mood / Charlie Parker -- The party's over / Jule Styne -- Paul's pal / Sonny Rollins -- Pennies from heaven / Arthur Johnston -- The peacock / Ernesto Lecuons -- The peanut vendor / Moises Simons -- Peel me a grape / David Frishberg -- People / Jule Styne -- People will say we're in love / Richard Rodgers -- Perdido / H.J. Lengsfelder, Ervin Drake and Juan Tizol -- Perhaps / Charlie Parker -- Pick yourself up / Dorothy Fields and Jerome Kern -- Poinciana (Song of the tree) / Nat Simon -- Pompton turnpike / Will Osborne and Dick Rogers -- Polka dots and moonbeams / Jimmy Van Heusen -- Pools / Don Grolnick -- Put on a happy face / Charles Strouse -- The preacher / Horace Silver -- Put your little foot right out / Larry Spier -- Quiet now / Denny Zeitlin -- Quasimodo / Charlie Parker -- Quiet nights of quiet stars (Corcovado) / Antonio Carlos Jobim -- Rain / Peter DeRose -- The rain in Spain / Frederick Loewe -- Random thoughts / Steve Kuhn -- The red door / Gerry Mulligan and Jack \"Zoot\" Sims -- Raincheck / Billy Strayhorn -- Red sails in the sunset / Hugh Williams -- Red cross / Charlie Parker -- Red top / Lionel Hampton and Ken Kynard -- River, stay 'way from my door / Harry Woods -- Revelation / Gerry Mulligan -- Robbins' nest / Sir Charles Thompson and \"Illinois\" Jacquet -- Rock-a-bye your baby with a Dixie melody / Jean Schwartz -- Room 608 / Horace Silver -- Rockin' chair / Hoagy Carmichael -- Rosetta / Earl Hines and Henri Wood -- Route 66 / Bobby Troup -- Royal garden blues / Clarence Williams and Spencer Williams -- S-H-I-N-E / Ford Dabney -- 'Round midnight / Cootie Williams and Thelonious Monk -- Ruby, my dear / Thelonious Monk -- S'posin' / Paul Denniker -- S.O.S. / John L. (Wes) Montgomery -- Salt peanuts / Dizzy Gillespie and Kenny Clarke -- Sack of woe / Julian Adderley -- Satin doll / Duke Ellington, Johnny Mercer and Billy Strayhorn -- Second hand rose / James F. Hanley -- Samba de Orfeu / Luiz Bonfa -- Saturday night fish fry / Ellis Walsh and Louis Jordan -- Scrapple from the apple / Charlie Parker -- Señor blues / Horace Silver.",
          "Sentimental journey / Bud Green, Les Brown and Ben Homer -- September song / Kurt Weill -- Semonette / Jon Hendricks and Julian Adderley -- Serenade to a bus beat / Clark Terry -- Seven come eleven / Benny Goodman and Charlie Christian -- Shake, rattle and roll / Charles Calhoun -- Shawnuff / Charlie Parker and John \"Dizzy\" Gillespie -- She's funny that way / Neil Moret -- Shivers / Lionel Hampton and Charlie Christian -- The sheik of Araby / Ted Snyder -- Shoo fly pie and apple pan dowdy / Guy Wood -- Side by side / Harry Woods -- Shiny stockings / Frank Foster -- Sister Sadie / Horace Silver -- Skylark / Hoagy Carmichael -- Skyliner / Charlie Barnet -- Small world / Jule Styne -- Snowfall / Claude Thornhill -- Smoke rings / H. Eugene Clifford -- Smoke gets in your eyes / Jerome Kern -- Solar / Miles Davis -- A smooth one / Benny Goodman -- So nice (Summer samba) / Marcos Valle and Paulo Sergio Valle -- So what / Miles Davis -- Solitude / Duke Ellington, Eddie De Lange and Irving Mills -- Soft winds / Benny Goodman -- Some enchanted evening / Richard Rodgers -- Solo flight / Benny Goodman, Charlie Christian and Jimmy Mundy -- Some day my prince will come / Frank Churchill -- Songbird / Loonis McGlohon -- Some of these days / Shelton Brooks -- Something everywhere / Steve Kuhn -- Sometimes I'm happy / Vincent Youmans -- The song is you / Jerome Kern -- Song of the islands / Chas. E. King -- Song for my father / Horace Silver -- Soul eyes / Mal Waldron -- Sonny boy / Al Jolson, B.D. DeSylva, Lew Brown and Ray Henderson -- Southern comfort / Wayne Henderson -- South of the border / Jimmy Kennedy and Michael Carr -- Speak low / Kurt Weill -- Spain / Chick Corea -- St. Thomas / Sonny Rollins -- Spring can really hang you up the most / Tommy Wolf -- Spring will be a little late this year / Frank Loesser -- Steeplechase / Charlie Parker -- Squeeze me / Clarence Williams and Thomas Waller -- Stay as sweet as you are / Harry Revel -- Stockholm sweetnin' / Quincy Jones -- Stompin' at the savoy / Benny Goodman, Andy Razaf, Chick Webb and Edgar Sampson -- Stormy weather / Harold Arlen -- Strange fruit / Lewis Allan -- Strangers in the night / Bert Kaempfert -- Stuffy / Coleman Hawkins -- A string of pearls / Jerry Gray -- Struttin' with some barbeque / Don Raye -- Sunny side up / B.G. DeSylva, Lew Brown and Ray Henderson -- Sugar / George W. Meyer -- Sugar foot stomp / Joe Oliver -- A Sunday kind of love / Barbara Belle, Louis Prima, Anita Leonard and Stan Rhodes -- Summertime / George Gershwin -- Sunrise serenade / Frankie Cole -- Sweet Sue-just you / Victor Young -- The surrey with the fringe on top / Richard Rodgers -- Sweet and lonely / Gus Anaheim, Harry Tobias and Jules Lemare -- Swing house / Gerry Mulligan -- Swinging shepherd blues / Moe Koffman -- Sweet Eloise / Russ Morgan -- Swingin' until the girls come home / Oscar Pettiford -- Swingin' the blues / Count Basie and Ed Durham -- T'ain't nobody's biz-ness if I do / Porter Grainger and Everett Robbins -- T'ain't what you do (It's the way that cha do it) / Sy Oliver and James Young -- Take the \"A\" train / Billy Strayhorn and the Delta Rhythm Boys -- A taste of honey / Ric Marlow and Bobby Scott -- The tailgate ramble / Wingy Manone -- That's all / Alan Brandt and Bob Haymes -- Tenderly / Walter Gross -- That's entertainment / Arthur Schwartz -- That's life / Dean Kay and Kelly Gordon -- There's are such things / Stanley Adams, Abel Baer and George W. Meyer -- There will never be another you / Mack Gordon -- There's a boat dat's leavin' soon for New York / George Gershwin -- There is no greater love / Isham Jones -- There'll be some changes made / W. Benton Overstreet -- There's a small hotel / Richard Rodgers -- These foolish things / Jack Strachey and Harry Link -- They all laughed / George Gershwin.",
          "They can't take that away from me / George Gershwin -- Thermo / Freddie Hubbard -- They didn't believe me / Jerome Kern -- This can't be love / Richard Rodgers -- The things we did last summer / Sammy Cahn and Jule Styne -- Thriving from a riff / Charlie Parker -- This love of mine / Sol Parker and Henry Sanicola -- The thrill is gone / Ray Henderson -- Tickle toe / Lester Young -- Time remembered / Bill Evans -- Tin roof blues / New Orleans Rhythm Kings -- Tishomingo blues / Spencer Williams -- Together / B.G. DeSylva, Ray Henderson and Lew Brown -- 'Tis autumn / Henry Nemo -- Tones for Joan's bones / Chick Corea -- Tuxedo junction / Erskine Hawkins, William Johnson and Julian Dash -- The touch of your lips / Ray Noble -- Too darn hot / Cole Porter -- 12th street rag / Euday L. Bowman -- Twisted / Annie Ross and Wardell Gray -- Tune up / Miles Davis -- Trav'lin light / Harry Akst -- Un poco loco / Earl Bud Powell -- Undecided / Charles Shavers -- Under a blanket of blue / Jerry Livingston -- Unforgettable / Irving Gordon -- Van Lingle Mungo / David Frishberg -- Utter chaos / Gerry Mulligan -- Until the real thing comes along / Mann Holiner, Alberta Nichols, Sammy Cahn, Saul Chaplin and L.E. Freeman -- Violets for your furs / Matt Dennis -- Valse hot / Sonny Rollins -- Very early / Bill Evans -- Wait till you see her / Richard Rodgers -- Walkin' / Richard Carpenter -- Wagon wheels / Peter DeRose -- Walkin' my baby back home / Roy Turk and Fred E. Ahlert -- Walkin' shoes / Gerry Mulligan -- Waltz for Debby / Bill Evans -- Watch what happens / Michel Legrand -- The way you look tonight / Jerome Kern -- 'Way down yonder in New Orleans / Henry Creamer and J. Turner Layton -- Western reunion / Gerry Mulligan -- Weary blues / Artie Matthews -- Wee dot / J.J. Johnson -- We kiss in a shadow / Richard Rodgers -- Westwood walk / Gerry Mulligan -- Well you needn't (It's over now) / Thelonious Monk and Mike Ferro -- West end blues / Clarence Williams and Joe Oliver -- What's new / Bob Haggart -- When my sugar walks down the street / Gene Austin, Jimmie McHugh and Irving Mills -- What a diff'rence a day made / Maria Grever -- What a wonderful world / George David Weiss and Bob Thiele -- When I fall in love / Victor Young -- What kind of fool am I? / Leslie Bricusse and Anthony Newley -- When your lover has gone / E.A. Swan -- Where flamingos fly / James Kennedy and Mascha Spoliansky -- Where is love? (from the film \"Oliver\") / Lionel Bart -- Whisper not / Benny Golson -- Where or when / Richard Rodgers -- Who? / Jerome Kern -- Who's got rhythm / Gerry Mulligan -- While we're young / Morty Palitz and Alec Wilder -- Woodchopper's ball / Joe Bishop and Woody Herman -- Who can I turn to (When nobody needs me) / Leslie Bricusse and Anthony Newley -- Why do I love you? / Jerome Kern -- Will you still be mine? / Matt Dennis -- With a little bit of luck (from \"My fair lady\") / Frederick Loewe -- Witchcraft / Cy Coleman -- The world is waiting for the sunrise / Ernest Seitz -- Work song / Nathaniel Adderley -- Willow weep for me / Ann Ronell -- Yardbird suite / Charlie Parker -- Wouldn't it be lovely (from \"My fair lady\") / Frederick Loewe -- Wrap your troubles in dreams (And dream your troubles away) / Harry Barris -- Yes indeed / Sy Oliver -- You came a long way from St. Louis / John Benson Brooks and Bob Russell -- Yesterdays / Jerome Kern -- You better go now / Robert Graham -- You call it madness (But I call it love) / Con Conrad, Gladys Du Bois, Russ Columbo and Paul Gregory -- You made me love you (I didnt want to do it) / James V. Monaco -- You'd be so nice to come home to / Cole Porter -- You turned the tables on me / Louis Alter -- You're my everything / Harry Warren -- You're the cream in my coffee / B.G. DeSylva, Lew Brown and Ray Henderson -- Young at heart / Johnny Richards -- Young and foolish / Albert Hagus -- Young love / Errol Garner -- You'll never walk alone / Richard Rodgers -- Young than springtime (from \"South Pacific\") / Richard Rodgers."],
        "shelfkey":"lc:M..163018.U4.1988--EFLAT",
        "available_a":["Available"],
        "publisher_a":["Hal Leonard"],
        "rollup_id":"OCLC19134911",
        "title_suggest":["The Ultimate jazz fakebook"],
        "title_main":"The Ultimate jazz fakebook",
        "title_sort_ssort_single":"ultimate jazz fakebook",
        "access_type_a":["At the Library"],
        "institution_a":["unc"],
        "oclc_number_old_a":["42229290",
          "191657264",
          "1017527879"],
        "oclc_number":"19134911",
        "imprint_main_a":["{\"type\":\"publication\",\"value\":\"Milwaukee, WI : Hal Leonard, 1988.\"}"],
        "note_general_a":["Jazz and popular vocals, and instrumental jazz solos.",
          "\"For alto saxophone and all E♭ instruments\"--Cover.",
          "Includes melodic lines and lyrics with chord symbols."],
        "primary_isbn_a":["0881889814",
          "9780881889819"],
        "primary_oclc_a":["19134911"],
        "resource_type_a":["Music score"],
        "subject_genre_a":["Fake books"],
        "date_cataloged":"2014-06-11T04:00:00Z",
        "genre_headings_a":["Fake books"],
        "subject_suggest":["Fake books",
          "1900 - 1999",
          "Music -- Fake books",
          "Saxophone music (Jazz)",
          "Popular music -- United States -- 20th century",
          "Popular music",
          "United States"],
        "physical_media_a":["Print"],
        "subject_topical_a":["Music",
          "Saxophone music (Jazz)",
          "Popular music",
          "Fake books"],
        "publication_year_sort":"1988",
        "reverse_shelfkey":"lc:D}}YTWZYR}5V}YQRR~~LKEP6",
        "subject_headings_a":["1900 - 1999",
          "Music -- Fake books",
          "Saxophone music (Jazz)",
          "Popular music -- United States -- 20th century",
          "Popular music",
          "United States"],
        "lc_call_nos_normed_a":["M..163018.U4.1988--EFLAT"],
        "location_hierarchy_a":["unc",
          "unc:uncmusy"],
        "publisher_location_a":["Milwaukee, WI"],
        "record_data_source_a":["ILSMARC"],
        "subject_geographic_a":["United States"],
        "call_number_schemes_a":["LC"],
        "origin_place_search_a":["Milwaukee, WI",
          "Wisconsin",
          "United States"],
        "physical_description_a":["1 score (447 pages) ; 31 cm"],
        "subject_chronological_a":["1900 - 1999",
          "20th century"],
        "lcc_callnum_classification_a":["M - Music",
          "M - Music|M1 - M5000 Music",
          "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music",
          "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1497 - M1998 Secular vocal music",
          "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1497 - M1998 Secular vocal music|M1627 - M1853 National music"],
        "statement_of_responsibility_a":["compiled by Dr. Herb Wong."],
        "index_date":"2024-02-12T16:36:43Z"},
      {
        "id":"UNCb3157301",
        "url_a":["{\"href\":\"https://finding-aids.lib.unc.edu/04930/\",\"type\":\"findingaid\",\"note\":\"Finding aid\",\"restricted\":\"false\"}"],
        "items_a":["{\"item_id\":\"i11221200\",\"loc_b\":\"dgdda\",\"loc_n\":\"dgdda\",\"status\":\"Available\",\"vol\":\"reel 1\",\"call_no\":\"1-4485 (4930)\",\"cn_scheme\":\"ALPHANUM\"}",
          "{\"item_id\":\"i11221203\",\"loc_b\":\"dgdda\",\"loc_n\":\"dgdda\",\"status\":\"Available\",\"vol\":\"reel 2\",\"call_no\":\"1-4485 (4930)\",\"cn_scheme\":\"ALPHANUM\"}",
          "{\"item_id\":\"i11221206\",\"loc_b\":\"dgdda\",\"loc_n\":\"dgdda\",\"status\":\"Available\",\"vol\":\"reel 3\",\"call_no\":\"1-4485 (4930)\",\"cn_scheme\":\"ALPHANUM\"}",
          "{\"item_id\":\"i11221209\",\"loc_b\":\"dgdda\",\"loc_n\":\"dgdda\",\"status\":\"Available\",\"vol\":\"reel 4\",\"call_no\":\"1-4485 (4930)\",\"cn_scheme\":\"ALPHANUM\"}",
          "{\"item_id\":\"i11221212\",\"loc_b\":\"dgdda\",\"loc_n\":\"dgdda\",\"status\":\"Available\",\"vol\":\"reel 5\",\"call_no\":\"1-4485 (4930)\",\"cn_scheme\":\"ALPHANUM\"}",
          "{\"item_id\":\"i11221215\",\"loc_b\":\"dgdda\",\"loc_n\":\"dgdda\",\"status\":\"Available\",\"vol\":\"reel 6\",\"call_no\":\"1-4485 (4930)\",\"cn_scheme\":\"ALPHANUM\"}",
          "{\"item_id\":\"i11221218\",\"loc_b\":\"dgdda\",\"loc_n\":\"dgdda\",\"status\":\"Available\",\"vol\":\"reel 7\",\"call_no\":\"1-4485 (4930)\",\"cn_scheme\":\"ALPHANUM\"}",
          "{\"item_id\":\"i11221221\",\"loc_b\":\"dgdda\",\"loc_n\":\"dgdda\",\"status\":\"Available\",\"vol\":\"reel 8\",\"call_no\":\"1-4485 (4930)\",\"cn_scheme\":\"ALPHANUM\"}",
          "{\"item_id\":\"i11221224\",\"loc_b\":\"dgdda\",\"loc_n\":\"dgdda\",\"status\":\"Available\",\"vol\":\"reel 9\",\"call_no\":\"1-4485 (4930)\",\"cn_scheme\":\"ALPHANUM\"}",
          "{\"item_id\":\"i11221227\",\"loc_b\":\"dgdda\",\"loc_n\":\"dgdda\",\"status\":\"Available\",\"vol\":\"reel 10\",\"call_no\":\"1-4485 (4930)\",\"cn_scheme\":\"ALPHANUM\"}",
          "{\"item_id\":\"i11221230\",\"loc_b\":\"dgdda\",\"loc_n\":\"dgdda\",\"status\":\"Available\",\"vol\":\"reel 11\",\"call_no\":\"1-4485 (4930)\",\"cn_scheme\":\"ALPHANUM\"}",
          "{\"item_id\":\"i11221233\",\"loc_b\":\"dgdda\",\"loc_n\":\"dgdda\",\"status\":\"Available\",\"vol\":\"reel 12\",\"call_no\":\"1-4485 (4930)\",\"cn_scheme\":\"ALPHANUM\"}",
          "{\"item_id\":\"i11221236\",\"loc_b\":\"dgdda\",\"loc_n\":\"dgdda\",\"status\":\"Available\",\"vol\":\"reel 13\",\"call_no\":\"1-4485 (4930)\",\"cn_scheme\":\"ALPHANUM\"}",
          "{\"item_id\":\"i11221239\",\"loc_b\":\"dgdda\",\"loc_n\":\"dgdda\",\"status\":\"Available\",\"vol\":\"reel 14\",\"call_no\":\"1-4485 (4930)\",\"cn_scheme\":\"ALPHANUM\"}",
          "{\"item_id\":\"i11221242\",\"loc_b\":\"dgdda\",\"loc_n\":\"dgdda\",\"status\":\"Available\",\"vol\":\"reel 15\",\"call_no\":\"1-4485 (4930)\",\"cn_scheme\":\"ALPHANUM\"}",
          "{\"item_id\":\"i11221245\",\"loc_b\":\"dgdda\",\"loc_n\":\"dgdda\",\"status\":\"Available\",\"vol\":\"reel 16\",\"call_no\":\"1-4485 (4930)\",\"cn_scheme\":\"ALPHANUM\"}",
          "{\"item_id\":\"i11221248\",\"loc_b\":\"dgdda\",\"loc_n\":\"dgdda\",\"status\":\"Available\",\"vol\":\"reel 17\",\"call_no\":\"1-4485 (4930)\",\"cn_scheme\":\"ALPHANUM\"}",
          "{\"item_id\":\"i11221267\",\"loc_b\":\"dgdda\",\"loc_n\":\"dgdda\",\"status\":\"Available\",\"vol\":\"reel 18\",\"call_no\":\"1-4485 (4930)\",\"cn_scheme\":\"ALPHANUM\"}",
          "{\"item_id\":\"i11221264\",\"loc_b\":\"dgdda\",\"loc_n\":\"dgdda\",\"status\":\"Available\",\"vol\":\"reel 19\",\"call_no\":\"1-4485 (4930)\",\"cn_scheme\":\"ALPHANUM\"}",
          "{\"item_id\":\"i11221261\",\"loc_b\":\"dgdda\",\"loc_n\":\"dgdda\",\"status\":\"Available\",\"vol\":\"reel 20\",\"call_no\":\"1-4485 (4930)\",\"cn_scheme\":\"ALPHANUM\"}",
          "{\"item_id\":\"i11221258\",\"loc_b\":\"dgdda\",\"loc_n\":\"dgdda\",\"status\":\"Available\",\"vol\":\"reel 21\",\"call_no\":\"1-4485 (4930)\",\"cn_scheme\":\"ALPHANUM\"}",
          "{\"item_id\":\"i11221255\",\"loc_b\":\"dgdda\",\"loc_n\":\"dgdda\",\"status\":\"Available\",\"vol\":\"reel 22\",\"call_no\":\"1-4485 (4930)\",\"cn_scheme\":\"ALPHANUM\"}",
          "{\"item_id\":\"i11221252\",\"loc_b\":\"dgdda\",\"loc_n\":\"dgdda\",\"status\":\"Available\",\"vol\":\"reel 23\",\"call_no\":\"1-4485 (4930)\",\"cn_scheme\":\"ALPHANUM\"}",
          "{\"item_id\":\"i11221249\",\"loc_b\":\"dgdda\",\"loc_n\":\"dgdda\",\"status\":\"Available\",\"vol\":\"reel 24\",\"call_no\":\"1-4485 (4930)\",\"cn_scheme\":\"ALPHANUM\"}",
          "{\"item_id\":\"i4479849\",\"loc_b\":\"wadc\",\"loc_n\":\"wadc\",\"status\":\"In-Library Use Only\",\"call_no\":\"4930\",\"cn_scheme\":\"ALPHANUM\"}"],
        "author_suggest":["McKissick, Floyd B. (Floyd Bixler), 1922-1991"],
        "names_a":["{\"name\":\"McKissick, Floyd B. (Floyd Bixler), 1922-1991\",\"type\":\"creator\",\"id\":\"https://id.loc.gov/authorities/names/nr88004133\"}"],
        "owner_a":["unc"],
        "barcodes_a":["00051783417",
          "00051783532",
          "00051783658",
          "00051783774",
          "00051783300",
          "00051783426",
          "00051783541",
          "00051783667",
          "00051783783",
          "00051783319",
          "00051783435",
          "00051783550",
          "00051783676",
          "00051783792",
          "00051783328",
          "00051783444",
          "00051783569",
          "00051784292",
          "00051784176",
          "00051784050",
          "00051783934",
          "00051783818",
          "00051783809",
          "00051783685",
          "HAWS-0778-00001"],
        "language_a":["English"],
        "local_id":"b3157301",
        "available_a":["Available"],
        "rollup_id":"OCLC39668375",
        "note_local_a":["Source of acquisition: Acquired 1998."],
        "title_suggest":["Floyd B. McKissick papers, 1940s-1980s."],
        "title_main":"Floyd B. McKissick papers, 1940s-1980s.",
        "title_sort_ssort_single":"floyd b mckissick papers 1940s 1980s",
        "access_type_a":["At the Library"],
        "institution_a":["unc"],
        "oclc_number":"39668375",
        "creator_main_a":["McKissick, Floyd B. (Floyd Bixler), 1922-1991"],
        "note_general_a":["In the Southern Historical Collection, University of North Carolina at Chapel Hill (#4930).",
          "Master microfilm (M-4930) held by: NcU.",
          "Microfilm filmed by University of North Carolina, Library, Photographic Service, 2005.",
          "Funding details: Portions of this collection have been digitized as part of \"Content, Context, and Capacity: A Collaborative Large-Scale Digitization Project on the Long Civil Rights Movement in North Carolina.\" The project was made possible by funding from the federal Institute for Museum and Library Services (IMLS) under the provisions of the Library Services and Technology Act (LSTA), as administered by the State Library of North Carolina, a division of the Department of Cultural Resources."],
        "note_summary_a":["The collection contains materials documenting Floyd B. McKissick's work as an attorney, businessman, and civil rights leader. Included are items pertaining to his law practice in Durham, N.C.; his service, beginning in 1966, as national director of the Congress of Racial Equality (CORE); his work as advisor to the National Association for the Advancement of Colored People (NAACP); and his interests in politics and education. Many items relate to Soul City, N.C., a town owned and operated by African Americans near Warrenton, N.C. Included are items describing the impact of Soul City on rural Warren County, N.C., and Vance County, N.C. Among the companies documented are McKissick Enterprises of New York and North Carolina; City Development, Inc.; HealthCo, Inc.; Madison and McKissick Development, Inc.; McKissick S.C. Associates; the Soul City Foundation and other Soul City companies; and the Warren Regional Planning Corporation. There are also a few items relating to the McKissick family and to his affiliation with the Republican Party at the local, state, and national levels."],
        "primary_oclc_a":["39668375"],
        "resource_type_a":["Archival and manuscript material"],
        "shelf_numbers_a":["1-4485 (4930)",
          "4930"],
        "date_cataloged":"2016-12-23T05:00:00Z",
        "physical_media_a":["Microform",
          "Microfilm"],
        "subject_topical_a":["McKissick, Floyd B. (Floyd Bixler), 1922-1991",
          "City Development, Inc",
          "Congress of Racial Equality",
          "HealthCo, Inc",
          "Madison and McKissick Development, Inc",
          "Floyd B. McKissick Enterprises, Inc",
          "McKissick S.C. Associates",
          "National Association for the Advancement of Colored People",
          "Republican Party (N.C.)",
          "History",
          "Republican Party (U.S. : 1854- )",
          "Soul City Foundation",
          "Warren Regional Planning Corporation",
          "African American business enterprises",
          "African American civic leaders",
          "African American families",
          "African American lawyers",
          "African American leadership",
          "African Americans",
          "City planning",
          "Civic leaders",
          "Civil rights movements",
          "Families",
          "Social life and customs",
          "New towns",
          "Planning"],
        "publication_year_sort":"1944",
        "subject_headings_a":["McKissick, Floyd B. (Floyd Bixler), 1922-1991",
          "City Development, Inc",
          "Congress of Racial Equality",
          "HealthCo, Inc",
          "Madison and McKissick Development, Inc",
          "Floyd B. McKissick Enterprises, Inc",
          "McKissick S.C. Associates",
          "National Association for the Advancement of Colored People",
          "Republican Party (N.C.) -- History -- 20th century",
          "Republican Party (U.S. : 1854- ) -- History -- 20th century",
          "Soul City Foundation",
          "Warren Regional Planning Corporation",
          "African American business enterprises -- North Carolina -- History -- 20th century",
          "African American civic leaders -- North Carolina -- History -- 20th century",
          "African American families -- North Carolina",
          "African American lawyers -- North Carolina -- History -- 20th century",
          "African American leadership -- History -- 20th century",
          "African American leadership -- North Carolina",
          "African Americans -- North Carolina -- Durham",
          "African Americans -- North Carolina -- History -- 20th century",
          "City planning -- North Carolina -- Soul City",
          "Civic leaders -- North Carolina -- History -- 20th century",
          "Civil rights movements -- North Carolina -- History -- 20th century",
          "Civil rights movements -- United States -- History -- 20th century",
          "Families -- North Carolina -- Social life and customs",
          "New towns -- North Carolina -- Soul City -- Planning",
          "Durham (N.C.) -- History",
          "Soul City (N.C.)",
          "Warren County (N.C.) -- History",
          "Vance County (N.C.) -- History"],
        "subject_suggest":["McKissick, Floyd B. (Floyd Bixler), 1922-1991",
          "City Development, Inc",
          "Congress of Racial Equality",
          "HealthCo, Inc",
          "Madison and McKissick Development, Inc",
          "Floyd B. McKissick Enterprises, Inc",
          "McKissick S.C. Associates",
          "National Association for the Advancement of Colored People",
          "Republican Party (N.C.) -- History -- 20th century",
          "Republican Party (U.S. : 1854- ) -- History -- 20th century",
          "Soul City Foundation",
          "Warren Regional Planning Corporation",
          "African American business enterprises -- North Carolina -- History -- 20th century",
          "African American civic leaders -- North Carolina -- History -- 20th century",
          "African American families -- North Carolina",
          "African American lawyers -- North Carolina -- History -- 20th century",
          "African American leadership -- History -- 20th century",
          "African American leadership -- North Carolina",
          "African Americans -- North Carolina -- Durham",
          "African Americans -- North Carolina -- History -- 20th century",
          "City planning -- North Carolina -- Soul City",
          "Civic leaders -- North Carolina -- History -- 20th century",
          "Civil rights movements -- North Carolina -- History -- 20th century",
          "Civil rights movements -- United States -- History -- 20th century",
          "Families -- North Carolina -- Social life and customs",
          "New towns -- North Carolina -- Soul City -- Planning",
          "Durham (N.C.) -- History",
          "Soul City (N.C.)",
          "Warren County (N.C.) -- History",
          "Vance County (N.C.) -- History"],
        "note_biographical_a":["Floyd B. McKissick (1922-1991) was born in Asheville, N.C. He was an attorney, businessman, and civil rights leader. McKissick married Evelyn Williams, with whom he had four children: Joycelyn; Andree; Floyd, Jr.; and Charmaine."],
        "location_hierarchy_a":["unc",
          "unc:uncdavy",
          "unc:uncsoun",
          "unc:uncwil",
          "unc:uncwil:uncwilshc"],
        "record_data_source_a":["ILSMARC",
          "EAD"],
        "subject_geographic_a":["North Carolina",
          "Durham",
          "Soul City",
          "United States",
          "Durham (N.C.)",
          "Soul City (N.C.)",
          "Warren County (N.C.)",
          "Vance County (N.C.)"],
        "call_number_schemes_a":["ALPHANUM"],
        "origin_place_search_a":["North Carolina",
          "United States"],
        "physical_description_a":["approximately 157000 items (126.0 linear ft.)"],
        "subject_chronological_a":["20th century"],
        "index_date":"2024-01-29T07:51:40Z"},
      {
        "id":"UNCb2667886",
        "url_a":["{\"href\":\"http://finding-aids.lib.unc.edu/11036/\",\"type\":\"findingaid\",\"note\":\"Finding aid\",\"restricted\":\"false\"}"],
        "items_a":["{\"item_id\":\"i3837366\",\"loc_b\":\"wada\",\"loc_n\":\"wada\",\"status\":\"In-Library Use Only\",\"call_no\":\"11036\",\"cn_scheme\":\"ALPHANUM\"}"],
        "author_suggest":["A.P. Watt (Firm)"],
        "names_a":["{\"name\":\"A.P. Watt (Firm)\",\"type\":\"creator\"}"],
        "owner_a":["unc"],
        "language_a":["English"],
        "local_id":"b2667886",
        "available_a":["Available"],
        "rollup_id":"OCLC31966229",
        "note_local_a":["Source of acquisition: Acquired 1984, 1986, 1990, 1999, 2019"],
        "title_suggest":["A.P. Watt records, 1887-1982"],
        "title_main":"A.P. Watt records, 1887-1982",
        "title_sort_ssort_single":"ap watt records 1887 1982",
        "access_type_a":["At the Library"],
        "institution_a":["unc"],
        "oclc_number_old_a":["26661055",
          "31914941",
          "31914945",
          "31914948",
          "31914952",
          "31914959",
          "31914962",
          "31914967",
          "31966232",
          "31966236",
          "31966241",
          "31966247",
          "31966250",
          "31966252"],
        "oclc_number":"31966229",
        "creator_main_a":["A.P. Watt (Firm)"],
        "note_general_a":["In Rare Book Literary and Historical Papers, University of North Carolina at Chapel Hill (#11036)",
          "In English"],
        "note_summary_a":["A.P. Watt was the world's first literary agency and was the largest for its first thirty years of operation. Alexander Pollock Watt (1834-1914) began working as a literary agent in 1875 when a friend asked him to negotiate a contract with a London publishing company. By 1881, A.P. Watt had incorporated his business and begun to define the role of the literary agent. The A.P. Watt firm has remained in the forefront of the market in popular fiction and it has counted numerous important and/or best-selling authors among its clients. The collection includes correspondence, agreements, contracts, and financial account books of the A.P. Watt firm that document sales of authors' works to publishing companies, newspapers, magazines, broadcasting corporations, and film studios. The file material includes correspondence, agreements between authors and publishers, Library of Congress registration receipts, copyright renewal forms, and other items. The great majority of these items date from 1897 to 1937, but several files extend as far as 1985. Canonical authors include G.K. Chesterton, Winston Churchill, Joseph Conrad, Charles Dickens, Thomas Hardy, Rudyard Kipling, H.G. Wells, P.G. Wodehouse, and W.B. Yeats. Also interspersed throughout are letters from major British and American magazines and publishing companies. Account books with entries dating 1926 to 1965 (bulk 1947- 1962) contain extensive coverage for Arnold Bennett, John Buchan, August Strindberg, and Mark Twain, in addition to those already mentioned. Taken as a whole, the collection contains a wealth of bibliographical information and provides a picture of the changing trends in the publishing industry since the late 19th century"],
        "primary_oclc_a":["31966229"],
        "resource_type_a":["Archival and manuscript material"],
        "shelf_numbers_a":["11036"],
        "subject_genre_a":["History"],
        "date_cataloged":"2019-09-26T04:00:00Z",
        "genre_headings_a":["History"],
        "subject_suggest":["History",
          "Bennett, Arnold, 1867-1931",
          "Buchan, John, 1875-1940",
          "Chesterton, G. K. (Gilbert Keith), 1874-1936",
          "Churchill, Winston, 1874-1965",
          "Conrad, Joseph, 1857-1924",
          "Dickens, Charles, 1812-1870",
          "Hardy, Thomas, 1840-1928",
          "Kipling, Rudyard, 1865-1936",
          "Strindberg, August, 1849-1912",
          "Twain, Mark, 1835-1910",
          "Watt, A. P. (Alexander Pollock), 1834-1914",
          "Wells, H. G. (Herbert George), 1866-1946",
          "Wodehouse, P. G. (Pelham Grenville), 1881-1975",
          "Yeats, W. B. (William Butler), 1865-1939",
          "Alden, W. L. (William Livingston), 1837-1908",
          "Allen, Grant, 1848-1899",
          "Allingham, Margery, 1904-1966",
          "Anstey, F., 1856-1934",
          "Austen, Jane, 1775-1817",
          "Bagnold, Enid",
          "Baldwin, Stanley Baldwin, Earl, 1867-1947",
          "Balfour, Arthur James, 1848-1930",
          "Barlow, Jane, 1856-1917",
          "Belloc, Hilaire, 1870-1953",
          "Benavente, Jacinto, 1866-1954",
          "Benson, E. F. (Edward Frederic), 1867-1940",
          "Besant, Walter, 1836-1901",
          "Binyon, Laurence, 1869-1943",
          "Birmingham, George A., 1865-1950",
          "Birrell, Augustine, 1850-1933",
          "Blackwood, Algernon, 1869-1951",
          "Bolitho, Hector, 1897-1974",
          "Boothby, Guy, 1867-1905",
          "Braddon, M. E. (Mary Elizabeth), 1835-1915",
          "Brooke, Rupert, 1887-1915",
          "Buck, Pearl S. (Pearl Sydenstricker), 1892-1973",
          "Bullen, Frank Thomas, 1857-1915",
          "Burgess, Gelett, 1866-1951",
          "Burgin, G. B. (George Brown), 1856-1944",
          "Carroll, Lewis, 1832-1898",
          "Cary, Joyce, 1888-1957",
          "Christie, Agatha, 1890-1976",
          "Coleridge, Mary E. (Mary Elizabeth), 1861-1907",
          "Collins, Wilkie, 1824-1889",
          "Corelli, Marie, 1855-1924",
          "Crawford, F. Marion (Francis Marion), 1854-1909",
          "Crockett, S. R. (Samuel Rutherford), 1859-1914",
          "Crofts, Freeman Wills, 1879-1957",
          "Crompton, Richmal, 1890-1969",
          "Curzon of Kedleston, George Nathaniel Curzon, Marquess, 1859-1925",
          "Davidson, John, 1857-1909",
          "Doyle, Arthur Conan, 1859-1930",
          "Doyle, Lynn, 1873-1961",
          "Du Maurier, Daphne, 1907-1989",
          "Dunsany, Lord, 1878-1957",
          "Eliot, T. S. (Thomas Stearns), 1888-1965",
          "Fairlie, Gerard, 1899-1983",
          "Farnol, Jeffery, 1878-1952",
          "Flecker, James Elroy, 1884-1915",
          "Frankau, Gilbert, 1884-1952",
          "Frankau, Pamela, 1908-1967",
          "Gallon, Tom, 1866-1914",
          "Garnett, Constance, 1861-1946",
          "Gissing, George, 1857-1903",
          "Gladstone, W. E. (William Ewart), 1809-1898",
          "Glasgow, Ellen, 1873-1945",
          "Granville-Barker, Harley, 1877-1946",
          "Graves, Robert, 1895-1985",
          "Greenwood, Walter, 1903-1974",
          "Gwynn, Stephen Lucius, 1864-1950",
          "Hackett, Francis, 1883-1962",
          "Haggard, H. Rider (Henry Rider), 1856-1925",
          "Haldane, R. B. Haldane (Richard Burdon Haldane), Viscount, 1856-1928",
          "Harte, Bret, 1836-1902",
          "Hay, Ian",
          "Hearn, Lafcadio, 1850-1904",
          "Hewlett, Maurice, 1861-1923",
          "Hichens, Robert, 1864-1950",
          "Hill, Headon, 1857-1927",
          "Hope, Anthony, 1863-1933",
          "Horler, Sydney, 1888-1954",
          "Hudson, W. H. (William Henry), 1841-1922",
          "Huxley, Julian, 1887-1975",
          "Jackson, Laura (Riding), 1901-1991",
          "James, Henry, 1843-1916",
          "Jameson, Storm, 1891-1986",
          "Jerome, Jerome K. (Jerome Klapka), 1859-1927",
          "Jones, D. Gareth (David Gareth), 1940-",
          "Kingsley, Charles, 1819-1875",
          "Knox, Ronald Arbuthnott, 1888-1957",
          "Lang, Andrew, 1844-1912",
          "Lawless, Emily, 1845-1913",
          "Lawrence, D. H. (David Herbert), 1885-1930",
          "Le Feuvre, Amy",
          "Le Queux, William, 1864-1927",
          "Lloyd George, David, 1863-1945",
          "Locke, William John, 1863-1930",
          "London, Jack, 1876-1916",
          "Lucas, E. V. (Edward Verrall), 1868-1938",
          "Macaulay, Rose, 1881-1958",
          "MacDonald, George, 1824-1905",
          "Mackail, Denis, 1892-1971",
          "MacManus, Seumas, 1869-1960",
          "MacNeice, Louis, 1907-1963",
          "Maeterlinck, Maurice, 1862-1949",
          "Mansfield, Katherine, 1888-1923",
          "Marchmont, Arthur W., 1852-1923",
          "Masefield, John, 1878-1967",
          "Mason, A. E. W. (Alfred Edward Woodley), 1865-1948",
          "Maugham, W. Somerset (William Somerset), 1874-1965",
          "Maxwell, W. B. (William Babington), 1866-1938",
          "McCarthy, Justin H. (Justin Huntly), 1860-1936",
          "McFee, William, 1881-1966",
          "McNeile, H. C. (Herman Cyril), 1888-1937",
          "Merrick, Leonard, 1864-1939",
          "Mill, John Stuart, 1806-1873",
          "Milne, A. A. (Alan Alexander), 1882-1956",
          "Moore, Frank Frankfort, 1855-1931",
          "Moore, George, 1852-1933",
          "Morley, John, 1838-1923",
          "Mottram, R. H. (Ralph Hale), 1883-1971",
          "Murray, Gilbert, 1866-1957",
          "Nesbit, E. (Edith), 1858-1924",
          "Newbolt, Henry John, Sir, 1862-1938",
          "Noyes, Alfred, 1880-1958",
          "Oliphant, Mrs. (Margaret), 1828-1897",
          "Onions, Oliver, 1873-1961",
          "Orczy, Emmuska Orczy, Baroness, 1865-1947",
          "Parker, Gilbert, 1862-1932",
          "Pemberton, Max, 1863-1950",
          "Philips, Austin, 1875-1947",
          "Phillpotts, Eden, 1862-1960",
          "Pound, Ezra, 1885-1972",
          "Quiller-Couch, Arthur, 1863-1944",
          "Reade, Charles, 1814-1884",
          "Reynolds, Baillie, Mrs",
          "Roberts, Morley, 1857-1942",
          "Rohmer, Sax, 1883-1959",
          "Rowlands, Effie Adelaide, 1866-1936",
          "Ruck, Berta, 1878-1978",
          "Sabatini, Rafael, 1875-1950",
          "Sackville-West, V. (Victoria), 1892-1962",
          "Schreiner, Olive, 1855-1920",
          "Smuts, Jan Christiaan, 1870-1950",
          "Stanford, Charles Villiers, 1852-1924",
          "Stephens, James, 1882-1950",
          "Stevenson, Robert Louis, 1850-1894",
          "Stribling, T. S. (Thomas Sigismund), 1881-1965",
          "Swan, Annie S., 1859-1943",
          "Terry, Ellen, Dame, 1847-1928",
          "Thackeray, William Makepeace, 1811-1863",
          "Thompson, Francis, 1859-1907",
          "Tolstoy, Leo, Graf, 1828-1910",
          "Tomlinson, H. M. (Henry Major), 1873-1958",
          "Trevelyan, George Macaulay, 1876-1962",
          "Tynan, Katharine, 1861-1931",
          "Vachell, Horace Annesley, 1861-1955",
          "Wallace, Edgar, 1875-1932",
          "Walpole, Hugh, 1884-1941",
          "Ward, Humphry, Mrs., 1851-1920",
          "Watson, John, 1850-1907",
          "White, Fred M.",
          "Wiggin, Kate Douglas, 1856-1923",
          "Wilde, Oscar, 1854-1900",
          "Wister, Owen, 1860-1938",
          "Wyllarde, Dolf",
          "Zangwill, Israel, 1864-1926",
          "A.P. Watt (Firm)",
          "Hodder and Stoughton",
          "T. Fisher Unwin (Firm)",
          "Saturday evening post",
          "Authors, American",
          "Authors and publishers",
          "Authors, English",
          "Literary agents -- England -- History",
          "Literature publishing -- History",
          "Publishers and publishing -- History",
          "Literary agents",
          "Literature publishing",
          "Publishers and publishing",
          "England"],
        "subject_topical_a":["Bennett, Arnold, 1867-1931",
          "Buchan, John, 1875-1940",
          "Chesterton, G. K. (Gilbert Keith), 1874-1936",
          "Churchill, Winston, 1874-1965",
          "Conrad, Joseph, 1857-1924",
          "Dickens, Charles, 1812-1870",
          "Hardy, Thomas, 1840-1928",
          "Kipling, Rudyard, 1865-1936",
          "Strindberg, August, 1849-1912",
          "Twain, Mark, 1835-1910",
          "Watt, A. P. (Alexander Pollock), 1834-1914",
          "Wells, H. G. (Herbert George), 1866-1946",
          "Wodehouse, P. G. (Pelham Grenville), 1881-1975",
          "Yeats, W. B. (William Butler), 1865-1939",
          "Alden, W. L. (William Livingston), 1837-1908",
          "Allen, Grant, 1848-1899",
          "Allingham, Margery, 1904-1966",
          "Anstey, F., 1856-1934",
          "Austen, Jane, 1775-1817",
          "Bagnold, Enid",
          "Baldwin, Stanley Baldwin, Earl, 1867-1947",
          "Balfour, Arthur James, 1848-1930",
          "Barlow, Jane, 1856-1917",
          "Belloc, Hilaire, 1870-1953",
          "Benavente, Jacinto, 1866-1954",
          "Benson, E. F. (Edward Frederic), 1867-1940",
          "Besant, Walter, 1836-1901",
          "Binyon, Laurence, 1869-1943",
          "Birmingham, George A., 1865-1950",
          "Birrell, Augustine, 1850-1933",
          "Blackwood, Algernon, 1869-1951",
          "Bolitho, Hector, 1897-1974",
          "Boothby, Guy, 1867-1905",
          "Braddon, M. E. (Mary Elizabeth), 1835-1915",
          "Brooke, Rupert, 1887-1915",
          "Buck, Pearl S. (Pearl Sydenstricker), 1892-1973",
          "Bullen, Frank Thomas, 1857-1915",
          "Burgess, Gelett, 1866-1951",
          "Burgin, G. B. (George Brown), 1856-1944",
          "Carroll, Lewis, 1832-1898",
          "Cary, Joyce, 1888-1957",
          "Christie, Agatha, 1890-1976",
          "Coleridge, Mary E. (Mary Elizabeth), 1861-1907",
          "Collins, Wilkie, 1824-1889",
          "Corelli, Marie, 1855-1924",
          "Crawford, F. Marion (Francis Marion), 1854-1909",
          "Crockett, S. R. (Samuel Rutherford), 1859-1914",
          "Crofts, Freeman Wills, 1879-1957",
          "Crompton, Richmal, 1890-1969",
          "Curzon of Kedleston, George Nathaniel Curzon, Marquess, 1859-1925",
          "Davidson, John, 1857-1909",
          "Doyle, Arthur Conan, 1859-1930",
          "Doyle, Lynn, 1873-1961",
          "Du Maurier, Daphne, 1907-1989",
          "Dunsany, Lord, 1878-1957",
          "Eliot, T. S. (Thomas Stearns), 1888-1965",
          "Fairlie, Gerard, 1899-1983",
          "Farnol, Jeffery, 1878-1952",
          "Flecker, James Elroy, 1884-1915",
          "Frankau, Gilbert, 1884-1952",
          "Frankau, Pamela, 1908-1967",
          "Gallon, Tom, 1866-1914",
          "Garnett, Constance, 1861-1946",
          "Gissing, George, 1857-1903",
          "Gladstone, W. E. (William Ewart), 1809-1898",
          "Glasgow, Ellen, 1873-1945",
          "Granville-Barker, Harley, 1877-1946",
          "Graves, Robert, 1895-1985",
          "Greenwood, Walter, 1903-1974",
          "Gwynn, Stephen Lucius, 1864-1950",
          "Hackett, Francis, 1883-1962",
          "Haggard, H. Rider (Henry Rider), 1856-1925",
          "Haldane, R. B. Haldane (Richard Burdon Haldane), Viscount, 1856-1928",
          "Harte, Bret, 1836-1902",
          "Hay, Ian",
          "Hearn, Lafcadio, 1850-1904",
          "Hewlett, Maurice, 1861-1923",
          "Hichens, Robert, 1864-1950",
          "Hill, Headon, 1857-1927",
          "Hope, Anthony, 1863-1933",
          "Horler, Sydney, 1888-1954",
          "Hudson, W. H. (William Henry), 1841-1922",
          "Huxley, Julian, 1887-1975",
          "Jackson, Laura (Riding), 1901-1991",
          "James, Henry, 1843-1916",
          "Jameson, Storm, 1891-1986",
          "Jerome, Jerome K. (Jerome Klapka), 1859-1927",
          "Jones, D. Gareth (David Gareth), 1940-",
          "Kingsley, Charles, 1819-1875",
          "Knox, Ronald Arbuthnott, 1888-1957",
          "Lang, Andrew, 1844-1912",
          "Lawless, Emily, 1845-1913",
          "Lawrence, D. H. (David Herbert), 1885-1930",
          "Le Feuvre, Amy",
          "Le Queux, William, 1864-1927",
          "Lloyd George, David, 1863-1945",
          "Locke, William John, 1863-1930",
          "London, Jack, 1876-1916",
          "Lucas, E. V. (Edward Verrall), 1868-1938",
          "Macaulay, Rose, 1881-1958",
          "MacDonald, George, 1824-1905",
          "Mackail, Denis, 1892-1971",
          "MacManus, Seumas, 1869-1960",
          "MacNeice, Louis, 1907-1963",
          "Maeterlinck, Maurice, 1862-1949",
          "Mansfield, Katherine, 1888-1923",
          "Marchmont, Arthur W., 1852-1923",
          "Masefield, John, 1878-1967",
          "Mason, A. E. W. (Alfred Edward Woodley), 1865-1948",
          "Maugham, W. Somerset (William Somerset), 1874-1965",
          "Maxwell, W. B. (William Babington), 1866-1938",
          "McCarthy, Justin H. (Justin Huntly), 1860-1936",
          "McFee, William, 1881-1966",
          "McNeile, H. C. (Herman Cyril), 1888-1937",
          "Merrick, Leonard, 1864-1939",
          "Mill, John Stuart, 1806-1873",
          "Milne, A. A. (Alan Alexander), 1882-1956",
          "Moore, Frank Frankfort, 1855-1931",
          "Moore, George, 1852-1933",
          "Morley, John, 1838-1923",
          "Mottram, R. H. (Ralph Hale), 1883-1971",
          "Murray, Gilbert, 1866-1957",
          "Nesbit, E. (Edith), 1858-1924",
          "Newbolt, Henry John, Sir, 1862-1938",
          "Noyes, Alfred, 1880-1958",
          "Oliphant, Mrs. (Margaret), 1828-1897",
          "Onions, Oliver, 1873-1961",
          "Orczy, Emmuska Orczy, Baroness, 1865-1947",
          "Parker, Gilbert, 1862-1932",
          "Pemberton, Max, 1863-1950",
          "Philips, Austin, 1875-1947",
          "Phillpotts, Eden, 1862-1960",
          "Pound, Ezra, 1885-1972",
          "Quiller-Couch, Arthur, 1863-1944",
          "Reade, Charles, 1814-1884",
          "Reynolds, Baillie, Mrs",
          "Roberts, Morley, 1857-1942",
          "Rohmer, Sax, 1883-1959",
          "Rowlands, Effie Adelaide, 1866-1936",
          "Ruck, Berta, 1878-1978",
          "Sabatini, Rafael, 1875-1950",
          "Sackville-West, V. (Victoria), 1892-1962",
          "Schreiner, Olive, 1855-1920",
          "Smuts, Jan Christiaan, 1870-1950",
          "Stanford, Charles Villiers, 1852-1924",
          "Stephens, James, 1882-1950",
          "Stevenson, Robert Louis, 1850-1894",
          "Stribling, T. S. (Thomas Sigismund), 1881-1965",
          "Swan, Annie S., 1859-1943",
          "Terry, Ellen, Dame, 1847-1928",
          "Thackeray, William Makepeace, 1811-1863",
          "Thompson, Francis, 1859-1907",
          "Tolstoy, Leo, Graf, 1828-1910",
          "Tomlinson, H. M. (Henry Major), 1873-1958",
          "Trevelyan, George Macaulay, 1876-1962",
          "Tynan, Katharine, 1861-1931",
          "Vachell, Horace Annesley, 1861-1955",
          "Wallace, Edgar, 1875-1932",
          "Walpole, Hugh, 1884-1941",
          "Ward, Humphry, Mrs., 1851-1920",
          "Watson, John, 1850-1907",
          "White, Fred M.",
          "Wiggin, Kate Douglas, 1856-1923",
          "Wilde, Oscar, 1854-1900",
          "Wister, Owen, 1860-1938",
          "Wyllarde, Dolf",
          "Zangwill, Israel, 1864-1926",
          "A.P. Watt (Firm)",
          "Hodder and Stoughton",
          "T. Fisher Unwin (Firm)",
          "Saturday evening post",
          "Authors, American",
          "Authors and publishers",
          "Authors, English",
          "Literary agents",
          "History",
          "Literature publishing",
          "Publishers and publishing"],
        "publication_year_sort":"1887",
        "subject_headings_a":["Bennett, Arnold, 1867-1931",
          "Buchan, John, 1875-1940",
          "Chesterton, G. K. (Gilbert Keith), 1874-1936",
          "Churchill, Winston, 1874-1965",
          "Conrad, Joseph, 1857-1924",
          "Dickens, Charles, 1812-1870",
          "Hardy, Thomas, 1840-1928",
          "Kipling, Rudyard, 1865-1936",
          "Strindberg, August, 1849-1912",
          "Twain, Mark, 1835-1910",
          "Watt, A. P. (Alexander Pollock), 1834-1914",
          "Wells, H. G. (Herbert George), 1866-1946",
          "Wodehouse, P. G. (Pelham Grenville), 1881-1975",
          "Yeats, W. B. (William Butler), 1865-1939",
          "Alden, W. L. (William Livingston), 1837-1908",
          "Allen, Grant, 1848-1899",
          "Allingham, Margery, 1904-1966",
          "Anstey, F., 1856-1934",
          "Austen, Jane, 1775-1817",
          "Bagnold, Enid",
          "Baldwin, Stanley Baldwin, Earl, 1867-1947",
          "Balfour, Arthur James, 1848-1930",
          "Barlow, Jane, 1856-1917",
          "Belloc, Hilaire, 1870-1953",
          "Benavente, Jacinto, 1866-1954",
          "Benson, E. F. (Edward Frederic), 1867-1940",
          "Besant, Walter, 1836-1901",
          "Binyon, Laurence, 1869-1943",
          "Birmingham, George A., 1865-1950",
          "Birrell, Augustine, 1850-1933",
          "Blackwood, Algernon, 1869-1951",
          "Bolitho, Hector, 1897-1974",
          "Boothby, Guy, 1867-1905",
          "Braddon, M. E. (Mary Elizabeth), 1835-1915",
          "Brooke, Rupert, 1887-1915",
          "Buck, Pearl S. (Pearl Sydenstricker), 1892-1973",
          "Bullen, Frank Thomas, 1857-1915",
          "Burgess, Gelett, 1866-1951",
          "Burgin, G. B. (George Brown), 1856-1944",
          "Carroll, Lewis, 1832-1898",
          "Cary, Joyce, 1888-1957",
          "Christie, Agatha, 1890-1976",
          "Coleridge, Mary E. (Mary Elizabeth), 1861-1907",
          "Collins, Wilkie, 1824-1889",
          "Corelli, Marie, 1855-1924",
          "Crawford, F. Marion (Francis Marion), 1854-1909",
          "Crockett, S. R. (Samuel Rutherford), 1859-1914",
          "Crofts, Freeman Wills, 1879-1957",
          "Crompton, Richmal, 1890-1969",
          "Curzon of Kedleston, George Nathaniel Curzon, Marquess, 1859-1925",
          "Davidson, John, 1857-1909",
          "Doyle, Arthur Conan, 1859-1930",
          "Doyle, Lynn, 1873-1961",
          "Du Maurier, Daphne, 1907-1989",
          "Dunsany, Lord, 1878-1957",
          "Eliot, T. S. (Thomas Stearns), 1888-1965",
          "Fairlie, Gerard, 1899-1983",
          "Farnol, Jeffery, 1878-1952",
          "Flecker, James Elroy, 1884-1915",
          "Frankau, Gilbert, 1884-1952",
          "Frankau, Pamela, 1908-1967",
          "Gallon, Tom, 1866-1914",
          "Garnett, Constance, 1861-1946",
          "Gissing, George, 1857-1903",
          "Gladstone, W. E. (William Ewart), 1809-1898",
          "Glasgow, Ellen, 1873-1945",
          "Granville-Barker, Harley, 1877-1946",
          "Graves, Robert, 1895-1985",
          "Greenwood, Walter, 1903-1974",
          "Gwynn, Stephen Lucius, 1864-1950",
          "Hackett, Francis, 1883-1962",
          "Haggard, H. Rider (Henry Rider), 1856-1925",
          "Haldane, R. B. Haldane (Richard Burdon Haldane), Viscount, 1856-1928",
          "Harte, Bret, 1836-1902",
          "Hay, Ian",
          "Hearn, Lafcadio, 1850-1904",
          "Hewlett, Maurice, 1861-1923",
          "Hichens, Robert, 1864-1950",
          "Hill, Headon, 1857-1927",
          "Hope, Anthony, 1863-1933",
          "Horler, Sydney, 1888-1954",
          "Hudson, W. H. (William Henry), 1841-1922",
          "Huxley, Julian, 1887-1975",
          "Jackson, Laura (Riding), 1901-1991",
          "James, Henry, 1843-1916",
          "Jameson, Storm, 1891-1986",
          "Jerome, Jerome K. (Jerome Klapka), 1859-1927",
          "Jones, D. Gareth (David Gareth), 1940-",
          "Kingsley, Charles, 1819-1875",
          "Knox, Ronald Arbuthnott, 1888-1957",
          "Lang, Andrew, 1844-1912",
          "Lawless, Emily, 1845-1913",
          "Lawrence, D. H. (David Herbert), 1885-1930",
          "Le Feuvre, Amy",
          "Le Queux, William, 1864-1927",
          "Lloyd George, David, 1863-1945",
          "Locke, William John, 1863-1930",
          "London, Jack, 1876-1916",
          "Lucas, E. V. (Edward Verrall), 1868-1938",
          "Macaulay, Rose, 1881-1958",
          "MacDonald, George, 1824-1905",
          "Mackail, Denis, 1892-1971",
          "MacManus, Seumas, 1869-1960",
          "MacNeice, Louis, 1907-1963",
          "Maeterlinck, Maurice, 1862-1949",
          "Mansfield, Katherine, 1888-1923",
          "Marchmont, Arthur W., 1852-1923",
          "Masefield, John, 1878-1967",
          "Mason, A. E. W. (Alfred Edward Woodley), 1865-1948",
          "Maugham, W. Somerset (William Somerset), 1874-1965",
          "Maxwell, W. B. (William Babington), 1866-1938",
          "McCarthy, Justin H. (Justin Huntly), 1860-1936",
          "McFee, William, 1881-1966",
          "McNeile, H. C. (Herman Cyril), 1888-1937",
          "Merrick, Leonard, 1864-1939",
          "Mill, John Stuart, 1806-1873",
          "Milne, A. A. (Alan Alexander), 1882-1956",
          "Moore, Frank Frankfort, 1855-1931",
          "Moore, George, 1852-1933",
          "Morley, John, 1838-1923",
          "Mottram, R. H. (Ralph Hale), 1883-1971",
          "Murray, Gilbert, 1866-1957",
          "Nesbit, E. (Edith), 1858-1924",
          "Newbolt, Henry John, Sir, 1862-1938",
          "Noyes, Alfred, 1880-1958",
          "Oliphant, Mrs. (Margaret), 1828-1897",
          "Onions, Oliver, 1873-1961",
          "Orczy, Emmuska Orczy, Baroness, 1865-1947",
          "Parker, Gilbert, 1862-1932",
          "Pemberton, Max, 1863-1950",
          "Philips, Austin, 1875-1947",
          "Phillpotts, Eden, 1862-1960",
          "Pound, Ezra, 1885-1972",
          "Quiller-Couch, Arthur, 1863-1944",
          "Reade, Charles, 1814-1884",
          "Reynolds, Baillie, Mrs",
          "Roberts, Morley, 1857-1942",
          "Rohmer, Sax, 1883-1959",
          "Rowlands, Effie Adelaide, 1866-1936",
          "Ruck, Berta, 1878-1978",
          "Sabatini, Rafael, 1875-1950",
          "Sackville-West, V. (Victoria), 1892-1962",
          "Schreiner, Olive, 1855-1920",
          "Smuts, Jan Christiaan, 1870-1950",
          "Stanford, Charles Villiers, 1852-1924",
          "Stephens, James, 1882-1950",
          "Stevenson, Robert Louis, 1850-1894",
          "Stribling, T. S. (Thomas Sigismund), 1881-1965",
          "Swan, Annie S., 1859-1943",
          "Terry, Ellen, Dame, 1847-1928",
          "Thackeray, William Makepeace, 1811-1863",
          "Thompson, Francis, 1859-1907",
          "Tolstoy, Leo, Graf, 1828-1910",
          "Tomlinson, H. M. (Henry Major), 1873-1958",
          "Trevelyan, George Macaulay, 1876-1962",
          "Tynan, Katharine, 1861-1931",
          "Vachell, Horace Annesley, 1861-1955",
          "Wallace, Edgar, 1875-1932",
          "Walpole, Hugh, 1884-1941",
          "Ward, Humphry, Mrs., 1851-1920",
          "Watson, John, 1850-1907",
          "White, Fred M.",
          "Wiggin, Kate Douglas, 1856-1923",
          "Wilde, Oscar, 1854-1900",
          "Wister, Owen, 1860-1938",
          "Wyllarde, Dolf",
          "Zangwill, Israel, 1864-1926",
          "A.P. Watt (Firm)",
          "Hodder and Stoughton",
          "T. Fisher Unwin (Firm)",
          "Saturday evening post",
          "Authors, American",
          "Authors and publishers",
          "Authors, English",
          "Literary agents -- England -- History",
          "Literature publishing -- History",
          "Publishers and publishing -- History",
          "Literary agents",
          "Literature publishing",
          "Publishers and publishing",
          "England"],
        "note_related_work_a":["Related materials: See also A.P. Watt and Sons records, 1861-1971 (Berg Coll MSS Watt) at the New York Public Library"],
        "location_hierarchy_a":["unc",
          "unc:uncrarn",
          "unc:uncwil",
          "unc:uncwil:uncwilrbc"],
        "record_data_source_a":["ILSMARC",
          "EAD"],
        "subject_geographic_a":["England"],
        "call_number_schemes_a":["ALPHANUM"],
        "origin_place_search_a":["England",
          "United Kingdom"],
        "physical_description_a":["approximately 300,000 items (271.0 linear ft.)"],
        "note_access_restrictions_a":["This collection contains additional materials that are not available for immediate or same day access. Please contact Research and Instructional Service staff at wilsonlibrary@unc.edu to discuss options for consulting these materials"],
        "index_date":"2024-01-27T08:07:00Z"},
      {
        "id":"UNCb2431314",
        "url_a":["{\"href\":\"https://finding-aids.lib.unc.edu/03709/\",\"type\":\"findingaid\",\"note\":\"Finding aid\",\"restricted\":\"false\"}"],
        "items_a":["{\"notes\":[\"See Preservation staff for assistance with this microfilm. Use of this reel may require production of a use copy.\"],\"item_id\":\"i11137424\",\"loc_b\":\"trdga\",\"loc_n\":\"trdga\",\"status\":\"Not Available\",\"vol\":\"reel 1\",\"call_no\":\"M-3709\",\"cn_scheme\":\"ALPHANUM\"}",
          "{\"notes\":[\"See Preservation staff for assistance with this microfilm. Use of this reel may require production of a use copy.\"],\"item_id\":\"i11137418\",\"loc_b\":\"trdga\",\"loc_n\":\"trdga\",\"status\":\"Not Available\",\"vol\":\"reel 2\",\"call_no\":\"M-3709\",\"cn_scheme\":\"ALPHANUM\"}",
          "{\"notes\":[\"See Preservation staff for assistance with this microfilm. Use of this reel may require production of a use copy.\"],\"item_id\":\"i11137421\",\"loc_b\":\"trdga\",\"loc_n\":\"trdga\",\"status\":\"Not Available\",\"vol\":\"reel 3\",\"call_no\":\"M-3709\",\"cn_scheme\":\"ALPHANUM\"}",
          "{\"item_id\":\"i3489018\",\"loc_b\":\"wadc\",\"loc_n\":\"wadc\",\"status\":\"In-Library Use Only\",\"call_no\":\"3709\",\"cn_scheme\":\"ALPHANUM\"}"],
        "author_suggest":["Federal Writers' Project"],
        "names_a":["{\"name\":\"Federal Writers' Project\",\"type\":\"creator\"}"],
        "owner_a":["unc"],
        "misc_id_a":["NUCMC: ms 68000807"],
        "barcodes_a":["00050146055",
          "00050146073",
          "00050146064",
          "HALX-3684-00001"],
        "language_a":["English"],
        "local_id":"b2431314",
        "available_a":["Available"],
        "rollup_id":"OCLC25507475",
        "note_local_a":["Source of acquisition: Transfer 1946.",
          "Source of acquisition: Transfer 1946"],
        "title_suggest":["Federal Writers' Project papers, 1936-1940."],
        "title_main":"Federal Writers' Project papers, 1936-1940.",
        "title_sort_ssort_single":"federal writers project papers 1936 1940",
        "access_type_a":["At the Library"],
        "institution_a":["unc"],
        "oclc_number":"25507475",
        "creator_main_a":["Federal Writers' Project"],
        "note_general_a":["In the Southern Historical Collection, University of North Carolina at Chapel Hill (#3709).",
          "Master microfilm (M-3709) held by: NcU.",
          "Microfilm filmed by University of North Carolina, Library, Photographic Service, 1972."],
        "note_summary_a":["W.T. Couch (b. 1901), while director of the University of North Carolina Press, was also a part-time official of the Federal Writers' Project of the Works Progress Administration, as assistant and associate director for North Carolina, 1936-1937, and as director for the southern region, 1938-1939. These papers include his correspondence relating to the project, and the life histories of about 1,200 individuals, written by about 60 members of the project after one or more interviews with the subjects. Persons interviewed, many of them African Americans, described life in Alabama, Arkansas, Florida, Georgia, Louisiana, Oklahoma, South Carolina, Tennessee, and Virginia. There is a partial index to the many occupations of those interviewed. Also included, on microfilm, are ghost stories, local legends, etc., gathered in the project.",
          "Microfilm contents: Reel 1. Folders 110-184 -- Reel 2. Folders 185-272;276-280. -- Reel 3. Folders 273-275;281-359."],
        "primary_oclc_a":["25507475"],
        "resource_type_a":["Archival and manuscript material"],
        "shelf_numbers_a":["M-3709",
          "3709"],
        "subject_genre_a":["Biography",
          "Biographies"],
        "date_cataloged":"2016-10-06T04:00:00Z",
        "genre_headings_a":["Biography",
          "Biographies"],
        "subject_suggest":["Biography",
          "Biographies",
          "Couch, William T. (William Terry), 1901-1988",
          "Federal Writers' Project",
          "1933-1939",
          "New Deal, 1933-1939",
          "African Americans -- Southern States -- Social conditions",
          "Folklore -- Southern States",
          "New Deal, 1933-1939 -- North Carolina",
          "New Deal, 1933-1939 -- Southern States",
          "African Americans -- Social conditions",
          "Folklore",
          "Social conditions",
          "Alabama -- Biography",
          "Alabama -- Social conditions",
          "Arkansas -- Biography",
          "Arkansas -- Social conditions",
          "Florida -- Biography",
          "Florida -- Social conditions",
          "Georgia -- Biography",
          "Georgia -- Social conditions",
          "Louisiana -- Biography",
          "Louisiana -- Social conditions",
          "North Carolina -- Biography",
          "North Carolina -- Social conditions",
          "Oklahoma -- Biography",
          "Oklahoma -- Social conditions",
          "South Carolina -- Biography",
          "South Carolina -- Social conditions",
          "Southern States -- Social conditions",
          "Tennessee -- Biography",
          "Tennessee -- Social conditions",
          "Virginia -- Biography",
          "Virginia -- Social conditions",
          "Alabama",
          "Arkansas",
          "Florida",
          "Georgia",
          "Louisiana",
          "North Carolina",
          "Oklahoma",
          "South Carolina",
          "Southern States",
          "Tennessee",
          "Virginia"],
        "physical_media_a":["Microform",
          "Microfilm"],
        "subject_topical_a":["Couch, William T. (William Terry), 1901-1988",
          "Federal Writers' Project",
          "New Deal, 1933-1939",
          "African Americans",
          "Social conditions",
          "Folklore"],
        "publication_year_sort":"1936",
        "subject_headings_a":["Couch, William T. (William Terry), 1901-1988",
          "Federal Writers' Project",
          "1933-1939",
          "New Deal, 1933-1939",
          "African Americans -- Southern States -- Social conditions",
          "Folklore -- Southern States",
          "New Deal, 1933-1939 -- North Carolina",
          "New Deal, 1933-1939 -- Southern States",
          "African Americans -- Social conditions",
          "Folklore",
          "Social conditions",
          "Alabama -- Biography",
          "Alabama -- Social conditions",
          "Arkansas -- Biography",
          "Arkansas -- Social conditions",
          "Florida -- Biography",
          "Florida -- Social conditions",
          "Georgia -- Biography",
          "Georgia -- Social conditions",
          "Louisiana -- Biography",
          "Louisiana -- Social conditions",
          "North Carolina -- Biography",
          "North Carolina -- Social conditions",
          "Oklahoma -- Biography",
          "Oklahoma -- Social conditions",
          "South Carolina -- Biography",
          "South Carolina -- Social conditions",
          "Southern States -- Social conditions",
          "Tennessee -- Biography",
          "Tennessee -- Social conditions",
          "Virginia -- Biography",
          "Virginia -- Social conditions",
          "Alabama",
          "Arkansas",
          "Florida",
          "Georgia",
          "Louisiana",
          "North Carolina",
          "Oklahoma",
          "South Carolina",
          "Southern States",
          "Tennessee",
          "Virginia"],
        "note_described_by_a":["Unpublished inventory available."],
        "note_related_work_a":["Bernice Kelly Harris Papers (#3804); William T. Couch Papers (#3825), Southern Historical Collection, University of North Carolina at Chapel Hill.",
          "Related publications: Selected life histories were published in THESE ARE OUR LIVES (Chapel Hill, 1939)."],
        "location_hierarchy_a":["unc",
          "unc:unclibr",
          "unc:uncsoun",
          "unc:uncwil",
          "unc:uncwil:uncwilshc"],
        "record_data_source_a":["ILSMARC",
          "EAD"],
        "subject_geographic_a":["Southern States",
          "North Carolina",
          "Alabama",
          "Arkansas",
          "Florida",
          "Georgia",
          "Louisiana",
          "Oklahoma",
          "South Carolina",
          "Tennessee",
          "Virginia"],
        "call_number_schemes_a":["ALPHANUM"],
        "origin_place_search_a":["United States"],
        "physical_description_a":["12,000 items (15.0 linear feet)"],
        "subject_chronological_a":["1933-1939"],
        "note_access_restrictions_a":["Original life histories are closed. Researchers are requested to use the microfilm."],
        "index_date":"2024-01-26T08:51:44Z"},
      {
        "id":"UNCb4544743",
        "url_a":["{\"href\":\"http://finding-aids.lib.unc.edu/20367/\",\"type\":\"findingaid\",\"note\":\"Finding aid\",\"restricted\":\"false\"}",
          "{\"href\":\"http://dc.lib.unc.edu/cdm/landingpage/collection/ferris/\",\"type\":\"related\",\"note\":\"Selected digitized photographs\",\"restricted\":\"false\"}"],
        "items_a":["{\"item_id\":\"i6125082\",\"loc_b\":\"wadb\",\"loc_n\":\"wadb\",\"status\":\"In-Library Use Only\",\"call_no\":\"20367\",\"cn_scheme\":\"ALPHANUM\"}"],
        "author_suggest":["Ferris, William R."],
        "names_a":["{\"name\":\"Ferris, William R.\",\"type\":\"creator\",\"id\":\"https://id.loc.gov/authorities/names/n82025112\"}"],
        "owner_a":["unc"],
        "language_a":["English"],
        "local_id":"b4544743",
        "available_a":["Available"],
        "rollup_id":"OCLC56931437",
        "note_local_a":["Source of acquisition: Acquired 2002-2022",
          "Source of acquisition: Acquired 2002-2019",
          "Source of acquisition: Acquired 2002-2018.",
          "Source of acquisition: Acquired 2002-2017.",
          "Source of acquisition: Acquired 2002-2016."],
        "title_suggest":["William R. Ferris collection, 1910s-2022"],
        "title_main":"William R. Ferris collection, 1910s-2022",
        "title_sort_ssort_single":"william r ferris collection 1910s 2022",
        "access_type_a":["At the Library"],
        "institution_a":["unc"],
        "oclc_number_old_a":["56931433",
          "56931436",
          "56931438",
          "56931440"],
        "oclc_number":"56931437",
        "creator_main_a":["Ferris, William R."],
        "note_general_a":["In the Southern Folklife Collection, University of North Carolina at Chapel Hill (#20367)",
          "In English"],
        "note_summary_a":["The collection of white folklorist, author, professor, and filmmaker William R. Ferris (1942- ) of Vicksburg, Miss., contains professional and personal papers, photographs, sound recordings, film, video recordings, artifacts, and other items documenting his life and work from the early 1940s through the 2010s. Professional papers include materials related to his university teaching career and his administrative career, especially in university centers for study and the National Endowment for the Humanities. Personal papers largely pertain to his student years and family. Photographs, films, papers, printed items, sound and video recordings, digital files, and other materials reflect his scholarly research interests and documentary production. Topics include Mississippi and the Mississippi Delta; African American life and culture; black churches; folk, blues, gospel, fife and drum corps, and other genres of music; blues musicians; southern writers; folk and music festivals; folk arts, culture, and humor; auctioneers and mule trading; the Ku Klux Klan; and prisons, especially Parchman Farm, the Mississippi State Penitentiary"],
        "primary_oclc_a":["56931437"],
        "resource_type_a":["Archival and manuscript material"],
        "shelf_numbers_a":["20367"],
        "subject_genre_a":["Music",
          "Photographs",
          "Songs and music",
          "Encyclopedias",
          "Humor",
          "Motion pictures",
          "Blues (Music)",
          "Gospel music",
          "History",
          "Photograph",
          "Wit and Humor",
          "Reference"],
        "date_cataloged":"2022-08-11T04:00:00Z",
        "genre_headings_a":["Music",
          "Photographs",
          "Songs and music",
          "Encyclopedias",
          "Humor",
          "Motion pictures",
          "Blues (Music)",
          "Gospel music",
          "History",
          "Photograph",
          "Wit and Humor"],
        "subject_suggest":["Music",
          "Photographs",
          "Songs and music",
          "Encyclopedias",
          "Humor",
          "Motion pictures",
          "Blues (Music)",
          "Gospel music",
          "History",
          "Photograph",
          "Wit and Humor",
          "Baraka, Amiri, 1934-2014",
          "Bobb, Victor, 1892-1978",
          "Brooks, Cleanth, 1906-1994",
          "Chapman, Fannie Bell",
          "Clark, Judith",
          "Clark, Leon",
          "Clinton, Bill, 1946-",
          "Clinton, Hillary Rodham",
          "Dixon, Willie, 1915-1992",
          "Dollard, John, 1900-1980",
          "Dotson, Louis",
          "Evans, Walker, 1903-1975",
          "Faulkner, William, 1897-1962",
          "Ferris, Marcie Cohen",
          "Ferris, William R.",
          "Foote, Shelby",
          "Gaines, Ernest J., 1933-2019",
          "Ginsberg, Allen, 1926-1997",
          "Gordon, Amanda, 1895-1980",
          "Hamblett, Theora, 1895-1977",
          "Jones, Bessie, 1902-1984",
          "King, B. B.",
          "Lomax, Alan, 1915-2002",
          "Lum, Ray, 1891-1976",
          "Miller, Arthur, 1915-2005",
          "Mohamed, Ethel Wright",
          "Reed, Ola Belle, 1916-2002",
          "Seeger, Charles, 1886-1979",
          "Seeger, Pete, 1919-2014",
          "Smith, Harry",
          "Thomas, Son, 1926-1993",
          "Turner, Othar",
          "Walker, Alice, 1944-",
          "Warner, Pecolia",
          "Warren, Robert Penn, 1905-1989",
          "Welty, Eudora, 1909-2001",
          "Farris family",
          "Center for Southern Folklore",
          "Jackson State University -- Faculty -- History -- 20th century",
          "Ku Klux Klan (1915- )",
          "Mississippi State Penitentiary",
          "National Endowment for the Humanities",
          "Rose Hill Church (Vicksburg, Miss.)",
          "University of Mississippi -- Faculty -- History -- 20th century",
          "University of Mississippi. Center for the Study of Southern Culture",
          "University of North Carolina at Chapel Hill -- Faculty",
          "University of North Carolina at Chapel Hill. Center for the Study of the American South",
          "Woodrow Wilson International Center for Scholars",
          "Yale University -- Faculty -- History -- 20th century",
          "Jackson State University",
          "University of Mississippi",
          "University of North Carolina at Chapel Hill",
          "Yale University",
          "1900-1999",
          "African American folk art",
          "African American musicians -- Southern States",
          "African Americans -- Southern States -- Music",
          "African Americans -- Southern States -- Photographs",
          "African Americans -- Southern States -- Social life and customs",
          "Auctioneers -- Southern States",
          "Chain gangs",
          "Documentary films -- Production and direction",
          "Documentary films -- Southern States",
          "Families -- Mississippi -- Social life and customs",
          "Families -- Southern States -- Social life and customs",
          "Fife and drum corps music",
          "Folk art -- Southern States",
          "Folk songs, English -- Mississippi",
          "Folklore -- Study and teaching",
          "Handicraft -- Southern States",
          "Musicians -- Photographs",
          "Musicians -- Southern States",
          "Photographers -- Southern States",
          "Prisons -- Mississippi",
          "Quilting -- Southern States",
          "Textile crafts -- Southern States",
          "Wit and humor",
          "Humor",
          "African American musicians",
          "African Americans",
          "African Americans -- Social life and customs",
          "Documentary films",
          "Families -- Social life and customs",
          "Folk art",
          "Folk songs, English",
          "Handicraft",
          "Literature",
          "Manners and customs",
          "Musicians",
          "Photographers",
          "Prisons",
          "Quilting",
          "Race relations",
          "Social conditions",
          "Textile crafts",
          "Universities and colleges -- Faculty",
          "Auctioneers",
          "Delta (Miss. : Region) -- History",
          "Delta (Miss. : Region) -- Social life and customs",
          "Delta (Miss. : Region) -- Songs and music",
          "Mississippi -- History",
          "Mississippi -- Photographs",
          "Mississippi -- Social conditions",
          "Mississippi -- Social life and customs",
          "Mississippi -- Songs and music",
          "Southern States -- Encyclopedias",
          "Southern States -- In literature",
          "Southern States -- Photographs",
          "Southern States -- Race relations",
          "Southern States -- Religious life and customs",
          "Southern States -- Social life and customs",
          "Southern States -- Songs and music",
          "Mississippi",
          "Mississippi -- Delta (Region)",
          "Southern States"],
        "subject_topical_a":["Baraka, Amiri, 1934-2014",
          "Bobb, Victor, 1892-1978",
          "Brooks, Cleanth, 1906-1994",
          "Chapman, Fannie Bell",
          "Clark, Judith",
          "Clark, Leon",
          "Clinton, Bill, 1946-",
          "Clinton, Hillary Rodham",
          "Dixon, Willie, 1915-1992",
          "Dollard, John, 1900-1980",
          "Dotson, Louis",
          "Evans, Walker, 1903-1975",
          "Faulkner, William, 1897-1962",
          "Ferris, Marcie Cohen",
          "Ferris, William R.",
          "Foote, Shelby",
          "Gaines, Ernest J., 1933-2019",
          "Ginsberg, Allen, 1926-1997",
          "Gordon, Amanda, 1895-1980",
          "Hamblett, Theora, 1895-1977",
          "Jones, Bessie, 1902-1984",
          "King, B. B.",
          "Lomax, Alan, 1915-2002",
          "Lum, Ray, 1891-1976",
          "Miller, Arthur, 1915-2005",
          "Mohamed, Ethel Wright",
          "Reed, Ola Belle, 1916-2002",
          "Seeger, Charles, 1886-1979",
          "Seeger, Pete, 1919-2014",
          "Smith, Harry",
          "Thomas, Son, 1926-1993",
          "Turner, Othar",
          "Walker, Alice, 1944-",
          "Warner, Pecolia",
          "Warren, Robert Penn, 1905-1989",
          "Welty, Eudora, 1909-2001",
          "Farris family",
          "Center for Southern Folklore",
          "Jackson State University",
          "Faculty",
          "History",
          "Ku Klux Klan (1915- )",
          "Mississippi State Penitentiary",
          "National Endowment for the Humanities",
          "Rose Hill Church (Vicksburg, Miss.)",
          "University of Mississippi",
          "University of Mississippi. Center for the Study of Southern Culture",
          "University of North Carolina at Chapel Hill",
          "University of North Carolina at Chapel Hill. Center for the Study of the American South",
          "Woodrow Wilson International Center for Scholars",
          "Yale University",
          "African American folk art",
          "African American musicians",
          "African Americans",
          "Social life and customs",
          "Auctioneers",
          "Chain gangs",
          "Documentary films",
          "Production and direction",
          "Families",
          "Fife and drum corps music",
          "Folk art",
          "Folk songs, English",
          "Folklore",
          "Study and teaching",
          "Handicraft",
          "Musicians",
          "Photographers",
          "Prisons",
          "Quilting",
          "Textile crafts",
          "Wit and humor",
          "Humor",
          "Literature",
          "Manners and customs",
          "Race relations",
          "Social conditions",
          "Universities and colleges",
          "In literature",
          "Religious life and customs"],
        "publication_year_sort":"1914",
        "subject_headings_a":["Baraka, Amiri, 1934-2014",
          "Bobb, Victor, 1892-1978",
          "Brooks, Cleanth, 1906-1994",
          "Chapman, Fannie Bell",
          "Clark, Judith",
          "Clark, Leon",
          "Clinton, Bill, 1946-",
          "Clinton, Hillary Rodham",
          "Dixon, Willie, 1915-1992",
          "Dollard, John, 1900-1980",
          "Dotson, Louis",
          "Evans, Walker, 1903-1975",
          "Faulkner, William, 1897-1962",
          "Ferris, Marcie Cohen",
          "Ferris, William R.",
          "Foote, Shelby",
          "Gaines, Ernest J., 1933-2019",
          "Ginsberg, Allen, 1926-1997",
          "Gordon, Amanda, 1895-1980",
          "Hamblett, Theora, 1895-1977",
          "Jones, Bessie, 1902-1984",
          "King, B. B.",
          "Lomax, Alan, 1915-2002",
          "Lum, Ray, 1891-1976",
          "Miller, Arthur, 1915-2005",
          "Mohamed, Ethel Wright",
          "Reed, Ola Belle, 1916-2002",
          "Seeger, Charles, 1886-1979",
          "Seeger, Pete, 1919-2014",
          "Smith, Harry",
          "Thomas, Son, 1926-1993",
          "Turner, Othar",
          "Walker, Alice, 1944-",
          "Warner, Pecolia",
          "Warren, Robert Penn, 1905-1989",
          "Welty, Eudora, 1909-2001",
          "Farris family",
          "Center for Southern Folklore",
          "Jackson State University -- Faculty -- History -- 20th century",
          "Ku Klux Klan (1915- )",
          "Mississippi State Penitentiary",
          "National Endowment for the Humanities",
          "Rose Hill Church (Vicksburg, Miss.)",
          "University of Mississippi -- Faculty -- History -- 20th century",
          "University of Mississippi. Center for the Study of Southern Culture",
          "University of North Carolina at Chapel Hill -- Faculty",
          "University of North Carolina at Chapel Hill. Center for the Study of the American South",
          "Woodrow Wilson International Center for Scholars",
          "Yale University -- Faculty -- History -- 20th century",
          "Jackson State University",
          "University of Mississippi",
          "University of North Carolina at Chapel Hill",
          "Yale University",
          "1900-1999",
          "African American folk art",
          "African American musicians -- Southern States",
          "African Americans -- Southern States -- Music",
          "African Americans -- Southern States -- Photographs",
          "African Americans -- Southern States -- Social life and customs",
          "Auctioneers -- Southern States",
          "Chain gangs",
          "Documentary films -- Production and direction",
          "Documentary films -- Southern States",
          "Families -- Mississippi -- Social life and customs",
          "Families -- Southern States -- Social life and customs",
          "Fife and drum corps music",
          "Folk art -- Southern States",
          "Folk songs, English -- Mississippi",
          "Folklore -- Study and teaching",
          "Handicraft -- Southern States",
          "Musicians -- Photographs",
          "Musicians -- Southern States",
          "Photographers -- Southern States",
          "Prisons -- Mississippi",
          "Quilting -- Southern States",
          "Textile crafts -- Southern States",
          "Wit and humor",
          "Humor",
          "African American musicians",
          "African Americans",
          "African Americans -- Social life and customs",
          "Documentary films",
          "Families -- Social life and customs",
          "Folk art",
          "Folk songs, English",
          "Handicraft",
          "Literature",
          "Manners and customs",
          "Musicians",
          "Photographers",
          "Prisons",
          "Quilting",
          "Race relations",
          "Social conditions",
          "Textile crafts",
          "Universities and colleges -- Faculty",
          "Auctioneers",
          "Delta (Miss. : Region) -- History",
          "Delta (Miss. : Region) -- Social life and customs",
          "Delta (Miss. : Region) -- Songs and music",
          "Mississippi -- History",
          "Mississippi -- Photographs",
          "Mississippi -- Social conditions",
          "Mississippi -- Social life and customs",
          "Mississippi -- Songs and music",
          "Southern States -- Encyclopedias",
          "Southern States -- In literature",
          "Southern States -- Photographs",
          "Southern States -- Race relations",
          "Southern States -- Religious life and customs",
          "Southern States -- Social life and customs",
          "Southern States -- Songs and music",
          "Mississippi",
          "Mississippi -- Delta (Region)",
          "Southern States"],
        "location_hierarchy_a":["unc",
          "unc:uncsouz",
          "unc:uncwil",
          "unc:uncwil:uncwilsfc"],
        "record_data_source_a":["ILSMARC",
          "EAD"],
        "subject_geographic_a":["Southern States",
          "Mississippi",
          "Delta (Region)",
          "Delta (Miss. : Region)"],
        "call_number_schemes_a":["ALPHANUM"],
        "origin_place_search_a":["United States"],
        "physical_description_a":["approximately 252,000 items (approximately 633.5 linear feet)"],
        "subject_chronological_a":["20th century",
          "1900-1999"],
        "note_access_restrictions_a":["This collection contains additional materials that are not available for immediate or same day access. Please contact Research and Instructional Service staff at wilsonlibrary@unc.edu to discuss options for consulting these materials",
          "Parts of Series 1.1. and Series 1.2.; Closed Materials series in the Additions of 2004-2012; personal photographs in Series 2.1. and in the Additions of 2004-2012 are closed to research for the lifetime of William Ferris",
          "Photographic negatives in Series 2.2. are available with special staff assistance",
          "Journals in Subgroup B. Additions of 2004-2012 and Subgroup C. Additions after 2012 are closed until 2031",
          "Library use only for digital files (\"DF\") found in Series 11.3. and Series 13.2. Contact wilsonlibrary@unc.edu to discuss access options",
          "Use of audio or moving image materials may require production of listening or viewing copies",
          "Access to streaming audio or moving image materials may be restricted to researchers who can authenticate with an ONYEN or who are physically present on campus. For further information about access to streaming audiovisual materials, contact Research and Instructional Services staff at Wilsonlibrary@unc.edu"],
        "index_date":"2024-02-04T03:36:39Z"},
      {
        "id":"UNCb2453911",
        "url_a":["{\"href\":\"https://finding-aids.lib.unc.edu/03615/\",\"type\":\"findingaid\",\"note\":\"Finding aid\",\"restricted\":\"false\"}"],
        "items_a":["{\"item_id\":\"i11071213\",\"loc_b\":\"dgdda\",\"loc_n\":\"dgdda\",\"status\":\"Available\",\"vol\":\"reel 1\",\"call_no\":\"1-4485 (3615)\",\"cn_scheme\":\"ALPHANUM\"}",
          "{\"item_id\":\"i11071216\",\"loc_b\":\"dgdda\",\"loc_n\":\"dgdda\",\"status\":\"Available\",\"vol\":\"reel 2\",\"call_no\":\"1-4485 (3615)\",\"cn_scheme\":\"ALPHANUM\"}",
          "{\"item_id\":\"i11071219\",\"loc_b\":\"dgdda\",\"loc_n\":\"dgdda\",\"status\":\"Available\",\"vol\":\"reel 3\",\"call_no\":\"1-4485 (3615)\",\"cn_scheme\":\"ALPHANUM\"}",
          "{\"item_id\":\"i11071222\",\"loc_b\":\"dgdda\",\"loc_n\":\"dgdda\",\"status\":\"Available\",\"vol\":\"reel 4\",\"call_no\":\"1-4485 (3615)\",\"cn_scheme\":\"ALPHANUM\"}",
          "{\"item_id\":\"i11071225\",\"loc_b\":\"dgdda\",\"loc_n\":\"dgdda\",\"status\":\"Available\",\"vol\":\"reel 5\",\"call_no\":\"1-4485 (3615)\",\"cn_scheme\":\"ALPHANUM\"}",
          "{\"item_id\":\"i11071228\",\"loc_b\":\"dgdda\",\"loc_n\":\"dgdda\",\"status\":\"Available\",\"vol\":\"reel 6\",\"call_no\":\"1-4485 (3615)\",\"cn_scheme\":\"ALPHANUM\"}",
          "{\"item_id\":\"i11071231\",\"loc_b\":\"dgdda\",\"loc_n\":\"dgdda\",\"status\":\"Available\",\"vol\":\"reel 7\",\"call_no\":\"1-4485 (3615)\",\"cn_scheme\":\"ALPHANUM\"}",
          "{\"item_id\":\"i11071234\",\"loc_b\":\"dgdda\",\"loc_n\":\"dgdda\",\"status\":\"Available\",\"vol\":\"reel 8\",\"call_no\":\"1-4485 (3615)\",\"cn_scheme\":\"ALPHANUM\"}",
          "{\"item_id\":\"i11071237\",\"loc_b\":\"dgdda\",\"loc_n\":\"dgdda\",\"status\":\"Available\",\"vol\":\"reel 9\",\"call_no\":\"1-4485 (3615)\",\"cn_scheme\":\"ALPHANUM\"}",
          "{\"item_id\":\"i11071308\",\"loc_b\":\"dgdda\",\"loc_n\":\"dgdda\",\"status\":\"Available\",\"vol\":\"reel 10\",\"call_no\":\"1-4485 (3615)\",\"cn_scheme\":\"ALPHANUM\"}",
          "{\"item_id\":\"i11071305\",\"loc_b\":\"dgdda\",\"loc_n\":\"dgdda\",\"status\":\"Available\",\"vol\":\"reel 11\",\"call_no\":\"1-4485 (3615)\",\"cn_scheme\":\"ALPHANUM\"}",
          "{\"item_id\":\"i11071302\",\"loc_b\":\"dgdda\",\"loc_n\":\"dgdda\",\"status\":\"Available\",\"vol\":\"reel 12\",\"call_no\":\"1-4485 (3615)\",\"cn_scheme\":\"ALPHANUM\"}",
          "{\"item_id\":\"i11071299\",\"loc_b\":\"dgdda\",\"loc_n\":\"dgdda\",\"status\":\"Available\",\"vol\":\"reel 13\",\"call_no\":\"1-4485 (3615)\",\"cn_scheme\":\"ALPHANUM\"}",
          "{\"item_id\":\"i11071296\",\"loc_b\":\"dgdda\",\"loc_n\":\"dgdda\",\"status\":\"Available\",\"vol\":\"reel 14\",\"call_no\":\"1-4485 (3615)\",\"cn_scheme\":\"ALPHANUM\"}",
          "{\"item_id\":\"i11071293\",\"loc_b\":\"dgdda\",\"loc_n\":\"dgdda\",\"status\":\"Available\",\"vol\":\"reel 15\",\"call_no\":\"1-4485 (3615)\",\"cn_scheme\":\"ALPHANUM\"}",
          "{\"item_id\":\"i11071290\",\"loc_b\":\"dgdda\",\"loc_n\":\"dgdda\",\"status\":\"Available\",\"vol\":\"reel 16\",\"call_no\":\"1-4485 (3615)\",\"cn_scheme\":\"ALPHANUM\"}",
          "{\"item_id\":\"i11071287\",\"loc_b\":\"dgdda\",\"loc_n\":\"dgdda\",\"status\":\"Available\",\"vol\":\"reel 17\",\"call_no\":\"1-4485 (3615)\",\"cn_scheme\":\"ALPHANUM\"}",
          "{\"item_id\":\"i11071284\",\"loc_b\":\"dgdda\",\"loc_n\":\"dgdda\",\"status\":\"Available\",\"vol\":\"reel 18\",\"call_no\":\"1-4485 (3615)\",\"cn_scheme\":\"ALPHANUM\"}",
          "{\"item_id\":\"i11071281\",\"loc_b\":\"dgdda\",\"loc_n\":\"dgdda\",\"status\":\"Available\",\"vol\":\"reel 19\",\"call_no\":\"1-4485 (3615)\",\"cn_scheme\":\"ALPHANUM\"}",
          "{\"item_id\":\"i11071278\",\"loc_b\":\"dgdda\",\"loc_n\":\"dgdda\",\"status\":\"Available\",\"vol\":\"reel 20\",\"call_no\":\"1-4485 (3615)\",\"cn_scheme\":\"ALPHANUM\"}",
          "{\"item_id\":\"i11071275\",\"loc_b\":\"dgdda\",\"loc_n\":\"dgdda\",\"status\":\"Available\",\"vol\":\"reel 21\",\"call_no\":\"1-4485 (3615)\",\"cn_scheme\":\"ALPHANUM\"}",
          "{\"item_id\":\"i11071272\",\"loc_b\":\"dgdda\",\"loc_n\":\"dgdda\",\"status\":\"Available\",\"vol\":\"reel 22\",\"call_no\":\"1-4485 (3615)\",\"cn_scheme\":\"ALPHANUM\"}",
          "{\"item_id\":\"i11071269\",\"loc_b\":\"dgdda\",\"loc_n\":\"dgdda\",\"status\":\"Available\",\"vol\":\"reel 23\",\"call_no\":\"1-4485 (3615)\",\"cn_scheme\":\"ALPHANUM\"}",
          "{\"item_id\":\"i11071266\",\"loc_b\":\"dgdda\",\"loc_n\":\"dgdda\",\"status\":\"Available\",\"vol\":\"reel 24\",\"call_no\":\"1-4485 (3615)\",\"cn_scheme\":\"ALPHANUM\"}",
          "{\"item_id\":\"i11071263\",\"loc_b\":\"dgdda\",\"loc_n\":\"dgdda\",\"status\":\"Available\",\"vol\":\"reel 25\",\"call_no\":\"1-4485 (3615)\",\"cn_scheme\":\"ALPHANUM\"}",
          "{\"item_id\":\"i11071260\",\"loc_b\":\"dgdda\",\"loc_n\":\"dgdda\",\"status\":\"Available\",\"vol\":\"reel 26\",\"call_no\":\"1-4485 (3615)\",\"cn_scheme\":\"ALPHANUM\"}",
          "{\"item_id\":\"i11071257\",\"loc_b\":\"dgdda\",\"loc_n\":\"dgdda\",\"status\":\"Available\",\"vol\":\"reel 27\",\"call_no\":\"1-4485 (3615)\",\"cn_scheme\":\"ALPHANUM\"}",
          "{\"item_id\":\"i11071254\",\"loc_b\":\"dgdda\",\"loc_n\":\"dgdda\",\"status\":\"Available\",\"vol\":\"reel 28\",\"call_no\":\"1-4485 (3615)\",\"cn_scheme\":\"ALPHANUM\"}",
          "{\"item_id\":\"i11071251\",\"loc_b\":\"dgdda\",\"loc_n\":\"dgdda\",\"status\":\"Available\",\"vol\":\"reel 29\",\"call_no\":\"1-4485 (3615)\",\"cn_scheme\":\"ALPHANUM\"}",
          "{\"item_id\":\"i11071248\",\"loc_b\":\"dgdda\",\"loc_n\":\"dgdda\",\"status\":\"Available\",\"vol\":\"reel 30\",\"call_no\":\"1-4485 (3615)\",\"cn_scheme\":\"ALPHANUM\"}",
          "{\"item_id\":\"i11071245\",\"loc_b\":\"dgdda\",\"loc_n\":\"dgdda\",\"status\":\"Available\",\"vol\":\"reel 31\",\"call_no\":\"1-4485 (3615)\",\"cn_scheme\":\"ALPHANUM\"}",
          "{\"item_id\":\"i11071242\",\"loc_b\":\"dgdda\",\"loc_n\":\"dgdda\",\"status\":\"Available\",\"vol\":\"reel 32\",\"call_no\":\"1-4485 (3615)\",\"cn_scheme\":\"ALPHANUM\"}",
          "{\"item_id\":\"i11071239\",\"loc_b\":\"dgdda\",\"loc_n\":\"dgdda\",\"status\":\"Available\",\"vol\":\"reel 33\",\"call_no\":\"1-4485 (3615)\",\"cn_scheme\":\"ALPHANUM\"}",
          "{\"item_id\":\"i13670840\",\"loc_b\":\"dgdda\",\"loc_n\":\"dgdda\",\"status\":\"Available\",\"vol\":\"Reel 30.1 (30A)\",\"call_no\":\"1-4485 (3615)\",\"cn_scheme\":\"ALPHANUM\"}",
          "{\"item_id\":\"i3520963\",\"loc_b\":\"wadc\",\"loc_n\":\"wadc\",\"status\":\"In-Library Use Only\",\"call_no\":\"3615\",\"cn_scheme\":\"ALPHANUM\"}"],
        "author_suggest":["Penn School (Saint Helena Island, S.C.)"],
        "names_a":["{\"name\":\"Penn School (Saint Helena Island, S.C.)\",\"type\":\"creator\"}"],
        "owner_a":["unc"],
        "barcodes_a":["00051779397",
          "00051779510",
          "00051779501",
          "00051779388",
          "00051779495",
          "00051779379",
          "00051779253",
          "00051779262",
          "00051779146",
          "00051779137",
          "00051779020",
          "00051779011",
          "00051779725",
          "00051779841",
          "00051779967",
          "00051780081",
          "00051780205",
          "00051779716",
          "00051779832",
          "00051779958",
          "00051780072",
          "00051780198",
          "00051779707",
          "00051779823",
          "00051779949",
          "00051780063",
          "00051780189",
          "00051779690",
          "00051779814",
          "00051779930",
          "00051780170",
          "00051779681",
          "00051779805",
          "00051780054"],
        "holdings_a":["{\"loc_b\":\"dgdda\",\"loc_n\":\"dgdda\",\"call_no\":\"1-4485 (3615)\"}",
          "{\"loc_b\":\"wadc\",\"loc_n\":\"wadc\",\"call_no\":\"3615\"}"],
        "language_a":["English"],
        "local_id":"b2453911",
        "available_a":["Available"],
        "rollup_id":"OCLC27183726",
        "note_local_a":["Source of acquisition: Deposits 1962-1965, 1981-2005, 2011-2012."],
        "title_suggest":["Penn School papers, 1862-2005 and undated (bulk 1862-1949)."],
        "title_main":"Penn School papers, 1862-2005 and undated (bulk 1862-1949).",
        "title_sort_ssort_single":"penn school papers 1862 2005 and undated bulk 1862 1949",
        "access_type_a":["At the Library"],
        "institution_a":["unc"],
        "oclc_number":"27183726",
        "creator_main_a":["Penn School (Saint Helena Island, S.C.)"],
        "note_general_a":["In the Southern Historical Collection, University of North Carolina at Chapel Hill (#3615).",
          "Master microfilm (M-3615) held by: NcU.",
          "Microfilm filmed by University of North Carolina, Library, Photographic Service, 1976."],
        "note_summary_a":["The Penn School on Saint Helena Island, S.C., was founded during the Civil War by northern philanthropists and white missionaries for former enslaved individuals in an area occupied by the United States Army. Over the years, with continuing philanthropic support, it served as school, health agency, and cooperative society for rural African Americans of the Sea Islands. The first principals were Laura M. Towne and Ellen Murray, followed around 1908 by Rossa B. Cooley and Grace B. House, and in 1944 by Howard Kester and Alice Kester. The school closed in 1948 and became Penn Community Services in 1951, with Courtney Siceloff as the first director. The original deposits are papers, mostly 1900-1950 and primarily correspondence of the directors and of the trustees, treasurers, and publicity workers located elsewhere, and photographs. Topics include emancipation, African American education, Reconstruction, political and social change in South Carolina, agricultural extension work, public health issues, damage from hurricanes, World War I and World War II, the boll weevil and the cotton industry, the effects of the Great Depression on the school and the local population, changes in the school leading to a greater emphasis on social action in the outer world, and the end of the school and the turn to community service. Volumes include diaries, extracts from letters, recollections, minutes of the board of trustees, ledgers, cashbooks, inventories, financial records, registers of students and teachers, and minutes of various clubs and societies. Printed materials consists of newspapers clippings, pamphlets, promotional literature, school materials, administrative circulars, and annual reports. There are also about 3,000 photographs in the collection, dating from the 1860s to 1953 (bulk 1905-1944), documenting school activities, Island scenes and Islanders, classes and teachers, baptisms, agricultural activities, parades, fairs, and special events at the Penn School. The Addition of November 2012 includes papers, volumes, printed materials, photographs, audio recordings, and film that are similar in scope and content to the original deposit. Also included is a copy of De Nyew Testament, the Gullah translation of the New Testament (2005).",
          "Microfilm contents: Reels 1-32: See finding aid. -- Reel 33. Inventory of the photographs (typescript)."],
        "primary_oclc_a":["27183726"],
        "resource_type_a":["Archival and manuscript material"],
        "shelf_numbers_a":["1-4485 (3615)",
          "3615"],
        "subject_genre_a":["Photographs",
          "Records and correspondence",
          "History"],
        "date_cataloged":"2019-06-28T04:00:00Z",
        "genre_headings_a":["Photographs",
          "Records and correspondence",
          "History"],
        "subject_suggest":["Photographs",
          "Records and correspondence",
          "History",
          "Cooley, Rossa B. (Rossa Belle), 1873-",
          "House, Grace Bigelow, 1877-",
          "Kester, Alice Harris",
          "Kester, Howard, 1904-1977",
          "Murray, Ellen, 1834-1908",
          "Towne, Laura M. (Laura Matilda), 1825-1901",
          "Penn School (Saint Helena Island, S.C.)",
          "World War (1914-1918)",
          "World War (1939-1945)",
          "Since 1865",
          "African American children -- Sea Islands",
          "African American soldiers -- History -- 20th century",
          "African Americans -- Education -- South Carolina -- History",
          "Reconstruction (U.S. history, 1865-1877)",
          "African Americans -- Services for -- South Carolina",
          "African Americans -- Societies, etc",
          "African Americans -- South Carolina -- History",
          "African Americans -- South Carolina -- Social life and customs",
          "Agricultural education -- South Carolina",
          "Agricultural extension work -- South Carolina",
          "Agriculture -- Sea Islands -- Photographs",
          "Agriculture -- Study and teaching",
          "Basket making",
          "Boll weevil -- South Carolina -- History",
          "Charity-schools -- Sea Islands",
          "Cotton -- South Carolina -- History",
          "Education -- South Carolina -- History",
          "Agriculture -- South Carolina",
          "Freed persons -- South Carolina",
          "Gullahs -- Sea Islands",
          "Gullahs -- South Carolina -- Saint Helena Island -- History",
          "Gullahs -- South Carolina -- Saint Helena Island -- Social life and customs",
          "Human services -- South Carolina -- History",
          "Hurricanes -- South Carolina -- History",
          "Philanthropists -- United States",
          "Public health -- South Carolina -- History",
          "Reconstruction (U.S. history, 1865-1877) -- South Carolina",
          "Schools -- South Carolina -- History",
          "Schools -- South Carolina -- Photographs",
          "Schools -- South Carolina -- Records and correspondence",
          "Victory gardens -- South Carolina -- Saint Helena Island",
          "Women in charitable work -- South Carolina",
          "World War, 1914-1918 -- Participation, African American",
          "World War, 1939-1945 -- Participation, African American",
          "Oral history",
          "Photographs",
          "African American children",
          "African American soldiers",
          "African Americans",
          "African Americans -- Education",
          "African Americans -- Services for",
          "African Americans -- Social life and customs",
          "Agricultural education",
          "Agricultural extension work",
          "Agriculture",
          "Boll weevil",
          "Charity-schools",
          "Cotton",
          "Economic history",
          "Education",
          "Freed persons",
          "Gullahs",
          "Gullahs -- Social life and customs",
          "Human services",
          "Hurricanes",
          "Manners and customs",
          "Military participation -- African American",
          "Philanthropists",
          "Public health",
          "Schools",
          "Social conditions",
          "Victory gardens",
          "Women in charitable work",
          "Saint Helena Island (S.C.) -- History",
          "Sea Islands -- Photographs",
          "Sea Islands -- Social life and customs",
          "Sea Islands -- Social conditions",
          "South Carolina -- Economic conditions",
          "South Carolina -- History -- 1865-",
          "South Carolina -- Social life and customs",
          "South Carolina",
          "South Carolina -- Saint Helena Island",
          "United States",
          "United States -- Sea Islands"],
        "physical_media_a":["Microform",
          "Microfilm"],
        "subject_topical_a":["Cooley, Rossa B. (Rossa Belle), 1873-",
          "House, Grace Bigelow, 1877-",
          "Kester, Alice Harris",
          "Kester, Howard, 1904-1977",
          "Murray, Ellen, 1834-1908",
          "Towne, Laura M. (Laura Matilda), 1825-1901",
          "Penn School (Saint Helena Island, S.C.)",
          "World War (1914-1918)",
          "World War (1939-1945)",
          "African American children",
          "African American soldiers",
          "History",
          "African Americans",
          "Education",
          "Reconstruction (U.S. history, 1865-1877)",
          "Services for",
          "Societies, etc",
          "Social life and customs",
          "Agricultural education",
          "Agricultural extension work",
          "Agriculture",
          "Study and teaching",
          "Basket making",
          "Boll weevil",
          "Charity-schools",
          "Cotton",
          "Freed persons",
          "Gullahs",
          "Human services",
          "Hurricanes",
          "Philanthropists",
          "Public health",
          "Schools",
          "Victory gardens",
          "Women in charitable work",
          "World War, 1914-1918",
          "Participation, African American",
          "World War, 1939-1945",
          "Oral history",
          "Photographs",
          "Economic history",
          "Manners and customs",
          "Military participation",
          "African American",
          "Social conditions",
          "Economic conditions"],
        "publication_year_sort":"1862",
        "subject_headings_a":["Cooley, Rossa B. (Rossa Belle), 1873-",
          "House, Grace Bigelow, 1877-",
          "Kester, Alice Harris",
          "Kester, Howard, 1904-1977",
          "Murray, Ellen, 1834-1908",
          "Towne, Laura M. (Laura Matilda), 1825-1901",
          "Penn School (Saint Helena Island, S.C.)",
          "World War (1914-1918)",
          "World War (1939-1945)",
          "Since 1865",
          "African American children -- Sea Islands",
          "African American soldiers -- History -- 20th century",
          "African Americans -- Education -- South Carolina -- History",
          "Reconstruction (U.S. history, 1865-1877)",
          "African Americans -- Services for -- South Carolina",
          "African Americans -- Societies, etc",
          "African Americans -- South Carolina -- History",
          "African Americans -- South Carolina -- Social life and customs",
          "Agricultural education -- South Carolina",
          "Agricultural extension work -- South Carolina",
          "Agriculture -- Sea Islands -- Photographs",
          "Agriculture -- Study and teaching",
          "Basket making",
          "Boll weevil -- South Carolina -- History",
          "Charity-schools -- Sea Islands",
          "Cotton -- South Carolina -- History",
          "Education -- South Carolina -- History",
          "Agriculture -- South Carolina",
          "Freed persons -- South Carolina",
          "Gullahs -- Sea Islands",
          "Gullahs -- South Carolina -- Saint Helena Island -- History",
          "Gullahs -- South Carolina -- Saint Helena Island -- Social life and customs",
          "Human services -- South Carolina -- History",
          "Hurricanes -- South Carolina -- History",
          "Philanthropists -- United States",
          "Public health -- South Carolina -- History",
          "Reconstruction (U.S. history, 1865-1877) -- South Carolina",
          "Schools -- South Carolina -- History",
          "Schools -- South Carolina -- Photographs",
          "Schools -- South Carolina -- Records and correspondence",
          "Victory gardens -- South Carolina -- Saint Helena Island",
          "Women in charitable work -- South Carolina",
          "World War, 1914-1918 -- Participation, African American",
          "World War, 1939-1945 -- Participation, African American",
          "Oral history",
          "Photographs",
          "African American children",
          "African American soldiers",
          "African Americans",
          "African Americans -- Education",
          "African Americans -- Services for",
          "African Americans -- Social life and customs",
          "Agricultural education",
          "Agricultural extension work",
          "Agriculture",
          "Boll weevil",
          "Charity-schools",
          "Cotton",
          "Economic history",
          "Education",
          "Freed persons",
          "Gullahs",
          "Gullahs -- Social life and customs",
          "Human services",
          "Hurricanes",
          "Manners and customs",
          "Military participation -- African American",
          "Philanthropists",
          "Public health",
          "Schools",
          "Social conditions",
          "Victory gardens",
          "Women in charitable work",
          "Saint Helena Island (S.C.) -- History",
          "Sea Islands -- Photographs",
          "Sea Islands -- Social life and customs",
          "Sea Islands -- Social conditions",
          "South Carolina -- Economic conditions",
          "South Carolina -- History -- 1865-",
          "South Carolina -- Social life and customs",
          "South Carolina",
          "South Carolina -- Saint Helena Island",
          "United States",
          "United States -- Sea Islands"],
        "note_related_work_a":["See also: Penn Center of the Sea Islands records (#5539), in the Southern Historical Collection."],
        "location_hierarchy_a":["unc",
          "unc:uncdavy",
          "unc:uncsoun",
          "unc:uncwil",
          "unc:uncwil:uncwilshc"],
        "record_data_source_a":["ILSMARC",
          "EAD"],
        "subject_geographic_a":["Sea Islands",
          "South Carolina",
          "Saint Helena Island",
          "United States",
          "Saint Helena Island (S.C.)"],
        "call_number_schemes_a":["ALPHANUM"],
        "origin_place_search_a":["South Carolina",
          "United States"],
        "physical_description_a":["approximately 15,500 items (38.5 linear feet)"],
        "subject_chronological_a":["Since 1865",
          "20th century",
          "1865-"],
        "note_access_restrictions_a":["Photograph albums are closed due to extreme fragility. Researchers must use microfilm copies.",
          "Explicit written permission from the Penn Center, Inc. is required to copy, print, publish, or distribute photographs and other images contained in the Penn School Papers. To obtain permission, send your written request with specific image numbers to the Penn Center, Inc., P.O. Box 126, Martin Luther King Jr. Drive, Saint Helena Island, S.C. 29920-0126 or info[at]penncenter[dot]com."],
        "index_date":"2024-01-26T11:06:44Z"},
      {
        "id":"UNCb2667885",
        "url_a":["{\"href\":\"http://finding-aids.lib.unc.edu/11043/\",\"type\":\"findingaid\",\"note\":\"Finding aid\",\"restricted\":\"false\"}"],
        "items_a":["{\"item_id\":\"i3837365\",\"loc_b\":\"wada\",\"loc_n\":\"wada\",\"status\":\"In-Library Use Only\",\"call_no\":\"11043\",\"cn_scheme\":\"ALPHANUM\"}"],
        "author_suggest":["J.M. Dent & Sons"],
        "names_a":["{\"name\":\"J.M. Dent \\u0026 Sons\",\"type\":\"creator\"}"],
        "owner_a":["unc"],
        "language_a":["English"],
        "local_id":"b2667885",
        "available_a":["Available"],
        "rollup_id":"OCLC31966227",
        "note_local_a":["Source of acquisition: Acquired 1991"],
        "title_suggest":["J.M. Dent & Sons records, 1834-1986"],
        "title_main":"J.M. Dent & Sons records, 1834-1986",
        "title_sort_ssort_single":"jm dent and sons records 1834 1986",
        "access_type_a":["At the Library"],
        "institution_a":["unc"],
        "oclc_number_old_a":["31914932"],
        "oclc_number":"31966227",
        "creator_main_a":["J.M. Dent & Sons"],
        "note_general_a":["In Rare Book Literary and Historical Papers, University of North Carolina at Chapel Hill (#11043)",
          "English"],
        "primary_oclc_a":["31966227"],
        "resource_type_a":["Archival and manuscript material"],
        "shelf_numbers_a":["11043"],
        "date_cataloged":"2004-10-02T04:00:00Z",
        "subject_topical_a":["Abercrombie, Lascelles, 1881-1938",
          "Aiken, Conrad, 1889-1973",
          "Alcott, Louisa May, 1832-1888",
          "Aldington, Richard, 1892-1962",
          "Ambrose, Eric",
          "Asquith, H. H. (Herbert Henry), 1852-1928",
          "Baedeker, Karl",
          "Baring, Maurice, 1874-1945",
          "Barlow, Jane, 1856-1917",
          "Bates, H. E. (Herbert Ernest), 1905-1974",
          "Baum, L. Frank (Lyman Frank), 1856-1919",
          "Bax, Clifford, 1886-1962",
          "Beardsley, Aubrey, 1872-1898",
          "Beaverbrook, Max Aitken, Baron, 1879-1964",
          "Beckett, Samuel, 1906-1989",
          "Beerbohm, Max, Sir, 1872-1956",
          "Belgion, Montgomery, 1892-1973",
          "Belloc, Hilaire, 1870-1953",
          "Bennett, Arnold, 1867-1931",
          "Beresford, J. D. (John Davys), 1873-1947",
          "Berlin, Sven",
          "Birrell, Augustine, 1850-1933",
          "Blunden, Edmund, 1896-1974",
          "Blunt, Wilfrid Scawen, 1840-1922",
          "Borrow, George, 1803-1881",
          "Bottomley, Gordon, 1874-1948",
          "Bowen, Elizabeth, 1899-1973",
          "Boyd, Ernest Augustus, 1887-1946",
          "Bozman, E. F. (Ernest Franklin), 1895-",
          "Brock, C. E. (Charles Edmund), 1870-1938",
          "Brooke, Rupert, 1887-1915",
          "Brooke, Stopford A. (Stopford Augustus), 1832-1916",
          "Brown, E. K. (Edward Killoran), 1905-1951",
          "Buchan, John, 1875-1940",
          "Buck, Pearl S. (Pearl Sydenstricker), 1892-1973",
          "Budge, E. A. Wallis (Ernest Alfred Wallis), Sir, 1857-1934",
          "Bynner, Witter, 1881-1968",
          "Caine, Hall, 1853-1931",
          "Calder, Nigel",
          "Canby, Henry Seidel, 1878-1961",
          "Cansdale, George Soper",
          "Carroll, Lewis, 1832-1898",
          "Carswell, Catherine, 1879-1946",
          "Carswell, Donald, 1882-1940",
          "Carter, Frederick",
          "Cazamian, Louis François, 1877-1965",
          "Chamberlain, Austen, Sir, 1863-1937",
          "Chamberlain, Neville, 1869-1940",
          "Chesterton, G. K. (Gilbert Keith), 1874-1936",
          "Church, Richard, 1893-1972",
          "Churchill, Winston, 1874-1965",
          "Cockerell, Douglas",
          "Coleridge, Derwent, 1800-1883",
          "Conrad, Joseph, 1857-1924",
          "Cornford, Francis Macdonald, 1874-1943",
          "Craig, Edward Gordon, 1872-1966",
          "Crane, Stephen, 1871-1900",
          "Dent, Hugh R. (Hugh Railton), 1874-1938",
          "Dickinson, G. Lowes (Goldsworthy Lowes), 1862-1932",
          "Dobrée, Bonamy, 1891-1974",
          "Dobson, Austin, 1840-1921",
          "Dowden, Edward, 1843-1913",
          "Doyle, Arthur Conan, 1859-1930",
          "Drinkwater, John, 1882-1937",
          "Dunsany, Lord, 1878-1957",
          "Durrell, Lawrence",
          "Einstein, Albert, 1879-1955",
          "Eliot, T. S. (Thomas Stearns), 1888-1965",
          "Elton, Oliver, 1861-1945",
          "Evans, F. H.",
          "Farjeon, Eleanor, 1881-1965",
          "Fausset, Hugh I'Anson, 1895-1965",
          "FitzGibbon, Theodora",
          "Forster, E. M. (Edward Morgan), 1879-1970",
          "Galsworthy, John, 1867-1933",
          "Gardner, Edmund G., 1869-1935",
          "Garnett, David, 1892-1981",
          "Garnett, Edward, 1868-1937",
          "Gascoyne, David, 1916-2001",
          "Gibbings, Robert, 1889-1958",
          "Gill, Eric, 1882-1940",
          "Gladstone, W. E. (William Ewart), 1809-1898",
          "Gosse, Edmund, 1849-1928",
          "Granville-Barker, Harley, 1877-1946",
          "Grey of Fallodon, Edward Grey, Viscount, 1862-1933",
          "Grigson, Geoffrey, 1905-1985",
          "Guthrie, Thomas Anstey, 1856-1934",
          "Hadfield, Miles",
          "Hartley, L. P. (Leslie Poles), 1895-1972",
          "Henley, William Ernest, 1849-1903",
          "Hogg, Garry",
          "Holmyard, Eric John, 1891-1959",
          "Hopkins, Kenneth",
          "Hudson, W. H. (William Henry), 1841-1922",
          "Huxley, Aldous, 1894-1963",
          "Hogarth, C. J.",
          "Jackson, Holbrook, 1874-1948",
          "James, Henry, 1843-1916",
          "James, M. R. (Montague Rhodes), 1862-1936",
          "Jameson, Storm, 1891-1986",
          "Kavanagh, Patrick, 1904-1967",
          "Kennedy, Margaret, 1896-1967",
          "Kingsmill, Hugh, 1889-1949",
          "Knight, G. Wilson (George Wilson), 1897-1985",
          "Landor, Walter Savage, 1775-1864",
          "Lang, Andrew, 1844-1912",
          "Larsen, Egon, 1904-1990",
          "Le Gallienne, Richard, 1866-1947",
          "Leslie, Shane, 1885-1971",
          "Lewis, C. S. (Clive Staples), 1898-1963",
          "Lewis, Cecil, 1898-1997",
          "Lloyd George, David, 1863-1945",
          "Lodge, Oliver, Sir, 1851-1940",
          "MacDonald, George, 1824-1905",
          "Marsh, Edward Howard, Sir, 1872-1953",
          "Marsh, H. W.",
          "Maugham, W. Somerset (William Somerset), 1874-1965",
          "Morgan, Charles, 1894-1958",
          "Muir, Edwin, 1887-1959",
          "Murray, Gilbert, 1866-1957",
          "Nesbit, E. (Edith), 1858-1924",
          "Newbolt, Henry John, Sir, 1862-1938",
          "Nicoll, Allardyce, 1894-1976",
          "O'Connor, T. P. (Thomas Power), 1848-1929",
          "O'Grady, Standish, 1846-1928",
          "Oliphant, Mrs. (Margaret), 1828-1897",
          "Page, Walter Hines, 1855-1918",
          "Pearson, Hesketh, 1887-1964",
          "Pocock, Guy Noel, 1880-1955",
          "Pound, Ezra, 1885-1972",
          "Priestly, J. B. (John Boynton), 1894-1984",
          "Purdom, C. B. (Charles Benjamin), 1883-1965",
          "Quiller-Couch, Arthur, 1863-1944",
          "Rackham, Arthur, 1867-1939",
          "Rhys, Ernest, 1859-1946",
          "Richardson, Dorothy M. (Dorothy Miller), 1873-1957",
          "Ridgway, Athelstan",
          "Ridley, M. R. (Maurice Roy), 1890-1969",
          "Ripman, Walter, 1869-1947",
          "Roberts, Morley, 1857-1942",
          "Roe, F. Gordon (Frederic Gordon), 1894-1985",
          "Rolleston, T. W. (Thomas William), 1857-1920",
          "Rouse, W. H. D. (William Henry Denham), 1863-1950",
          "Ruddock, Margot, 1907-1951",
          "Sackville-West, Edward, 1901-1965",
          "Sackville-West, V. (Victoria), 1892-1962",
          "Santayana, George, 1863-1952",
          "Scudder, Vida Dutton, 1861-1954",
          "Shaw, Bernard, 1856-1950",
          "Sitwell, Osbert, 1892-1969",
          "Sitwell, Sacheverell, 1897-1988",
          "Spurgeon, Caroline F. E. (Caroline Frances Eleanor), 1869-1942",
          "Squire, John Collings, Sir, 1884-1958",
          "Starkie, Walter, 1894-1976",
          "Stevenson, Robert Louis, 1850-1894",
          "Strong, L. A. G. (Leonard Alfred George), 1896-1958",
          "Summers, Montague, 1880-1948",
          "Swinnerton, Frank, 1884-1982",
          "Symons, A. J. A. (Alphonse James Albert), 1900-1941",
          "Symons, Arthur, 1865-1945",
          "Symons, Julian, 1912-1994",
          "Tagore, Rabindranath, 1861-1941",
          "Thomas, Dylan, 1914-1953",
          "Tillyard, E. M. W. (Eustace Mandeville Wetenhall), 1889-1962",
          "Tolkien, J. R. R. (John Ronald Reuel), 1892-1973",
          "Topolski, Feliks, 1907-1989",
          "Toynbee, Arnold, 1889-1975",
          "Trent, Christopher",
          "Trevelyan, George Macaulay, 1876-1962",
          "Trevelyan, R. C. (Robert Calverley), 1872-1951",
          "Underhill, Evelyn, 1875-1941",
          "Vale, Edmund, 1888-1969",
          "Vaughan Williams, Ralph, 1872-1958",
          "Walpole, Hugh, 1884-1941",
          "Whistler, Rex, 1905-1944",
          "Wilde, Oscar, 1854-1900",
          "Wodehouse, P. G. (Pelham Grenville), 1881-1975",
          "Wolfe, Humbert, 1885-1940",
          "Woolf, Leonard, 1880-1969",
          "Woolf, Virginia, 1882-1941",
          "Yeats, Elizabeth Corbet, 1868-1940",
          "Yeats, W. B. (William Butler), 1865-1939",
          "Dent, J. M. (Joseph Malaby), 1849-1926",
          "Alfred A. Knopf, Inc",
          "Cambridge University Press",
          "Curtis Brown Ltd",
          "E.P. Dutton (Firm)",
          "Galley Press",
          "J.M. Dent & Sons",
          "Serial publication of books",
          "Authors and publishers",
          "Book industries and trade",
          "Illustration of books",
          "Publishers and publishing"],
        "publication_year_sort":"1834",
        "subject_headings_a":["Abercrombie, Lascelles, 1881-1938",
          "Aiken, Conrad, 1889-1973",
          "Alcott, Louisa May, 1832-1888",
          "Aldington, Richard, 1892-1962",
          "Ambrose, Eric",
          "Asquith, H. H. (Herbert Henry), 1852-1928",
          "Baedeker, Karl",
          "Baring, Maurice, 1874-1945",
          "Barlow, Jane, 1856-1917",
          "Bates, H. E. (Herbert Ernest), 1905-1974",
          "Baum, L. Frank (Lyman Frank), 1856-1919",
          "Bax, Clifford, 1886-1962",
          "Beardsley, Aubrey, 1872-1898",
          "Beaverbrook, Max Aitken, Baron, 1879-1964",
          "Beckett, Samuel, 1906-1989",
          "Beerbohm, Max, Sir, 1872-1956",
          "Belgion, Montgomery, 1892-1973",
          "Belloc, Hilaire, 1870-1953",
          "Bennett, Arnold, 1867-1931",
          "Beresford, J. D. (John Davys), 1873-1947",
          "Berlin, Sven",
          "Birrell, Augustine, 1850-1933",
          "Blunden, Edmund, 1896-1974",
          "Blunt, Wilfrid Scawen, 1840-1922",
          "Borrow, George, 1803-1881",
          "Bottomley, Gordon, 1874-1948",
          "Bowen, Elizabeth, 1899-1973",
          "Boyd, Ernest Augustus, 1887-1946",
          "Bozman, E. F. (Ernest Franklin), 1895-",
          "Brock, C. E. (Charles Edmund), 1870-1938",
          "Brooke, Rupert, 1887-1915",
          "Brooke, Stopford A. (Stopford Augustus), 1832-1916",
          "Brown, E. K. (Edward Killoran), 1905-1951",
          "Buchan, John, 1875-1940",
          "Buck, Pearl S. (Pearl Sydenstricker), 1892-1973",
          "Budge, E. A. Wallis (Ernest Alfred Wallis), Sir, 1857-1934",
          "Bynner, Witter, 1881-1968",
          "Caine, Hall, 1853-1931",
          "Calder, Nigel",
          "Canby, Henry Seidel, 1878-1961",
          "Cansdale, George Soper",
          "Carroll, Lewis, 1832-1898",
          "Carswell, Catherine, 1879-1946",
          "Carswell, Donald, 1882-1940",
          "Carter, Frederick",
          "Cazamian, Louis François, 1877-1965",
          "Chamberlain, Austen, Sir, 1863-1937",
          "Chamberlain, Neville, 1869-1940",
          "Chesterton, G. K. (Gilbert Keith), 1874-1936",
          "Church, Richard, 1893-1972",
          "Churchill, Winston, 1874-1965",
          "Cockerell, Douglas",
          "Coleridge, Derwent, 1800-1883",
          "Conrad, Joseph, 1857-1924",
          "Cornford, Francis Macdonald, 1874-1943",
          "Craig, Edward Gordon, 1872-1966",
          "Crane, Stephen, 1871-1900",
          "Dent, Hugh R. (Hugh Railton), 1874-1938",
          "Dickinson, G. Lowes (Goldsworthy Lowes), 1862-1932",
          "Dobrée, Bonamy, 1891-1974",
          "Dobson, Austin, 1840-1921",
          "Dowden, Edward, 1843-1913",
          "Doyle, Arthur Conan, 1859-1930",
          "Drinkwater, John, 1882-1937",
          "Dunsany, Lord, 1878-1957",
          "Durrell, Lawrence",
          "Einstein, Albert, 1879-1955",
          "Eliot, T. S. (Thomas Stearns), 1888-1965",
          "Elton, Oliver, 1861-1945",
          "Evans, F. H.",
          "Farjeon, Eleanor, 1881-1965",
          "Fausset, Hugh I'Anson, 1895-1965",
          "FitzGibbon, Theodora",
          "Forster, E. M. (Edward Morgan), 1879-1970",
          "Galsworthy, John, 1867-1933",
          "Gardner, Edmund G., 1869-1935",
          "Garnett, David, 1892-1981",
          "Garnett, Edward, 1868-1937",
          "Gascoyne, David, 1916-2001",
          "Gibbings, Robert, 1889-1958",
          "Gill, Eric, 1882-1940",
          "Gladstone, W. E. (William Ewart), 1809-1898",
          "Gosse, Edmund, 1849-1928",
          "Granville-Barker, Harley, 1877-1946",
          "Grey of Fallodon, Edward Grey, Viscount, 1862-1933",
          "Grigson, Geoffrey, 1905-1985",
          "Guthrie, Thomas Anstey, 1856-1934",
          "Hadfield, Miles",
          "Hartley, L. P. (Leslie Poles), 1895-1972",
          "Henley, William Ernest, 1849-1903",
          "Hogg, Garry",
          "Holmyard, Eric John, 1891-1959",
          "Hopkins, Kenneth",
          "Hudson, W. H. (William Henry), 1841-1922",
          "Huxley, Aldous, 1894-1963",
          "Hogarth, C. J.",
          "Jackson, Holbrook, 1874-1948",
          "James, Henry, 1843-1916",
          "James, M. R. (Montague Rhodes), 1862-1936",
          "Jameson, Storm, 1891-1986",
          "Kavanagh, Patrick, 1904-1967",
          "Kennedy, Margaret, 1896-1967",
          "Kingsmill, Hugh, 1889-1949",
          "Knight, G. Wilson (George Wilson), 1897-1985",
          "Landor, Walter Savage, 1775-1864",
          "Lang, Andrew, 1844-1912",
          "Larsen, Egon, 1904-1990",
          "Le Gallienne, Richard, 1866-1947",
          "Leslie, Shane, 1885-1971",
          "Lewis, C. S. (Clive Staples), 1898-1963",
          "Lewis, Cecil, 1898-1997",
          "Lloyd George, David, 1863-1945",
          "Lodge, Oliver, Sir, 1851-1940",
          "MacDonald, George, 1824-1905",
          "Marsh, Edward Howard, Sir, 1872-1953",
          "Marsh, H. W.",
          "Maugham, W. Somerset (William Somerset), 1874-1965",
          "Morgan, Charles, 1894-1958",
          "Muir, Edwin, 1887-1959",
          "Murray, Gilbert, 1866-1957",
          "Nesbit, E. (Edith), 1858-1924",
          "Newbolt, Henry John, Sir, 1862-1938",
          "Nicoll, Allardyce, 1894-1976",
          "O'Connor, T. P. (Thomas Power), 1848-1929",
          "O'Grady, Standish, 1846-1928",
          "Oliphant, Mrs. (Margaret), 1828-1897",
          "Page, Walter Hines, 1855-1918",
          "Pearson, Hesketh, 1887-1964",
          "Pocock, Guy Noel, 1880-1955",
          "Pound, Ezra, 1885-1972",
          "Priestly, J. B. (John Boynton), 1894-1984",
          "Purdom, C. B. (Charles Benjamin), 1883-1965",
          "Quiller-Couch, Arthur, 1863-1944",
          "Rackham, Arthur, 1867-1939",
          "Rhys, Ernest, 1859-1946",
          "Richardson, Dorothy M. (Dorothy Miller), 1873-1957",
          "Ridgway, Athelstan",
          "Ridley, M. R. (Maurice Roy), 1890-1969",
          "Ripman, Walter, 1869-1947",
          "Roberts, Morley, 1857-1942",
          "Roe, F. Gordon (Frederic Gordon), 1894-1985",
          "Rolleston, T. W. (Thomas William), 1857-1920",
          "Rouse, W. H. D. (William Henry Denham), 1863-1950",
          "Ruddock, Margot, 1907-1951",
          "Sackville-West, Edward, 1901-1965",
          "Sackville-West, V. (Victoria), 1892-1962",
          "Santayana, George, 1863-1952",
          "Scudder, Vida Dutton, 1861-1954",
          "Shaw, Bernard, 1856-1950",
          "Sitwell, Osbert, 1892-1969",
          "Sitwell, Sacheverell, 1897-1988",
          "Spurgeon, Caroline F. E. (Caroline Frances Eleanor), 1869-1942",
          "Squire, John Collings, Sir, 1884-1958",
          "Starkie, Walter, 1894-1976",
          "Stevenson, Robert Louis, 1850-1894",
          "Strong, L. A. G. (Leonard Alfred George), 1896-1958",
          "Summers, Montague, 1880-1948",
          "Swinnerton, Frank, 1884-1982",
          "Symons, A. J. A. (Alphonse James Albert), 1900-1941",
          "Symons, Arthur, 1865-1945",
          "Symons, Julian, 1912-1994",
          "Tagore, Rabindranath, 1861-1941",
          "Thomas, Dylan, 1914-1953",
          "Tillyard, E. M. W. (Eustace Mandeville Wetenhall), 1889-1962",
          "Tolkien, J. R. R. (John Ronald Reuel), 1892-1973",
          "Topolski, Feliks, 1907-1989",
          "Toynbee, Arnold, 1889-1975",
          "Trent, Christopher",
          "Trevelyan, George Macaulay, 1876-1962",
          "Trevelyan, R. C. (Robert Calverley), 1872-1951",
          "Underhill, Evelyn, 1875-1941",
          "Vale, Edmund, 1888-1969",
          "Vaughan Williams, Ralph, 1872-1958",
          "Walpole, Hugh, 1884-1941",
          "Whistler, Rex, 1905-1944",
          "Wilde, Oscar, 1854-1900",
          "Wodehouse, P. G. (Pelham Grenville), 1881-1975",
          "Wolfe, Humbert, 1885-1940",
          "Woolf, Leonard, 1880-1969",
          "Woolf, Virginia, 1882-1941",
          "Yeats, Elizabeth Corbet, 1868-1940",
          "Yeats, W. B. (William Butler), 1865-1939",
          "Dent, J. M. (Joseph Malaby), 1849-1926",
          "Alfred A. Knopf, Inc",
          "Cambridge University Press",
          "Curtis Brown Ltd",
          "E.P. Dutton (Firm)",
          "Galley Press",
          "J.M. Dent & Sons",
          "Serial publication of books",
          "Authors and publishers -- Great Britain",
          "Book industries and trade -- Great Britain",
          "Illustration of books -- Great Britain",
          "Publishers and publishing -- Great Britain",
          "Authors and publishers",
          "Illustration of books",
          "Publishers and publishing"],
        "subject_suggest":["Abercrombie, Lascelles, 1881-1938",
          "Aiken, Conrad, 1889-1973",
          "Alcott, Louisa May, 1832-1888",
          "Aldington, Richard, 1892-1962",
          "Ambrose, Eric",
          "Asquith, H. H. (Herbert Henry), 1852-1928",
          "Baedeker, Karl",
          "Baring, Maurice, 1874-1945",
          "Barlow, Jane, 1856-1917",
          "Bates, H. E. (Herbert Ernest), 1905-1974",
          "Baum, L. Frank (Lyman Frank), 1856-1919",
          "Bax, Clifford, 1886-1962",
          "Beardsley, Aubrey, 1872-1898",
          "Beaverbrook, Max Aitken, Baron, 1879-1964",
          "Beckett, Samuel, 1906-1989",
          "Beerbohm, Max, Sir, 1872-1956",
          "Belgion, Montgomery, 1892-1973",
          "Belloc, Hilaire, 1870-1953",
          "Bennett, Arnold, 1867-1931",
          "Beresford, J. D. (John Davys), 1873-1947",
          "Berlin, Sven",
          "Birrell, Augustine, 1850-1933",
          "Blunden, Edmund, 1896-1974",
          "Blunt, Wilfrid Scawen, 1840-1922",
          "Borrow, George, 1803-1881",
          "Bottomley, Gordon, 1874-1948",
          "Bowen, Elizabeth, 1899-1973",
          "Boyd, Ernest Augustus, 1887-1946",
          "Bozman, E. F. (Ernest Franklin), 1895-",
          "Brock, C. E. (Charles Edmund), 1870-1938",
          "Brooke, Rupert, 1887-1915",
          "Brooke, Stopford A. (Stopford Augustus), 1832-1916",
          "Brown, E. K. (Edward Killoran), 1905-1951",
          "Buchan, John, 1875-1940",
          "Buck, Pearl S. (Pearl Sydenstricker), 1892-1973",
          "Budge, E. A. Wallis (Ernest Alfred Wallis), Sir, 1857-1934",
          "Bynner, Witter, 1881-1968",
          "Caine, Hall, 1853-1931",
          "Calder, Nigel",
          "Canby, Henry Seidel, 1878-1961",
          "Cansdale, George Soper",
          "Carroll, Lewis, 1832-1898",
          "Carswell, Catherine, 1879-1946",
          "Carswell, Donald, 1882-1940",
          "Carter, Frederick",
          "Cazamian, Louis François, 1877-1965",
          "Chamberlain, Austen, Sir, 1863-1937",
          "Chamberlain, Neville, 1869-1940",
          "Chesterton, G. K. (Gilbert Keith), 1874-1936",
          "Church, Richard, 1893-1972",
          "Churchill, Winston, 1874-1965",
          "Cockerell, Douglas",
          "Coleridge, Derwent, 1800-1883",
          "Conrad, Joseph, 1857-1924",
          "Cornford, Francis Macdonald, 1874-1943",
          "Craig, Edward Gordon, 1872-1966",
          "Crane, Stephen, 1871-1900",
          "Dent, Hugh R. (Hugh Railton), 1874-1938",
          "Dickinson, G. Lowes (Goldsworthy Lowes), 1862-1932",
          "Dobrée, Bonamy, 1891-1974",
          "Dobson, Austin, 1840-1921",
          "Dowden, Edward, 1843-1913",
          "Doyle, Arthur Conan, 1859-1930",
          "Drinkwater, John, 1882-1937",
          "Dunsany, Lord, 1878-1957",
          "Durrell, Lawrence",
          "Einstein, Albert, 1879-1955",
          "Eliot, T. S. (Thomas Stearns), 1888-1965",
          "Elton, Oliver, 1861-1945",
          "Evans, F. H.",
          "Farjeon, Eleanor, 1881-1965",
          "Fausset, Hugh I'Anson, 1895-1965",
          "FitzGibbon, Theodora",
          "Forster, E. M. (Edward Morgan), 1879-1970",
          "Galsworthy, John, 1867-1933",
          "Gardner, Edmund G., 1869-1935",
          "Garnett, David, 1892-1981",
          "Garnett, Edward, 1868-1937",
          "Gascoyne, David, 1916-2001",
          "Gibbings, Robert, 1889-1958",
          "Gill, Eric, 1882-1940",
          "Gladstone, W. E. (William Ewart), 1809-1898",
          "Gosse, Edmund, 1849-1928",
          "Granville-Barker, Harley, 1877-1946",
          "Grey of Fallodon, Edward Grey, Viscount, 1862-1933",
          "Grigson, Geoffrey, 1905-1985",
          "Guthrie, Thomas Anstey, 1856-1934",
          "Hadfield, Miles",
          "Hartley, L. P. (Leslie Poles), 1895-1972",
          "Henley, William Ernest, 1849-1903",
          "Hogg, Garry",
          "Holmyard, Eric John, 1891-1959",
          "Hopkins, Kenneth",
          "Hudson, W. H. (William Henry), 1841-1922",
          "Huxley, Aldous, 1894-1963",
          "Hogarth, C. J.",
          "Jackson, Holbrook, 1874-1948",
          "James, Henry, 1843-1916",
          "James, M. R. (Montague Rhodes), 1862-1936",
          "Jameson, Storm, 1891-1986",
          "Kavanagh, Patrick, 1904-1967",
          "Kennedy, Margaret, 1896-1967",
          "Kingsmill, Hugh, 1889-1949",
          "Knight, G. Wilson (George Wilson), 1897-1985",
          "Landor, Walter Savage, 1775-1864",
          "Lang, Andrew, 1844-1912",
          "Larsen, Egon, 1904-1990",
          "Le Gallienne, Richard, 1866-1947",
          "Leslie, Shane, 1885-1971",
          "Lewis, C. S. (Clive Staples), 1898-1963",
          "Lewis, Cecil, 1898-1997",
          "Lloyd George, David, 1863-1945",
          "Lodge, Oliver, Sir, 1851-1940",
          "MacDonald, George, 1824-1905",
          "Marsh, Edward Howard, Sir, 1872-1953",
          "Marsh, H. W.",
          "Maugham, W. Somerset (William Somerset), 1874-1965",
          "Morgan, Charles, 1894-1958",
          "Muir, Edwin, 1887-1959",
          "Murray, Gilbert, 1866-1957",
          "Nesbit, E. (Edith), 1858-1924",
          "Newbolt, Henry John, Sir, 1862-1938",
          "Nicoll, Allardyce, 1894-1976",
          "O'Connor, T. P. (Thomas Power), 1848-1929",
          "O'Grady, Standish, 1846-1928",
          "Oliphant, Mrs. (Margaret), 1828-1897",
          "Page, Walter Hines, 1855-1918",
          "Pearson, Hesketh, 1887-1964",
          "Pocock, Guy Noel, 1880-1955",
          "Pound, Ezra, 1885-1972",
          "Priestly, J. B. (John Boynton), 1894-1984",
          "Purdom, C. B. (Charles Benjamin), 1883-1965",
          "Quiller-Couch, Arthur, 1863-1944",
          "Rackham, Arthur, 1867-1939",
          "Rhys, Ernest, 1859-1946",
          "Richardson, Dorothy M. (Dorothy Miller), 1873-1957",
          "Ridgway, Athelstan",
          "Ridley, M. R. (Maurice Roy), 1890-1969",
          "Ripman, Walter, 1869-1947",
          "Roberts, Morley, 1857-1942",
          "Roe, F. Gordon (Frederic Gordon), 1894-1985",
          "Rolleston, T. W. (Thomas William), 1857-1920",
          "Rouse, W. H. D. (William Henry Denham), 1863-1950",
          "Ruddock, Margot, 1907-1951",
          "Sackville-West, Edward, 1901-1965",
          "Sackville-West, V. (Victoria), 1892-1962",
          "Santayana, George, 1863-1952",
          "Scudder, Vida Dutton, 1861-1954",
          "Shaw, Bernard, 1856-1950",
          "Sitwell, Osbert, 1892-1969",
          "Sitwell, Sacheverell, 1897-1988",
          "Spurgeon, Caroline F. E. (Caroline Frances Eleanor), 1869-1942",
          "Squire, John Collings, Sir, 1884-1958",
          "Starkie, Walter, 1894-1976",
          "Stevenson, Robert Louis, 1850-1894",
          "Strong, L. A. G. (Leonard Alfred George), 1896-1958",
          "Summers, Montague, 1880-1948",
          "Swinnerton, Frank, 1884-1982",
          "Symons, A. J. A. (Alphonse James Albert), 1900-1941",
          "Symons, Arthur, 1865-1945",
          "Symons, Julian, 1912-1994",
          "Tagore, Rabindranath, 1861-1941",
          "Thomas, Dylan, 1914-1953",
          "Tillyard, E. M. W. (Eustace Mandeville Wetenhall), 1889-1962",
          "Tolkien, J. R. R. (John Ronald Reuel), 1892-1973",
          "Topolski, Feliks, 1907-1989",
          "Toynbee, Arnold, 1889-1975",
          "Trent, Christopher",
          "Trevelyan, George Macaulay, 1876-1962",
          "Trevelyan, R. C. (Robert Calverley), 1872-1951",
          "Underhill, Evelyn, 1875-1941",
          "Vale, Edmund, 1888-1969",
          "Vaughan Williams, Ralph, 1872-1958",
          "Walpole, Hugh, 1884-1941",
          "Whistler, Rex, 1905-1944",
          "Wilde, Oscar, 1854-1900",
          "Wodehouse, P. G. (Pelham Grenville), 1881-1975",
          "Wolfe, Humbert, 1885-1940",
          "Woolf, Leonard, 1880-1969",
          "Woolf, Virginia, 1882-1941",
          "Yeats, Elizabeth Corbet, 1868-1940",
          "Yeats, W. B. (William Butler), 1865-1939",
          "Dent, J. M. (Joseph Malaby), 1849-1926",
          "Alfred A. Knopf, Inc",
          "Cambridge University Press",
          "Curtis Brown Ltd",
          "E.P. Dutton (Firm)",
          "Galley Press",
          "J.M. Dent & Sons",
          "Serial publication of books",
          "Authors and publishers -- Great Britain",
          "Book industries and trade -- Great Britain",
          "Illustration of books -- Great Britain",
          "Publishers and publishing -- Great Britain",
          "Authors and publishers",
          "Illustration of books",
          "Publishers and publishing"],
        "location_hierarchy_a":["unc",
          "unc:uncrarn",
          "unc:uncwil",
          "unc:uncwil:uncwilrbc"],
        "record_data_source_a":["ILSMARC",
          "EAD"],
        "subject_geographic_a":["Great Britain"],
        "call_number_schemes_a":["ALPHANUM"],
        "origin_place_search_a":["England",
          "United Kingdom"],
        "physical_description_a":["approximately 210000 items (150.0 linear ft.)"],
        "note_access_restrictions_a":["No restrictions"],
        "index_date":"2024-01-27T08:07:00Z",
        "note_summary_a":["J.M. Dent & Sons, book publishers of London, England, was founded in 1888 by Joseph Malaby Dent (1859-1926). The company achieved success by selling cheap editions of the classics to the working class. Dent's first major production, the Temple Shakespeare series, was established in 1894, followed in 1906 by Everyman's Library, a series of 1000 volumes. Eventually, Dent's publishing activities expanded to include textbooks, children's books, educational books, self-help books, and travel guides. Dent remained in the forefront of the publishing field by expanding sales to foreign markets, including Australia, Canada, France, New Zealand, South Africa, and the United States. Records include editorial department correspondence with authors, publishing companies, and literary agents; drafts of manuscripts published by Dent; illustrative material used in Dent publications; editorial reports and recommendations; author contracts; copyright agreements; and royalty payments. There are also directors' files containing editorial and personal correspondence; financial materials, including ledgers containing company accounts, cash books, balance sheets, payroll records, equipment inventories, warehouse stock books, and book sales figures; intra-office, memoranda regarding the production of books; legal correspondence and claim statements; material relating to publishing companies that were either affiliated with or subsidiaries of J.M. Dent & Sons; and other materials, including agreements with non-affiliated organizations, address books, work journals, visitors' books, and photographs of Dent buildings and employees. Author files (nine groupings by author name), Company Files, Editor Files, and Serial Files are cataloged separately. Note that files are incomplete, since many items of significant commercial value were sold piecemeal in the 1980s and some files from later years are held by Weidenfeld and Nicholson, which took over the Dent firm in 1986. AUTHOR FILES ABSTRACT: Author files include correspondence with editorial department staff and with the directors of J.M. Dent & Sons that discusses manuscript proposals and submissions, book acceptance and rejection, editorial recommendations, contracts, copyright agreements, sales figures, royalty payments, legal problems, reprints, and successive editions. Author files also include correspondence regarding illustrations used in Dent publications, correspondence with illustrators, rough drafts of manuscripts, synopses of manuscripts, and photographs of selected authors and illustrators. COMPANY FILES ABSTRACT: Company files include correspondence between members of the J.M. Dent editorial staff and companies involved in the publishing and literary agent businesses. Correspondence addresses a wide range of editorial matters, including manuscript submissions, book acceptance and rejection, editorial recommendations, printing rights, translating rights, copyright agreements, royalty payments, and fees owed to agents. Company files also include records of publishing companies that were either affiliated with or direct subsidiaries of J.M. Dent & Sons. These files contain correspondence, inter-office memoranda, financial reports, balance sheets, sales figures, contracts, agreements, trademark applications, and legal records. EDITOR FILES ABSTRACT: Editor files include inter-office correspondence and memoranda between members of the J.M. Dent editorial department discussing book acceptance and rejection, editorial recommendations, advice on what titles to include in various series, copyright agreements, sales figures, royalty payments, legal problems, reprints, and successive editions. Editorial files also include correspondence with authors and companies that pertains to manuscript proposals and submissions; correspondence with the directors of J.M. Dent & Sons; editorial emendations to rough drafts and illustrative material; and photographs of most editors in the J.M. Dent staff. BOOK SERIES ABSTRACT: Book series titles include correspondence to and from the editors responsible for each series, rough drafts of manuscripts published under each series name, and illustrative material used in these books. Of particular interest are the Everyman's Library files containing trademark applications, financial records, sales figures, legal records, Everyman history files, and letters of commendation from contributing authors"]},
      {
        "id":"UNCb6112219",
        "url_a":["{\"href\":\"https://finding-aids.lib.unc.edu/P0033/\",\"type\":\"findingaid\",\"note\":\"Finding aid\",\"restricted\":\"false\"}"],
        "items_a":["{\"item_id\":\"i8018088\",\"loc_b\":\"wbda\",\"loc_n\":\"wbda\",\"status\":\"In-Library Use Only\",\"call_no\":\"P0033\",\"cn_scheme\":\"ALPHANUM\"}"],
        "author_suggest":["Giduz, Roland"],
        "names_a":["{\"name\":\"Giduz, Roland\",\"type\":\"creator\",\"id\":\"https://id.loc.gov/authorities/names/n82005524\"}"],
        "owner_a":["unc"],
        "language_a":["English"],
        "local_id":"b6112219",
        "available_a":["Available"],
        "rollup_id":"OCLC505946057",
        "title_suggest":["Roland Giduz photographic collection, 1947-1970."],
        "title_main":"Roland Giduz photographic collection, 1947-1970.",
        "title_sort_ssort_single":"roland giduz photographic collection 1947 1970",
        "access_type_a":["At the Library"],
        "institution_a":["unc"],
        "oclc_number":"505946057",
        "creator_main_a":["Giduz, Roland"],
        "note_summary_a":["The collection comprises approximately 19,000 negatives made between circa 1947 and circa 1970, primarily in Chapel Hill and Carrboro, N.C. Subject matter includes people, places, activities, and events. The collection includes photographs relating to the University of North Carolina at Chapel Hill and a few other places within the state. The negatives are grouped by locality, subject, and personal name."],
        "primary_oclc_a":["505946057"],
        "resource_type_a":["Archival and manuscript material"],
        "shelf_numbers_a":["P0033"],
        "subject_genre_a":["Photographs",
          "Drama"],
        "date_cataloged":"2010-02-11T05:00:00Z",
        "genre_headings_a":["Photographs",
          "Drama"],
        "subject_suggest":["Photographs",
          "Drama",
          "Barclay, George",
          "Carmichael, William Donald, Jr., 1900-1961",
          "Casey, Ralph D. (Ralph Droz), 1890-",
          "Giduz, Roland",
          "Graham, Frank Porter, 1886-1972",
          "Gray, Gordon, 1909-1982",
          "House, R. B. (Robert Burton), 1892-1987",
          "Kenan, William Rand, Jr., 1872-1965",
          "Kennedy, John F. (John Fitzgerald), 1917-1963",
          "Scott, Robert Walter, 1929-2009",
          "Tatum, James M. (James Moore), 1913-1959",
          "Carolina Inn (Chapel Hill, N.C.) -- Photographs",
          "Kenan Memorial Stadium (Chapel Hill, N.C.) -- Photographs",
          "University of North Carolina (1793-1962) -- Alumni and alumnae -- Photographs",
          "University of North Carolina (1793-1962) -- Sports -- Photographs",
          "University of North Carolina (1793-1962) -- Baseball -- Photographs",
          "University of North Carolina (1793-1962) -- Basketball -- Photographs",
          "University of North Carolina (1793-1962) -- Buildings -- Photographs",
          "University of North Carolina (1793-1962) -- Commencement -- Photographs",
          "University of North Carolina (1793-1962) -- Drama -- Photographs",
          "University of North Carolina (1793-1962) -- Employees -- Photographs",
          "University of North Carolina (1793-1962) -- Faculty -- Photographs",
          "University of North Carolina (1793-1962) -- Football -- Photographs",
          "University of North Carolina (1793-1962) -- Fraternities -- Photographs",
          "University of North Carolina (1793-1962) -- History",
          "University of North Carolina (1793-1962) -- Photographs",
          "University of North Carolina (1793-1962) -- Societies, etc -- Photographs",
          "University of North Carolina (1793-1962) -- Sororities -- Photographs",
          "University of North Carolina (1793-1962) -- Students -- Photographs",
          "University of North Carolina (1793-1962) -- Swimming -- Photographs",
          "University of North Carolina (1793-1962) -- Tennis -- Photographs",
          "University of North Carolina at Chapel Hill -- Alumni and alumnae -- Photographs",
          "University of North Carolina at Chapel Hill -- Sports -- Photographs",
          "University of North Carolina at Chapel Hill -- Baseball -- Photographs",
          "University of North Carolina at Chapel Hill -- Basketball -- Photographs",
          "University of North Carolina at Chapel Hill -- Buildings -- Photographs",
          "University of North Carolina at Chapel Hill -- Commencement -- Photographs",
          "University of North Carolina at Chapel Hill -- Drama -- Photographs",
          "University of North Carolina at Chapel Hill -- Employees -- Photographs",
          "University of North Carolina at Chapel Hill -- Faculty -- Photographs",
          "University of North Carolina at Chapel Hill -- Football -- Photographs",
          "University of North Carolina at Chapel Hill -- Fraternities -- Photographs",
          "University of North Carolina at Chapel Hill -- History",
          "University of North Carolina at Chapel Hill -- Photographs",
          "University of North Carolina at Chapel Hill -- Societies, etc -- Photographs",
          "University of North Carolina at Chapel Hill -- Sororities -- Photographs",
          "University of North Carolina at Chapel Hill -- Students -- Photographs",
          "University of North Carolina at Chapel Hill -- Swimming -- Photographs",
          "University of North Carolina at Chapel Hill -- Tennis -- Photographs",
          "African American college students -- North Carolina -- Photographs",
          "African Americans -- North Carolina -- Photographs",
          "African Americans -- Political activity -- North Carolina -- Photographs",
          "Civil rights movements -- North Carolina -- Chapel Hill -- Photographs",
          "Carrboro (N.C.) -- Photographs",
          "Chapel Hill (N.C.) -- Photographs",
          "Durham (N.C.) -- Photographs",
          "Hillsborough (N.C.) -- Photographs",
          "North Carolina -- Photographs"],
        "subject_topical_a":["Barclay, George",
          "Carmichael, William Donald, Jr., 1900-1961",
          "Casey, Ralph D. (Ralph Droz), 1890-",
          "Giduz, Roland",
          "Graham, Frank Porter, 1886-1972",
          "Gray, Gordon, 1909-1982",
          "House, R. B. (Robert Burton), 1892-1987",
          "Kenan, William Rand, Jr., 1872-1965",
          "Kennedy, John F. (John Fitzgerald), 1917-1963",
          "Scott, Robert Walter, 1929-2009",
          "Tatum, James M. (James Moore), 1913-1959",
          "Carolina Inn (Chapel Hill, N.C.)",
          "Kenan Memorial Stadium (Chapel Hill, N.C.)",
          "University of North Carolina (1793-1962)",
          "Alumni and alumnae",
          "Sports",
          "Baseball",
          "Basketball",
          "Buildings",
          "Commencement",
          "Employees",
          "Faculty",
          "Football",
          "Fraternities",
          "History",
          "Societies, etc",
          "Sororities",
          "Students",
          "Swimming",
          "Tennis",
          "University of North Carolina at Chapel Hill",
          "African American college students",
          "African Americans",
          "Political activity",
          "Civil rights movements"],
        "publication_year_sort":"1947",
        "subject_headings_a":["Barclay, George",
          "Carmichael, William Donald, Jr., 1900-1961",
          "Casey, Ralph D. (Ralph Droz), 1890-",
          "Giduz, Roland",
          "Graham, Frank Porter, 1886-1972",
          "Gray, Gordon, 1909-1982",
          "House, R. B. (Robert Burton), 1892-1987",
          "Kenan, William Rand, Jr., 1872-1965",
          "Kennedy, John F. (John Fitzgerald), 1917-1963",
          "Scott, Robert Walter, 1929-2009",
          "Tatum, James M. (James Moore), 1913-1959",
          "Carolina Inn (Chapel Hill, N.C.) -- Photographs",
          "Kenan Memorial Stadium (Chapel Hill, N.C.) -- Photographs",
          "University of North Carolina (1793-1962) -- Alumni and alumnae -- Photographs",
          "University of North Carolina (1793-1962) -- Sports -- Photographs",
          "University of North Carolina (1793-1962) -- Baseball -- Photographs",
          "University of North Carolina (1793-1962) -- Basketball -- Photographs",
          "University of North Carolina (1793-1962) -- Buildings -- Photographs",
          "University of North Carolina (1793-1962) -- Commencement -- Photographs",
          "University of North Carolina (1793-1962) -- Drama -- Photographs",
          "University of North Carolina (1793-1962) -- Employees -- Photographs",
          "University of North Carolina (1793-1962) -- Faculty -- Photographs",
          "University of North Carolina (1793-1962) -- Football -- Photographs",
          "University of North Carolina (1793-1962) -- Fraternities -- Photographs",
          "University of North Carolina (1793-1962) -- History",
          "University of North Carolina (1793-1962) -- Photographs",
          "University of North Carolina (1793-1962) -- Societies, etc -- Photographs",
          "University of North Carolina (1793-1962) -- Sororities -- Photographs",
          "University of North Carolina (1793-1962) -- Students -- Photographs",
          "University of North Carolina (1793-1962) -- Swimming -- Photographs",
          "University of North Carolina (1793-1962) -- Tennis -- Photographs",
          "University of North Carolina at Chapel Hill -- Alumni and alumnae -- Photographs",
          "University of North Carolina at Chapel Hill -- Sports -- Photographs",
          "University of North Carolina at Chapel Hill -- Baseball -- Photographs",
          "University of North Carolina at Chapel Hill -- Basketball -- Photographs",
          "University of North Carolina at Chapel Hill -- Buildings -- Photographs",
          "University of North Carolina at Chapel Hill -- Commencement -- Photographs",
          "University of North Carolina at Chapel Hill -- Drama -- Photographs",
          "University of North Carolina at Chapel Hill -- Employees -- Photographs",
          "University of North Carolina at Chapel Hill -- Faculty -- Photographs",
          "University of North Carolina at Chapel Hill -- Football -- Photographs",
          "University of North Carolina at Chapel Hill -- Fraternities -- Photographs",
          "University of North Carolina at Chapel Hill -- History",
          "University of North Carolina at Chapel Hill -- Photographs",
          "University of North Carolina at Chapel Hill -- Societies, etc -- Photographs",
          "University of North Carolina at Chapel Hill -- Sororities -- Photographs",
          "University of North Carolina at Chapel Hill -- Students -- Photographs",
          "University of North Carolina at Chapel Hill -- Swimming -- Photographs",
          "University of North Carolina at Chapel Hill -- Tennis -- Photographs",
          "African American college students -- North Carolina -- Photographs",
          "African Americans -- North Carolina -- Photographs",
          "African Americans -- Political activity -- North Carolina -- Photographs",
          "Civil rights movements -- North Carolina -- Chapel Hill -- Photographs",
          "Carrboro (N.C.) -- Photographs",
          "Chapel Hill (N.C.) -- Photographs",
          "Durham (N.C.) -- Photographs",
          "Hillsborough (N.C.) -- Photographs",
          "North Carolina -- Photographs"],
        "note_biographical_a":["Roland Giduz was born in 1925 and graduated from the University of North Carolina with a degree in journalism in 1948. He worked for newspapers in Durham and Chapel Hill, N.C., was editor of \"The Chapel Hill News Leader\" and \"The News of Orange County.\" In 1961, he founded \"The Triangle Pointer.\" Giduz became manager of the University of North Carolina at Chapel Hill \"Alumni Review\" in 1966. He also served on the Chapel Hill Board of Alderman and ran for mayor in 1969."],
        "note_related_work_a":["See also Elmer D. Johnson photographic collection (P0020); University of North Carolina at Chapel Hill Photographic Laboratory collection (P31); University of North Carolina at Chapel Hill, Dramatic Art Department collection (P35) in the North Carolina Collection Photographic Archives, University of North Carolina at Chapel Hill."],
        "location_hierarchy_a":["unc",
          "unc:uncnorn",
          "unc:uncwil",
          "unc:uncwil:uncwilncc"],
        "record_data_source_a":["ILSMARC",
          "EAD"],
        "subject_geographic_a":["North Carolina",
          "Chapel Hill",
          "Carrboro (N.C.)",
          "Chapel Hill (N.C.)",
          "Durham (N.C.)",
          "Hillsborough (N.C.)"],
        "call_number_schemes_a":["ALPHANUM"],
        "origin_place_search_a":["North Carolina",
          "United States"],
        "physical_description_a":["About 19000 items (11.0 linear feet)"],
        "index_date":"2024-02-07T22:37:07Z"},
      {
        "id":"UNCb5627797",
        "url_a":["{\"href\":\"https://finding-aids.lib.unc.edu/05319/\",\"type\":\"findingaid\",\"note\":\"Finding aid\",\"restricted\":\"false\"}"],
        "items_a":["{\"item_id\":\"i7377277\",\"loc_b\":\"wadc\",\"loc_n\":\"wadc\",\"status\":\"In-Library Use Only\",\"call_no\":\"5319\",\"cn_scheme\":\"ALPHANUM\"}"],
        "owner_a":["unc"],
        "language_a":["English"],
        "local_id":"b5627797",
        "available_a":["Available"],
        "rollup_id":"OCLC232113483",
        "this_work_a":["{\"title\":[\"Independent weekly (Durham, N.C.)\"]}"],
        "note_local_a":["Source of acquisition: Acquired 2007, 2013.",
          "Source of acquisition: Acquired 2007"],
        "title_suggest":["Independent weekly records, 1982-2004."],
        "title_main":"Independent weekly records, 1982-2004.",
        "title_sort_ssort_single":"independent weekly records 1982 2004",
        "access_type_a":["At the Library"],
        "institution_a":["unc"],
        "oclc_number":"232113483",
        "note_general_a":["In the Southern Historical Collection, University of North Carolina at Chapel Hill (#5319).",
          "In English."],
        "note_summary_a":["The Independent Weekly is a free, alternative, weekly newspaper serving the Durham, Chapel Hill, Raleigh, and surrounding communities in central North Carolina. It was founded in 1983 in Durham by Steve Schewel, David Birkhead, and Katherine Fulton. The Independent Weekly is perhaps best known for its coverage of local music, film, visual arts, theater, dance, and pop culture, as well as for its strong focus on progressive politics and social activism. The collection is chiefly photographs, 1982-2004, from the Independent Weekly, including images published in the newspaper; unpublished production images of scenes, events, subjects, and organizations throughout North Carolina; images of individuals--chiefly politicians, artists, musicians, local activists, and civic leaders--such as Mike Easley, John Edwards, Harvey Gantt, Jesse Helms, Jim Hunt, Bill Bell, and others; images created by staff photographer Sadie Bridger; photographs of the newspaper's staff; and other images. There is also one slide reel (with slides) and a transcript for an Independent Weekly promotional slideshow. The collection also contains papers relating to early efforts to establish a statewide progressive newspaper in North Carolina and the founding of the Independent Weekly (first as the North Carolina Independent, then as the Independent) in the early 1980s, along with correspondence, notes, clippings, and other business and financial materials of the paper. Also included are notes, clippings, printed material, correspondence, and other materials relating to local, state, and national elections, chiefly 1994-2004. In addition, there are photographs and other materials, 1950s-1980, relating to New York photojournalist Ruth Sondak. These items--many photographs of Sondak's daughter, Cary Carmel; photographs taken by Sondak of people, street scenes, and celebrities; her journal, 1976-1980; a publicity scrapbook; and clippings featuring Sondak's photography--may have been acquired by newspaper staff for an exhibit on Sondak and her work."],
        "primary_oclc_a":["232113483"],
        "resource_type_a":["Archival and manuscript material"],
        "shelf_numbers_a":["5319"],
        "subject_genre_a":["Periodicals",
          "History"],
        "date_cataloged":"2019-01-08T05:00:00Z",
        "genre_headings_a":["Periodicals",
          "History"],
        "subject_suggest":["Periodicals",
          "History",
          "Bell, Bill",
          "Bridger, Sadie",
          "Carmel, Cary",
          "Easley, Michael F., 1950-",
          "Edwards, John, 1953 June 10-",
          "Gantt, Harvey B. (Harvey Bernard), 1943-",
          "Helms, Jesse",
          "Hunt, James B., 1937-",
          "Sondak, Ruth",
          "Independent (Durham, N.C.)",
          "Independent weekly (Durham, N.C.)",
          "North Carolina independent",
          "Since 1951",
          "Community life -- North Carolina",
          "Community newspapers -- North Carolina",
          "Editors -- North Carolina",
          "Journalism -- North Carolina",
          "Journalists -- North Carolina",
          "Newspaper publishing -- North Carolina",
          "Periodicals -- Publishing -- North Carolina",
          "Photographers -- New York (State) -- New York",
          "Photographers -- North Carolina",
          "Political activists -- North Carolina",
          "Publishers and publishing -- North Carolina",
          "Social action -- North Carolina",
          "Social reformers -- North Carolina",
          "Women photographers -- New York (State) -- New York",
          "Women photographers -- North Carolina",
          "Community life",
          "Community newspapers",
          "Editors",
          "Journalism",
          "Journalists",
          "Manners and customs",
          "Newspaper publishing",
          "Periodicals -- Publishing",
          "Photographers",
          "Political activists",
          "Politics and government",
          "Publishers and publishing",
          "Social action",
          "Social reformers",
          "Women photographers",
          "Chapel Hill (N.C.) -- Social life and customs",
          "Durham (N.C.) -- History",
          "Durham (N.C.) -- Periodicals",
          "Durham (N.C.) -- Social life and customs",
          "North Carolina -- Periodicals",
          "North Carolina -- Politics and government -- 1951-",
          "Raleigh (N.C.) -- Social life and customs",
          "New York (State) -- New York",
          "North Carolina",
          "North Carolina -- Chapel Hill",
          "North Carolina -- Durham",
          "North Carolina -- Raleigh"],
        "subject_topical_a":["Bell, Bill",
          "Bridger, Sadie",
          "Carmel, Cary",
          "Easley, Michael F., 1950-",
          "Edwards, John, 1953 June 10-",
          "Gantt, Harvey B. (Harvey Bernard), 1943-",
          "Helms, Jesse",
          "Hunt, James B., 1937-",
          "Sondak, Ruth",
          "Independent (Durham, N.C.)",
          "Independent weekly (Durham, N.C.)",
          "North Carolina independent",
          "Community life",
          "Community newspapers",
          "Editors",
          "Journalism",
          "Journalists",
          "Newspaper publishing",
          "Periodicals",
          "Publishing",
          "Photographers",
          "Political activists",
          "Publishers and publishing",
          "Social action",
          "Social reformers",
          "Women photographers",
          "Manners and customs",
          "Politics and government",
          "Social life and customs",
          "History"],
        "publication_year_sort":"1982",
        "subject_headings_a":["Bell, Bill",
          "Bridger, Sadie",
          "Carmel, Cary",
          "Easley, Michael F., 1950-",
          "Edwards, John, 1953 June 10-",
          "Gantt, Harvey B. (Harvey Bernard), 1943-",
          "Helms, Jesse",
          "Hunt, James B., 1937-",
          "Sondak, Ruth",
          "Independent (Durham, N.C.)",
          "Independent weekly (Durham, N.C.)",
          "North Carolina independent",
          "Since 1951",
          "Community life -- North Carolina",
          "Community newspapers -- North Carolina",
          "Editors -- North Carolina",
          "Journalism -- North Carolina",
          "Journalists -- North Carolina",
          "Newspaper publishing -- North Carolina",
          "Periodicals -- Publishing -- North Carolina",
          "Photographers -- New York (State) -- New York",
          "Photographers -- North Carolina",
          "Political activists -- North Carolina",
          "Publishers and publishing -- North Carolina",
          "Social action -- North Carolina",
          "Social reformers -- North Carolina",
          "Women photographers -- New York (State) -- New York",
          "Women photographers -- North Carolina",
          "Community life",
          "Community newspapers",
          "Editors",
          "Journalism",
          "Journalists",
          "Manners and customs",
          "Newspaper publishing",
          "Periodicals -- Publishing",
          "Photographers",
          "Political activists",
          "Politics and government",
          "Publishers and publishing",
          "Social action",
          "Social reformers",
          "Women photographers",
          "Chapel Hill (N.C.) -- Social life and customs",
          "Durham (N.C.) -- History",
          "Durham (N.C.) -- Periodicals",
          "Durham (N.C.) -- Social life and customs",
          "North Carolina -- Periodicals",
          "North Carolina -- Politics and government -- 1951-",
          "Raleigh (N.C.) -- Social life and customs",
          "New York (State) -- New York",
          "North Carolina",
          "North Carolina -- Chapel Hill",
          "North Carolina -- Durham",
          "North Carolina -- Raleigh"],
        "note_related_work_a":["See also Robert V. N. Brown Papers (#5312) in the Southern Historical Collection, University of North Carolina at Chapel Hill."],
        "location_hierarchy_a":["unc",
          "unc:uncsoun",
          "unc:uncwil",
          "unc:uncwil:uncwilshc"],
        "record_data_source_a":["ILSMARC",
          "EAD"],
        "subject_geographic_a":["North Carolina",
          "New York (State)",
          "New York",
          "Chapel Hill",
          "Durham",
          "Raleigh",
          "Chapel Hill (N.C.)",
          "Durham (N.C.)",
          "Raleigh (N.C.)"],
        "call_number_schemes_a":["ALPHANUM"],
        "origin_place_search_a":["North Carolina",
          "United States"],
        "physical_description_a":["approximately 25200 items (38.5 linear ft.)"],
        "subject_chronological_a":["Since 1951",
          "1951-"],
        "note_access_restrictions_a":["No restrictions."],
        "index_date":"2024-02-06T18:21:51Z"},
      {
        "id":"UNCb4857301",
        "url_a":["{\"href\":\"https://finding-aids.lib.unc.edu/30006/\",\"type\":\"findingaid\",\"note\":\"Finding aid\",\"restricted\":\"false\"}"],
        "items_a":["{\"item_id\":\"i6406739\",\"loc_b\":\"wadb\",\"loc_n\":\"wadb\",\"status\":\"In-Library Use Only\",\"call_no\":\"30006\",\"cn_scheme\":\"ALPHANUM\"}"],
        "owner_a":["unc"],
        "language_a":["English"],
        "local_id":"b4857301",
        "available_a":["Available"],
        "rollup_id":"OCLC70137640",
        "title_suggest":["Southern Folklife Collection song folios, circa 1882-1983."],
        "title_main":"Southern Folklife Collection song folios, circa 1882-1983.",
        "title_sort_ssort_single":"southern folklife collection song folios circa 1882 1983",
        "access_type_a":["At the Library"],
        "institution_a":["unc"],
        "oclc_number":"70137640",
        "note_general_a":["In the Southern Folklife Collection, University of North Carolina at Chapel Hill (#30006)."],
        "note_summary_a":["Song folios from the United States, Canada, Australia, and England, circa 1882-1983. Some folios were published by radio stations, including WSM in Nashville, Tenn., and WWVA in Wheeling, W.Va. Musical genres and song styles represented include calypso, comedy songs, country songs, cowboy songs, gospel songs, Hawaiian songs, hobo songs, hymns, Irish reels, labor songs, Latin-American songs, minstrel songs, Mormon songs, novelty songs, parodies, popular songs, spirituals, songs of the Industrial Workers of the World, traditional songs, union songs, vaudeville, western songs, and World War II songs. Significant persons and groups are listed below."],
        "primary_oclc_a":["70137640"],
        "resource_type_a":["Archival and manuscript material"],
        "shelf_numbers_a":["30006"],
        "subject_genre_a":["Songs and music",
          "Songbooks",
          "Songs",
          "Humorous songs",
          "Hymns",
          "Minstrel music",
          "Novelty songs",
          "Popular music",
          "Reels (Music)",
          "Bluegrass music",
          "Calypso (Music)",
          "Christmas music",
          "Country music",
          "Folk music",
          "Gospel music"],
        "date_cataloged":"2011-02-21T05:00:00Z",
        "genre_headings_a":["Songs and music",
          "Songbooks",
          "Songs",
          "Humorous songs",
          "Hymns",
          "Minstrel music",
          "Novelty songs",
          "Popular music",
          "Reels (Music)",
          "Bluegrass music",
          "Calypso (Music)",
          "Christmas music",
          "Country music",
          "Folk music",
          "Gospel music"],
        "subject_suggest":["Songs and music",
          "Songbooks",
          "Songs",
          "Humorous songs",
          "Hymns",
          "Minstrel music",
          "Novelty songs",
          "Popular music",
          "Reels (Music)",
          "Bluegrass music",
          "Calypso (Music)",
          "Christmas music",
          "Country music",
          "Folk music",
          "Gospel music",
          "Rogers, Jesse, 1911-1973",
          "Rogers, Roy, 1911-1998",
          "Scruggs, Earl",
          "Sizemore, Asher",
          "Sizemore, Gordon",
          "Smith, Carl, 1927-2010",
          "Smith, Jerry",
          "Snow, Hank",
          "Thompson, Hank",
          "Trace, Al, 1900-1993",
          "Travis, Merle",
          "Tubb, Ernest, 1914-1984",
          "Wagoner, Porter",
          "Walker, Cindy",
          "Wells, Kitty",
          "Williams, Bert, 1874-1922",
          "Williams, Doc, 1914-2011",
          "Williams, Hank, 1923-1953",
          "Wills, Bob, 1905-1975",
          "Young, Faron",
          "Ives, Burl, 1909-1995",
          "Jolson, Al, 1886-1950",
          "Jones, George, 1931-2013",
          "Jones, Grandpa, 1913-1998",
          "King, Pee Wee, 1914-2000",
          "LeDoux, Chris",
          "Little, Betty",
          "Little Jimmie",
          "McFarland, Lester",
          "Monroe, Bill, 1911-1996",
          "Montana Slim, 1904-1996",
          "Montana, Patsy",
          "Nolan, Bob",
          "Parker, Andy",
          "Red River Dave, 1914-2002",
          "Reeves, Jim",
          "Ritter, Tex",
          "Robison, Carson",
          "Rodgers, Jimmie, 1897-1933",
          "Acuff, Roy",
          "Alberta Slim, 1910-2005",
          "Allen, Rex, 1947-",
          "Arkie the Arkansas Woodchopper",
          "Arnold, Eddy, 1918-2008",
          "Atcher, Bob",
          "Autry, Gene, 1907-1998",
          "Bernard, Al, 1888-1949",
          "Big Slim, 1903-1966",
          "Blind Blake",
          "Blue Grass Roy",
          "Boyd, Bill",
          "Carlisle, Cliff, 1904-1983",
          "Carter, A. P. (Alvin Pleasant), 1891-1960",
          "Carter, Maybelle, 1909-1978",
          "Cash, Johnny",
          "Clauser, Al.",
          "Cooley, Spade, 1910-1969",
          "Copas, Cowboy",
          "Dickens, Little Jimmy, 1920-2015",
          "Dudgeon, Frank",
          "Flatt, Lester",
          "Foley, Red, 1910-1968",
          "Fowler, Wally",
          "Frizzell, Lefty, 1928-1975",
          "Gardner, Robert",
          "Gregory, Bobby",
          "Hawkins, Hawkshaw, 1921-1963",
          "Sons of the Pioneers",
          "Stanley Brothers",
          "Weavers (Musical group)",
          "WSM (Radio station : Nashville, Tenn.)",
          "WWVA (Radio station : Wheeling, W. Va.)",
          "Industrial Workers of the World -- Songs and music",
          "Karl and Harty",
          "Kingston Trio",
          "Louvin Brothers",
          "Oklahoma Outlaws",
          "Plainsmen (Musical group : U.S.)",
          "Prairie Ramblers",
          "AFL-CIO -- Songs and music",
          "Almanac Singers",
          "Bailes Brothers",
          "Bailey Brothers",
          "Blackwood Brothers Quartet",
          "Carter Family (Musical group)",
          "CFQC (Radio station : Saskatoon, Canada)",
          "Delmore Brothers",
          "Foggy Mountain Boys",
          "Grand Ole Opry (Theater)",
          "Slavery -- Songs and music",
          "Songs, Hawaiian",
          "Working class -- Songs and music",
          "World War, 1939-1945 -- Songs and music",
          "Labor unions -- Songs and music",
          "Labor -- Songs and music",
          "Latter Day Saints -- Songs and music",
          "Parody in music",
          "Patriotic music -- United States",
          "Cowboys -- Songs and music",
          "West (U.S.) -- Songs and music",
          "Latin America -- Songs and music",
          "Morton (Tex.)"],
        "subject_topical_a":["Rogers, Jesse, 1911-1973",
          "Rogers, Roy, 1911-1998",
          "Scruggs, Earl",
          "Sizemore, Asher",
          "Sizemore, Gordon",
          "Smith, Carl, 1927-2010",
          "Smith, Jerry",
          "Snow, Hank",
          "Thompson, Hank",
          "Trace, Al, 1900-1993",
          "Travis, Merle",
          "Tubb, Ernest, 1914-1984",
          "Wagoner, Porter",
          "Walker, Cindy",
          "Wells, Kitty",
          "Williams, Bert, 1874-1922",
          "Williams, Doc, 1914-2011",
          "Williams, Hank, 1923-1953",
          "Wills, Bob, 1905-1975",
          "Young, Faron",
          "Ives, Burl, 1909-1995",
          "Jolson, Al, 1886-1950",
          "Jones, George, 1931-2013",
          "Jones, Grandpa, 1913-1998",
          "King, Pee Wee, 1914-2000",
          "LeDoux, Chris",
          "Little, Betty",
          "Little Jimmie",
          "McFarland, Lester",
          "Monroe, Bill, 1911-1996",
          "Montana Slim, 1904-1996",
          "Montana, Patsy",
          "Nolan, Bob",
          "Parker, Andy",
          "Red River Dave, 1914-2002",
          "Reeves, Jim",
          "Ritter, Tex",
          "Robison, Carson",
          "Rodgers, Jimmie, 1897-1933",
          "Acuff, Roy",
          "Alberta Slim, 1910-2005",
          "Allen, Rex, 1947-",
          "Arkie the Arkansas Woodchopper",
          "Arnold, Eddy, 1918-2008",
          "Atcher, Bob",
          "Autry, Gene, 1907-1998",
          "Bernard, Al, 1888-1949",
          "Big Slim, 1903-1966",
          "Blind Blake",
          "Blue Grass Roy",
          "Boyd, Bill",
          "Carlisle, Cliff, 1904-1983",
          "Carter, A. P. (Alvin Pleasant), 1891-1960",
          "Carter, Maybelle, 1909-1978",
          "Cash, Johnny",
          "Clauser, Al.",
          "Cooley, Spade, 1910-1969",
          "Copas, Cowboy",
          "Dickens, Little Jimmy, 1920-2015",
          "Dudgeon, Frank",
          "Flatt, Lester",
          "Foley, Red, 1910-1968",
          "Fowler, Wally",
          "Frizzell, Lefty, 1928-1975",
          "Gardner, Robert",
          "Gregory, Bobby",
          "Hawkins, Hawkshaw, 1921-1963",
          "Sons of the Pioneers",
          "Stanley Brothers",
          "Weavers (Musical group)",
          "WSM (Radio station : Nashville, Tenn.)",
          "WWVA (Radio station : Wheeling, W. Va.)",
          "Industrial Workers of the World",
          "Karl and Harty",
          "Kingston Trio",
          "Louvin Brothers",
          "Oklahoma Outlaws",
          "Plainsmen (Musical group : U.S.)",
          "Prairie Ramblers",
          "AFL-CIO",
          "Almanac Singers",
          "Bailes Brothers",
          "Bailey Brothers",
          "Blackwood Brothers Quartet",
          "Carter Family (Musical group)",
          "CFQC (Radio station : Saskatoon, Canada)",
          "Delmore Brothers",
          "Foggy Mountain Boys",
          "Grand Ole Opry (Theater)",
          "Slavery",
          "Songs, Hawaiian",
          "Working class",
          "World War, 1939-1945",
          "Labor unions",
          "Labor",
          "Latter Day Saints",
          "Parody in music",
          "Patriotic music",
          "Cowboys"],
        "publication_year_sort":"1882",
        "subject_headings_a":["Rogers, Jesse, 1911-1973",
          "Rogers, Roy, 1911-1998",
          "Scruggs, Earl",
          "Sizemore, Asher",
          "Sizemore, Gordon",
          "Smith, Carl, 1927-2010",
          "Smith, Jerry",
          "Snow, Hank",
          "Thompson, Hank",
          "Trace, Al, 1900-1993",
          "Travis, Merle",
          "Tubb, Ernest, 1914-1984",
          "Wagoner, Porter",
          "Walker, Cindy",
          "Wells, Kitty",
          "Williams, Bert, 1874-1922",
          "Williams, Doc, 1914-2011",
          "Williams, Hank, 1923-1953",
          "Wills, Bob, 1905-1975",
          "Young, Faron",
          "Ives, Burl, 1909-1995",
          "Jolson, Al, 1886-1950",
          "Jones, George, 1931-2013",
          "Jones, Grandpa, 1913-1998",
          "King, Pee Wee, 1914-2000",
          "LeDoux, Chris",
          "Little, Betty",
          "Little Jimmie",
          "McFarland, Lester",
          "Monroe, Bill, 1911-1996",
          "Montana Slim, 1904-1996",
          "Montana, Patsy",
          "Nolan, Bob",
          "Parker, Andy",
          "Red River Dave, 1914-2002",
          "Reeves, Jim",
          "Ritter, Tex",
          "Robison, Carson",
          "Rodgers, Jimmie, 1897-1933",
          "Acuff, Roy",
          "Alberta Slim, 1910-2005",
          "Allen, Rex, 1947-",
          "Arkie the Arkansas Woodchopper",
          "Arnold, Eddy, 1918-2008",
          "Atcher, Bob",
          "Autry, Gene, 1907-1998",
          "Bernard, Al, 1888-1949",
          "Big Slim, 1903-1966",
          "Blind Blake",
          "Blue Grass Roy",
          "Boyd, Bill",
          "Carlisle, Cliff, 1904-1983",
          "Carter, A. P. (Alvin Pleasant), 1891-1960",
          "Carter, Maybelle, 1909-1978",
          "Cash, Johnny",
          "Clauser, Al.",
          "Cooley, Spade, 1910-1969",
          "Copas, Cowboy",
          "Dickens, Little Jimmy, 1920-2015",
          "Dudgeon, Frank",
          "Flatt, Lester",
          "Foley, Red, 1910-1968",
          "Fowler, Wally",
          "Frizzell, Lefty, 1928-1975",
          "Gardner, Robert",
          "Gregory, Bobby",
          "Hawkins, Hawkshaw, 1921-1963",
          "Sons of the Pioneers",
          "Stanley Brothers",
          "Weavers (Musical group)",
          "WSM (Radio station : Nashville, Tenn.)",
          "WWVA (Radio station : Wheeling, W. Va.)",
          "Industrial Workers of the World -- Songs and music",
          "Karl and Harty",
          "Kingston Trio",
          "Louvin Brothers",
          "Oklahoma Outlaws",
          "Plainsmen (Musical group : U.S.)",
          "Prairie Ramblers",
          "AFL-CIO -- Songs and music",
          "Almanac Singers",
          "Bailes Brothers",
          "Bailey Brothers",
          "Blackwood Brothers Quartet",
          "Carter Family (Musical group)",
          "CFQC (Radio station : Saskatoon, Canada)",
          "Delmore Brothers",
          "Foggy Mountain Boys",
          "Grand Ole Opry (Theater)",
          "Slavery -- Songs and music",
          "Songs, Hawaiian",
          "Working class -- Songs and music",
          "World War, 1939-1945 -- Songs and music",
          "Labor unions -- Songs and music",
          "Labor -- Songs and music",
          "Latter Day Saints -- Songs and music",
          "Parody in music",
          "Patriotic music -- United States",
          "Cowboys -- Songs and music",
          "West (U.S.) -- Songs and music",
          "Latin America -- Songs and music",
          "Morton (Tex.)"],
        "location_hierarchy_a":["unc",
          "unc:uncsouz",
          "unc:uncwil",
          "unc:uncwil:uncwilsfc"],
        "record_data_source_a":["ILSMARC",
          "EAD"],
        "subject_geographic_a":["United States",
          "West (U.S.)",
          "Latin America",
          "Morton (Tex.)"],
        "call_number_schemes_a":["ALPHANUM"],
        "origin_place_search_a":["United States"],
        "physical_description_a":["755 items (10.0 linear feet)"],
        "index_date":"2024-02-04T21:36:52Z"},
      {
        "id":"UNCb8394869",
        "url_a":["{\"href\":\"https://finding-aids.lib.unc.edu/20485/\",\"type\":\"findingaid\",\"note\":\"Finding aid\",\"restricted\":\"false\"}"],
        "items_a":["{\"item_id\":\"i10918051\",\"loc_b\":\"wadb\",\"loc_n\":\"wadb\",\"status\":\"In-Library Use Only\",\"call_no\":\"20485\",\"cn_scheme\":\"ALPHANUM\"}"],
        "author_suggest":["Aldin, Mary Katherine"],
        "names_a":["{\"name\":\"Aldin, Mary Katherine\",\"type\":\"creator\",\"id\":\"https://id.loc.gov/authorities/names/no00057090\"}"],
        "owner_a":["unc"],
        "language_a":["English"],
        "local_id":"b8394869",
        "available_a":["Available"],
        "rollup_id":"OCLC932509621",
        "note_local_a":["Source of acquisition: Acquired 2012."],
        "title_suggest":["Mary Katherine Aldin artist files, circa 1990-2010."],
        "title_main":"Mary Katherine Aldin artist files, circa 1990-2010.",
        "title_sort_ssort_single":"mary katherine aldin artist files circa 1990 2010",
        "access_type_a":["At the Library"],
        "institution_a":["unc"],
        "oclc_number":"932509621",
        "creator_main_a":["Aldin, Mary Katherine"],
        "note_general_a":["In the Southern Folklife Collection, University of North Carolina at Chapel Hill (#20485)."],
        "note_summary_a":["The collection contains files on folk, bluegrass, blues, country, and popular musicians: chiefly publicity photographs, promotional materials, clippings, correspondence, and obituaries."],
        "primary_oclc_a":["932509621"],
        "resource_type_a":["Archival and manuscript material"],
        "shelf_numbers_a":["20485"],
        "subject_genre_a":["Bluegrass music",
          "Country music",
          "Popular music"],
        "date_cataloged":"2015-12-17T05:00:00Z",
        "genre_headings_a":["Bluegrass music",
          "Country music",
          "Popular music"],
        "subject_suggest":["Bluegrass music",
          "Country music",
          "Popular music",
          "Aldin, Mary Katherine",
          "Blues musicians",
          "Folk music -- United States",
          "Musicians",
          "Sound recording industry -- History"],
        "subject_topical_a":["Aldin, Mary Katherine",
          "Blues musicians",
          "Folk music",
          "Musicians",
          "Sound recording industry",
          "History"],
        "publication_year_sort":"1990",
        "subject_headings_a":["Aldin, Mary Katherine",
          "Blues musicians",
          "Folk music -- United States",
          "Musicians",
          "Sound recording industry -- History"],
        "note_biographical_a":["Mary Katherine Aldin is a freelance independent reissue producer and annotator. She wrote a blues column for the L.A. Weekly for more than 20 years; has contributed essays to several books and magazines on American roots music; and has hosted an American roots music radio show in Los Angeles, Calif."],
        "location_hierarchy_a":["unc",
          "unc:uncsouz",
          "unc:uncwil",
          "unc:uncwil:uncwilsfc"],
        "record_data_source_a":["ILSMARC",
          "EAD"],
        "subject_geographic_a":["United States"],
        "call_number_schemes_a":["ALPHANUM"],
        "origin_place_search_a":["California",
          "United States"],
        "physical_description_a":["Approximately 2200 items (33 linear feet)"],
        "index_date":"2024-02-14T07:36:37Z"},
      {
        "id":"UNCb5882736",
        "url_a":["{\"href\":\"https://finding-aids.lib.unc.edu/30013/\",\"type\":\"findingaid\",\"note\":\"Finding aid\",\"restricted\":\"false\"}"],
        "items_a":["{\"item_id\":\"i7663595\",\"loc_b\":\"wadb\",\"loc_n\":\"wadb\",\"status\":\"In-Library Use Only\",\"call_no\":\"30013\",\"cn_scheme\":\"ALPHANUM\"}"],
        "owner_a":["unc"],
        "language_a":["English"],
        "local_id":"b5882736",
        "available_a":["Available"],
        "rollup_id":"OCLC312121177",
        "title_suggest":["Southern Folklife Collection sheet music and song lyrics, 1852-1988."],
        "title_main":"Southern Folklife Collection sheet music and song lyrics, 1852-1988.",
        "title_sort_ssort_single":"southern folklife collection sheet music and song lyrics 1852 1988",
        "access_type_a":["At the Library"],
        "institution_a":["unc"],
        "oclc_number":"312121177",
        "note_general_a":["In the Southern Folklife Collection, University of North Carolina at Chapel Hill (#30013)."],
        "note_summary_a":["The collection consists of sheet music and song lyrics from the United States, circa 1852-1988. The sheet music is largely for country songs. Much of this music was published by Acuff-Rose of Nashville, Tenn., but other music publishers are also represented. Among the artists represented are Felice and Boudleaux Bryant, Martha Carson, Helen Carter, Don Gibson, John D. Loudermilk, Ira and Charles Louvin, Roy Orbison, and Leon Payne."],
        "primary_oclc_a":["312121177"],
        "resource_type_a":["Archival and manuscript material"],
        "shelf_numbers_a":["30013"],
        "subject_genre_a":["Texts",
          "Country music",
          "Notated music"],
        "date_cataloged":"2009-03-04T05:00:00Z",
        "genre_headings_a":["Texts",
          "Country music",
          "Notated music"],
        "subject_suggest":["Texts",
          "Country music",
          "Notated music",
          "Bryant, Boudleaux",
          "Bryant, Felice",
          "Carson, Martha",
          "Carter, Helen, 1927-1998",
          "Gibson, Don (Donald Eugene), 1928-2003",
          "Loudermilk, John D.",
          "Louvin, Charlie, 1927-2011",
          "Louvin, Ira, 1924-1965",
          "Orbison, Roy",
          "Payne, Leon",
          "Acuff-Rose Publications",
          "Composers -- United States",
          "Country musicians",
          "Songs -- Texts"],
        "subject_topical_a":["Bryant, Boudleaux",
          "Bryant, Felice",
          "Carson, Martha",
          "Carter, Helen, 1927-1998",
          "Gibson, Don (Donald Eugene), 1928-2003",
          "Loudermilk, John D.",
          "Louvin, Charlie, 1927-2011",
          "Louvin, Ira, 1924-1965",
          "Orbison, Roy",
          "Payne, Leon",
          "Acuff-Rose Publications",
          "Composers",
          "Country musicians",
          "Songs"],
        "publication_year_sort":"1852",
        "subject_headings_a":["Bryant, Boudleaux",
          "Bryant, Felice",
          "Carson, Martha",
          "Carter, Helen, 1927-1998",
          "Gibson, Don (Donald Eugene), 1928-2003",
          "Loudermilk, John D.",
          "Louvin, Charlie, 1927-2011",
          "Louvin, Ira, 1924-1965",
          "Orbison, Roy",
          "Payne, Leon",
          "Acuff-Rose Publications",
          "Composers -- United States",
          "Country musicians",
          "Songs -- Texts"],
        "location_hierarchy_a":["unc",
          "unc:uncsouz",
          "unc:uncwil",
          "unc:uncwil:uncwilsfc"],
        "record_data_source_a":["ILSMARC",
          "EAD"],
        "subject_geographic_a":["United States"],
        "call_number_schemes_a":["ALPHANUM"],
        "origin_place_search_a":["United States"],
        "physical_description_a":["About 3600 items (4.5 linear feet)"],
        "index_date":"2024-02-07T05:06:41Z"},
      {
        "id":"UNCb2454485",
        "url_a":["{\"href\":\"https://finding-aids.lib.unc.edu/20003/\",\"type\":\"findingaid\",\"note\":\"Finding aid\",\"restricted\":\"false\"}"],
        "items_a":["{\"item_id\":\"i3521722\",\"loc_b\":\"wadb\",\"loc_n\":\"wadb\",\"status\":\"In-Library Use Only\",\"call_no\":\"20003\",\"cn_scheme\":\"ALPHANUM\"}"],
        "author_suggest":["Wilgus, D. K."],
        "names_a":["{\"name\":\"Wilgus, D. K.\",\"type\":\"creator\",\"id\":\"https://id.loc.gov/authorities/names/n81149280\"}"],
        "owner_a":["unc"],
        "language_a":["English"],
        "local_id":"b2454485",
        "available_a":["Available"],
        "rollup_id":"OCLC27207728",
        "note_local_a":["Source of acquisition: Acquired 1998-2004",
          "Source of acquisition: Acquired 1998-2001"],
        "title_suggest":["D.K. Wilgus papers, 1883-1996."],
        "title_main":"D.K. Wilgus papers, 1883-1996.",
        "title_sort_ssort_single":"dk wilgus papers 1883 1996",
        "access_type_a":["At the Library"],
        "institution_a":["unc"],
        "oclc_number":"27207728",
        "creator_main_a":["Wilgus, D. K."],
        "note_general_a":["In the Southern Folklife Collection, Library of the University of North Carolina at Chapel Hill (#20003).",
          "In English"],
        "note_summary_a":["The collection of white folklorist and UCLA professor D.K. Wilgus (1918-1989) contains professional correspondence and papers; personal correspondence; writings and publications about Anglo American folk music; teaching materials of both Wilgus and Eleanor R. Long-Wilgus; research files and discographies for folk music artists and record labels; photographs, many taken at the UCLA Folk Festival in Los Angeles, Calif.; project files and related publications about the Titanic and outlaw Jesse James; a personal card catalog with notes and discographical information about country and western music, songsters, blues, old-time music, Irish music, Rocky Mountain ballads, and other topics; and audio recordings made or collected by Wilgus, chiefly of ballads and songs by individual performers. Audio materials also include copies of radio transcription discs of artists such as Lulu Belle and Scotty, Texas Jim Lewis, Bluegrass Roy, and Faron Young; field recordings made by Wilgus between 1969 and 1972 in Ireland of ballad singers and instrumentalists; recordings of Anglo-American ballad singer Sara Cleveland and early country musician and steel guitar player Jimmie Tarlton; items related to Naomi Wise; and interviews with country musicians Ernest Tubb and Ernest Stoneman"],
        "primary_oclc_a":["27207728"],
        "resource_type_a":["Archival and manuscript material"],
        "shelf_numbers_a":["20003"],
        "subject_genre_a":["Songs and music",
          "Interviews",
          "Photographs",
          "Discography",
          "Catalogs",
          "Bluegrass music",
          "Folk music",
          "Western swing (Music)",
          "Country music",
          "Discographies",
          "Primary sources"],
        "date_cataloged":"2019-09-11T04:00:00Z",
        "genre_headings_a":["Songs and music",
          "Interviews",
          "Photographs",
          "Discography",
          "Catalogs",
          "Bluegrass music",
          "Folk music",
          "Western swing (Music)",
          "Country music",
          "Discographies"],
        "subject_suggest":["Songs and music",
          "Interviews",
          "Photographs",
          "Discography",
          "Catalogs",
          "Bluegrass music",
          "Folk music",
          "Western swing (Music)",
          "Country music",
          "Discographies",
          "Blue Grass Roy",
          "Cleveland, Sara, 1905-1992",
          "James, Jesse, 1847-1882",
          "Lewis, Texas Jim",
          "Long-Wilgus, Eleanor R., 1923-2005",
          "Munnelly, Tom",
          "Stoneman, Ernest V.",
          "Tarlton, Jimmie, 1892-1979",
          "Tubb, Ernest, 1914-1984",
          "Wilgus, D. K.",
          "Wise, Naomi, 1789-1807 or 1808",
          "Wiseman, Lulu Belle",
          "Wiseman, Scotty, 1909-1981",
          "Young, Faron",
          "Irish Folklore Commission",
          "Lulu Belle and Scotty",
          "Titanic (Steamship) -- Songs and music",
          "University of California, Los Angeles. Center for the Study of Comparative Folklore and Mythology",
          "University of California, Los Angeles -- Faculty",
          "Titanic (Steamship)",
          "University of California, Los Angeles",
          "UCLA Folk Music Festival",
          "Ballads, English",
          "Ballads, Irish",
          "Country musicians -- Interviews",
          "Folk festivals",
          "Folk festivals -- Photographs",
          "Folk songs -- Discography",
          "Folklore -- Study and teaching (Higher)",
          "Folklore",
          "Folklorists",
          "Music and folklore",
          "Musicians",
          "Musicians -- Photographs",
          "Old-time music",
          "Popular culture",
          "Sound recordings -- Catalogs",
          "Sound recording industry",
          "Country musicians",
          "Folk songs",
          "Sound recordings",
          "Universities and colleges -- Faculty",
          "Great Britain -- Songs and music",
          "Ireland -- Songs and music",
          "Southern States -- Songs and music",
          "Great Britain",
          "Ireland",
          "Southern States"],
        "subject_topical_a":["Blue Grass Roy",
          "Cleveland, Sara, 1905-1992",
          "James, Jesse, 1847-1882",
          "Lewis, Texas Jim",
          "Long-Wilgus, Eleanor R., 1923-2005",
          "Munnelly, Tom",
          "Stoneman, Ernest V.",
          "Tarlton, Jimmie, 1892-1979",
          "Tubb, Ernest, 1914-1984",
          "Wilgus, D. K.",
          "Wise, Naomi, 1789-1807 or 1808",
          "Wiseman, Lulu Belle",
          "Wiseman, Scotty, 1909-1981",
          "Young, Faron",
          "Irish Folklore Commission",
          "Lulu Belle and Scotty",
          "Titanic (Steamship)",
          "University of California, Los Angeles. Center for the Study of Comparative Folklore and Mythology",
          "University of California, Los Angeles",
          "Faculty",
          "UCLA Folk Music Festival",
          "Ballads, English",
          "Ballads, Irish",
          "Country musicians",
          "Folk festivals",
          "Folk songs",
          "Folklore",
          "Study and teaching (Higher)",
          "Folklorists",
          "Music and folklore",
          "Musicians",
          "Old-time music",
          "Popular culture",
          "Sound recordings",
          "Sound recording industry",
          "Universities and colleges"],
        "publication_year_sort":"1883",
        "subject_headings_a":["Blue Grass Roy",
          "Cleveland, Sara, 1905-1992",
          "James, Jesse, 1847-1882",
          "Lewis, Texas Jim",
          "Long-Wilgus, Eleanor R., 1923-2005",
          "Munnelly, Tom",
          "Stoneman, Ernest V.",
          "Tarlton, Jimmie, 1892-1979",
          "Tubb, Ernest, 1914-1984",
          "Wilgus, D. K.",
          "Wise, Naomi, 1789-1807 or 1808",
          "Wiseman, Lulu Belle",
          "Wiseman, Scotty, 1909-1981",
          "Young, Faron",
          "Irish Folklore Commission",
          "Lulu Belle and Scotty",
          "Titanic (Steamship) -- Songs and music",
          "University of California, Los Angeles. Center for the Study of Comparative Folklore and Mythology",
          "University of California, Los Angeles -- Faculty",
          "Titanic (Steamship)",
          "University of California, Los Angeles",
          "UCLA Folk Music Festival",
          "Ballads, English",
          "Ballads, Irish",
          "Country musicians -- Interviews",
          "Folk festivals",
          "Folk festivals -- Photographs",
          "Folk songs -- Discography",
          "Folklore -- Study and teaching (Higher)",
          "Folklore",
          "Folklorists",
          "Music and folklore",
          "Musicians",
          "Musicians -- Photographs",
          "Old-time music",
          "Popular culture",
          "Sound recordings -- Catalogs",
          "Sound recording industry",
          "Country musicians",
          "Folk songs",
          "Sound recordings",
          "Universities and colleges -- Faculty",
          "Great Britain -- Songs and music",
          "Ireland -- Songs and music",
          "Southern States -- Songs and music",
          "Great Britain",
          "Ireland",
          "Southern States"],
        "note_related_work_a":["See also the Eleanor R. Long-Wilgus collection (#20435) in the Southern Folklife Collection, University of North Carolina at Chapel Hill."],
        "location_hierarchy_a":["unc",
          "unc:uncsouz",
          "unc:uncwil",
          "unc:uncwil:uncwilsfc"],
        "record_data_source_a":["ILSMARC",
          "EAD"],
        "subject_geographic_a":["Great Britain",
          "Ireland",
          "Southern States"],
        "call_number_schemes_a":["ALPHANUM"],
        "origin_place_search_a":["United States"],
        "physical_description_a":["approximately 93500 items (87.5 linear ft.)"],
        "note_access_restrictions_a":["Use of audio materials may require production of listening or viewing copies.",
          "Access to streaming audio or moving image materials may be restricted to researchers who can authenticate with an ONYEN or who are physically present on campus. For further information about access to streaming audiovisual materials, contact Research and Instructional Services staff at Wilsonlibrary@unc.edu"],
        "index_date":"2024-01-26T11:06:44Z"}]
  },
  "facet_counts":{
    "facet_queries":{
      "date_cataloged_dt:[NOW-7DAY/DAY TO NOW]":0,
      "date_cataloged_dt:[NOW-1MONTH/DAY TO NOW]":0,
      "date_cataloged_dt:[NOW-3MONTH/DAY TO NOW]":0},
    "facet_fields":{
      "access_type_f":[
        "At the Library",23,
        "Online",1],
      "available_f":[
        "Available",24],
      "location_hierarchy_f":[
        "unc",23,
        "unc:uncwil",20,
        "unc:uncsouz",8,
        "unc:uncwil:uncwilsfc",8,
        "unc:uncsoun",6,
        "unc:uncwil:uncwilshc",6,
        "unc:uncdavy",5,
        "unc:uncnorn",4,
        "unc:uncwil:uncwilncc",4,
        "unc:uncrarn",2,
        "unc:uncwil:uncwilrbc",2,
        "unc:unclibr",1,
        "unc:uncmusy",1],
      "resource_type_f":[
        "Archival and manuscript material",20,
        "Book",3,
        "Music score",1],
      "physical_media_f":[
        "Microfilm",4,
        "Microform",4,
        "Print",3,
        "Online",1],
      "subject_topical_f":[
        "History",13,
        "African Americans",7,
        "Social life and customs",7,
        "Folklore",5,
        "Faculty",4,
        "Families",4,
        "Manners and customs",4,
        "Social conditions",4,
        "Societies, etc",4,
        "Universities and colleges",4,
        "University of North Carolina (1793-1962)",4],
      "lcc_callnum_classification_f":[
        "M - Music",1,
        "M - Music|M1 - M5000 Music",1,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music",1,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1497 - M1998 Secular vocal music",1,
        "M - Music|M1 - M5000 Music|M1495 - M5000 Vocal music|M1497 - M1998 Secular vocal music|M1627 - M1853 National music",1,
        "P - Language and literature",3,
        "P - Language and literature|PR1 - PR9680 English literature",3,
        "P - Language and literature|PR1 - PR9680 English literature|PR3291 - PR3785 17th and 18th centuries (1640-1770)",3],
      "language_f":[
        "English",24],
      "publication_year_isort":[
        "1944",2,
        "2012",2,
        "1757",1,
        "1834",1,
        "1852",1,
        "1862",1,
        "1882",1,
        "1883",1,
        "1887",1,
        "1905",1,
        "1914",1,
        "1935",1,
        "1936",1,
        "1937",1,
        "1939",1,
        "1945",1,
        "1946",1,
        "1947",1,
        "1982",1,
        "1988",1,
        "1990",1,
        "2001",1],
      "author_facet_f":[
        "Fish, Stanley Eugene",3,
        "A.P. Watt (Firm)",1,
        "Aldin, Mary Katherine",1,
        "Barbour, Durwood, 1929-2016",1,
        "Cameron (Family : Orange County, N.C.)",1,
        "Durham Herald Co",1,
        "Earle, Eugene",1,
        "Federal Writers' Project",1,
        "Ferris, William R.",1,
        "Giduz, Roland",1,
        "Green, Archie",1],
      "subject_genre_f":[
        "History",7,
        "Photographs",7,
        "Country music",6,
        "Songs and music",5,
        "Bluegrass music",4,
        "Catalogs",3,
        "Folk music",3,
        "Nonfiction",3,
        "Popular music",3,
        "Blues (Music)",2,
        "Discographies",2],
      "subject_geographic_f":[
        "United States",11,
        "North Carolina",9,
        "Southern States",5,
        "Durham (N.C.)",4,
        "Chapel Hill",3,
        "Chapel Hill (N.C.)",3,
        "Durham",3,
        "Durham County (N.C.)",3,
        "Orange County (N.C.)",3,
        "Raleigh (N.C.)",3,
        "Alabama",2],
      "subject_chronological_f":[
        "20th century",6,
        "1900-1999",3,
        "Early modern, 1500-1700",2,
        "1600-1699",1,
        "17th century",1,
        "1865-",1,
        "1892",1,
        "1900 - 1999",1,
        "1933-1939",1,
        "1951-",1,
        "1961-1970",1]},
    "facet_ranges":{},
    "facet_intervals":{},
    "facet_heatmaps":{}},
  "stats":{
    "stats_fields":{
      "publication_year_isort":{
        "min":1757.0,
        "max":2012.0,
        "count":24,
        "missing":0,
        "sum":46234.0,
        "sumOfSquares":8.9152246E7,
        "mean":1926.4166666666667,
        "stddev":61.254221978121045}}}}

    http_version:
  recorded_at: Tue, 20 Feb 2024 19:52:26 GMT
recorded_with: VCR 5.1.0
